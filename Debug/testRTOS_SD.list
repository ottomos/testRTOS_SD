
testRTOS_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b26c  0800b26c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800b26c  0800b26c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b26c  0800b26c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800b274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003bfc  20000010  0800b284  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003c0c  0800b284  00023c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee83  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004408  00000000  00000000  0003eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b68  00000000  00000000  000432d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  00044e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005833  00000000  00000000  000467c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4da  00000000  00000000  0004bffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001014d7  00000000  00000000  0006b4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c9ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000727c  00000000  00000000  0016c9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0e0 	.word	0x0800b0e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800b0e0 	.word	0x0800b0e0

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fb23 	bl	800081e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f81c 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8a8 	bl	8000330 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f888 	bl	80002f4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80001e4:	f000 f866 	bl	80002b4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80001e8:	f005 fe2a 	bl	8005e40 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f008 fa40 	bl	8008670 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <main+0x38>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x3c>)
 80001f6:	f008 fa85 	bl	8008704 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <main+0x40>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f008 fa5a 	bl	80086b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x34>
 8000206:	bf00      	nop
 8000208:	0800b16c 	.word	0x0800b16c
 800020c:	08000391 	.word	0x08000391
 8000210:	200000f8 	.word	0x200000f8

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2244      	movs	r2, #68	; 0x44
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f00a ff54 	bl	800b0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000236:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023a:	f001 f8ef 	bl	800141c <HAL_PWREx_ControlVoltageScaling>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000244:	f000 f8d6 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	2303      	movs	r3, #3
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800025a:	2302      	movs	r3, #2
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 80;
 800025e:	2350      	movs	r3, #80	; 0x50
 8000260:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000262:	2307      	movs	r3, #7
 8000264:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000266:	2302      	movs	r3, #2
 8000268:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800026a:	2304      	movs	r3, #4
 800026c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0314 	add.w	r3, r7, #20
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f928 	bl	80014c8 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 f8b9 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2303      	movs	r3, #3
 8000288:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000296:	463b      	mov	r3, r7
 8000298:	2104      	movs	r1, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fcf0 	bl	8001c80 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a6:	f000 f8a5 	bl	80003f4 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3758      	adds	r7, #88	; 0x58
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_SDMMC1_SD_Init+0x38>)
 80002ba:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <MX_SDMMC1_SD_Init+0x3c>)
 80002bc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_SDMMC1_SD_Init+0x38>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_SDMMC1_SD_Init+0x38>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_SDMMC1_SD_Init+0x38>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_SDMMC1_SD_Init+0x38>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <MX_SDMMC1_SD_Init+0x38>)
 80002d8:	2200      	movs	r2, #0
 80002da:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 46;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <MX_SDMMC1_SD_Init+0x38>)
 80002de:	222e      	movs	r2, #46	; 0x2e
 80002e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	2000002c 	.word	0x2000002c
 80002f0:	40012800 	.word	0x40012800

080002f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_DMA_Init+0x38>)
 80002fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <MX_DMA_Init+0x38>)
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	6493      	str	r3, [r2, #72]	; 0x48
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_DMA_Init+0x38>)
 8000308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800030a:	f003 0302 	and.w	r3, r3, #2
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2105      	movs	r1, #5
 8000316:	203b      	movs	r0, #59	; 0x3b
 8000318:	f000 fb96 	bl	8000a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800031c:	203b      	movs	r0, #59	; 0x3b
 800031e:	f000 fbaf 	bl	8000a80 <HAL_NVIC_EnableIRQ>

}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_GPIO_Init+0x5c>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <MX_GPIO_Init+0x5c>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_GPIO_Init+0x5c>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0304 	and.w	r3, r3, #4
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MX_GPIO_Init+0x5c>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <MX_GPIO_Init+0x5c>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_GPIO_Init+0x5c>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_GPIO_Init+0x5c>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	4a08      	ldr	r2, [pc, #32]	; (800038c <MX_GPIO_Init+0x5c>)
 800036c:	f043 0308 	orr.w	r3, r3, #8
 8000370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_GPIO_Init+0x5c>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	f003 0308 	and.w	r3, r3, #8
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000

08000390 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 MX_FATFS_Init();
 8000398:	f005 fd52 	bl	8005e40 <MX_FATFS_Init>

	  /* USER CODE BEGIN 5 */
		//1. Mount - 0
		f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	4908      	ldr	r1, [pc, #32]	; (80003c0 <StartDefaultTask+0x30>)
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <StartDefaultTask+0x34>)
 80003a2:	f007 fe0b 	bl	8007fbc <f_mount>

		//TEST Write operation
		//2. Open file for Writing
		if(f_open(&SDFile, "F7FILE1.TXT", FA_OPEN_APPEND | FA_WRITE) != FR_OK)
 80003a6:	2232      	movs	r2, #50	; 0x32
 80003a8:	4907      	ldr	r1, [pc, #28]	; (80003c8 <StartDefaultTask+0x38>)
 80003aa:	4808      	ldr	r0, [pc, #32]	; (80003cc <StartDefaultTask+0x3c>)
 80003ac:	f007 fe4c 	bl	8008048 <f_open>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d000      	beq.n	80003b8 <StartDefaultTask+0x28>
		{
			while(1);
 80003b6:	e7fe      	b.n	80003b6 <StartDefaultTask+0x26>
		}
		else
		{
		}
		f_close(&SDFile);//bunu test etmedim
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <StartDefaultTask+0x3c>)
 80003ba:	f008 f88f 	bl	80084dc <f_close>
		while(1);
 80003be:	e7fe      	b.n	80003be <StartDefaultTask+0x2e>
 80003c0:	20000150 	.word	0x20000150
 80003c4:	20000154 	.word	0x20000154
 80003c8:	0800b104 	.word	0x0800b104
 80003cc:	20001188 	.word	0x20001188

080003d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d101      	bne.n	80003e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003e2:	f000 fa35 	bl	8000850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40001000 	.word	0x40001000

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	e7fe      	b.n	80003fc <Error_Handler+0x8>
	...

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <HAL_MspInit+0x4c>)
 8000408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800040a:	4a10      	ldr	r2, [pc, #64]	; (800044c <HAL_MspInit+0x4c>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6613      	str	r3, [r2, #96]	; 0x60
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <HAL_MspInit+0x4c>)
 8000414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <HAL_MspInit+0x4c>)
 8000420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <HAL_MspInit+0x4c>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000428:	6593      	str	r3, [r2, #88]	; 0x58
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <HAL_MspInit+0x4c>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	210f      	movs	r1, #15
 800043a:	f06f 0001 	mvn.w	r0, #1
 800043e:	f000 fb03 	bl	8000a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b0ac      	sub	sp, #176	; 0xb0
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2288      	movs	r2, #136	; 0x88
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f00a fe2d 	bl	800b0d0 <memset>
  if(hsd->Instance==SDMMC1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a63      	ldr	r2, [pc, #396]	; (8000608 <HAL_SD_MspInit+0x1b8>)
 800047c:	4293      	cmp	r3, r2
 800047e:	f040 80be 	bne.w	80005fe <HAL_SD_MspInit+0x1ae>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000482:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000486:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000488:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800048c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000490:	2303      	movs	r3, #3
 8000492:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000494:	2302      	movs	r3, #2
 8000496:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000498:	2318      	movs	r3, #24
 800049a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800049c:	2307      	movs	r3, #7
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80004a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fe3a 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <HAL_SD_MspInit+0x72>
    {
      Error_Handler();
 80004be:	f7ff ff99 	bl	80003f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80004c2:	4b52      	ldr	r3, [pc, #328]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c6:	4a51      	ldr	r2, [pc, #324]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004cc:	6613      	str	r3, [r2, #96]	; 0x60
 80004ce:	4b4f      	ldr	r3, [pc, #316]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b4c      	ldr	r3, [pc, #304]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a4b      	ldr	r2, [pc, #300]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b49      	ldr	r3, [pc, #292]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f2:	4b46      	ldr	r3, [pc, #280]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a45      	ldr	r2, [pc, #276]	; (800060c <HAL_SD_MspInit+0x1bc>)
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b43      	ldr	r3, [pc, #268]	; (800060c <HAL_SD_MspInit+0x1bc>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800050a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800050e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000512:	2302      	movs	r3, #2
 8000514:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000518:	2301      	movs	r3, #1
 800051a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000524:	230c      	movs	r3, #12
 8000526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800052e:	4619      	mov	r1, r3
 8000530:	4837      	ldr	r0, [pc, #220]	; (8000610 <HAL_SD_MspInit+0x1c0>)
 8000532:	f000 fdbb 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053e:	2302      	movs	r3, #2
 8000540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800054a:	2303      	movs	r3, #3
 800054c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000550:	230c      	movs	r3, #12
 8000552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000556:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800055a:	4619      	mov	r1, r3
 800055c:	482c      	ldr	r0, [pc, #176]	; (8000610 <HAL_SD_MspInit+0x1c0>)
 800055e:	f000 fda5 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000562:	2304      	movs	r3, #4
 8000564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000568:	2302      	movs	r3, #2
 800056a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056e:	2301      	movs	r3, #1
 8000570:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800057a:	230c      	movs	r3, #12
 800057c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000580:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000584:	4619      	mov	r1, r3
 8000586:	4823      	ldr	r0, [pc, #140]	; (8000614 <HAL_SD_MspInit+0x1c4>)
 8000588:	f000 fd90 	bl	80010ac <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 800058e:	4a23      	ldr	r2, [pc, #140]	; (800061c <HAL_SD_MspInit+0x1cc>)
 8000590:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 8000594:	2207      	movs	r2, #7
 8000596:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_LOW;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005c8:	f000 fa68 	bl	8000a9c <HAL_DMA_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_SD_MspInit+0x186>
    {
      Error_Handler();
 80005d2:	f7ff ff0f 	bl	80003f4 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005da:	641a      	str	r2, [r3, #64]	; 0x40
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <HAL_SD_MspInit+0x1c8>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	2031      	movs	r0, #49	; 0x31
 80005f4:	f000 fa28 	bl	8000a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80005f8:	2031      	movs	r0, #49	; 0x31
 80005fa:	f000 fa41 	bl	8000a80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80005fe:	bf00      	nop
 8000600:	37b0      	adds	r7, #176	; 0xb0
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40012800 	.word	0x40012800
 800060c:	40021000 	.word	0x40021000
 8000610:	48000800 	.word	0x48000800
 8000614:	48000c00 	.word	0x48000c00
 8000618:	200000b0 	.word	0x200000b0
 800061c:	40020444 	.word	0x40020444

08000620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	; 0x38
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800062e:	4b34      	ldr	r3, [pc, #208]	; (8000700 <HAL_InitTick+0xe0>)
 8000630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000632:	4a33      	ldr	r2, [pc, #204]	; (8000700 <HAL_InitTick+0xe0>)
 8000634:	f043 0310 	orr.w	r3, r3, #16
 8000638:	6593      	str	r3, [r2, #88]	; 0x58
 800063a:	4b31      	ldr	r3, [pc, #196]	; (8000700 <HAL_InitTick+0xe0>)
 800063c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000646:	f107 0210 	add.w	r2, r7, #16
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fcd9 	bl	8002008 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000656:	6a3b      	ldr	r3, [r7, #32]
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	2b00      	cmp	r3, #0
 800065e:	d103      	bne.n	8000668 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000660:	f001 fca6 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8000664:	6378      	str	r0, [r7, #52]	; 0x34
 8000666:	e004      	b.n	8000672 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000668:	f001 fca2 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 800066c:	4603      	mov	r3, r0
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <HAL_InitTick+0xe4>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	0c9b      	lsrs	r3, r3, #18
 800067c:	3b01      	subs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <HAL_InitTick+0xe8>)
 8000682:	4a22      	ldr	r2, [pc, #136]	; (800070c <HAL_InitTick+0xec>)
 8000684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <HAL_InitTick+0xe8>)
 8000688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800068c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800068e:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <HAL_InitTick+0xe8>)
 8000690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000692:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_InitTick+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_InitTick+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_InitTick+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <HAL_InitTick+0xe8>)
 80006a8:	f004 fb82 	bl	8004db0 <HAL_TIM_Base_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d11b      	bne.n	80006f2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006ba:	4813      	ldr	r0, [pc, #76]	; (8000708 <HAL_InitTick+0xe8>)
 80006bc:	f004 fbda 	bl	8004e74 <HAL_TIM_Base_Start_IT>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d111      	bne.n	80006f2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006ce:	2036      	movs	r0, #54	; 0x36
 80006d0:	f000 f9d6 	bl	8000a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	d808      	bhi.n	80006ec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006da:	2200      	movs	r2, #0
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 f9b2 	bl	8000a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_InitTick+0xf0>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	e002      	b.n	80006f2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3738      	adds	r7, #56	; 0x38
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	431bde83 	.word	0x431bde83
 8000708:	200000fc 	.word	0x200000fc
 800070c:	40001000 	.word	0x40001000
 8000710:	20000004 	.word	0x20000004

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <MemManage_Handler+0x4>

08000726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <SDMMC1_IRQHandler+0x10>)
 8000746:	f003 fa75 	bl	8003c34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c

08000754 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <TIM6_DAC_IRQHandler+0x10>)
 800075a:	f004 fbfb 	bl	8004f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000fc 	.word	0x200000fc

08000768 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
    if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <DMA2_Channel4_IRQHandler+0x38>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	2b81      	cmp	r3, #129	; 0x81
 8000772:	d003      	beq.n	800077c <DMA2_Channel4_IRQHandler+0x14>
     (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <DMA2_Channel4_IRQHandler+0x38>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8000778:	2b82      	cmp	r3, #130	; 0x82
 800077a:	d102      	bne.n	8000782 <DMA2_Channel4_IRQHandler+0x1a>
      {
        BSP_SD_DMA_Rx_IRQHandler();
 800077c:	f005 fc4c 	bl	8006018 <BSP_SD_DMA_Rx_IRQHandler>
      {
 8000780:	e009      	b.n	8000796 <DMA2_Channel4_IRQHandler+0x2e>
      }
    else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <DMA2_Channel4_IRQHandler+0x38>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	2b90      	cmp	r3, #144	; 0x90
 8000788:	d003      	beq.n	8000792 <DMA2_Channel4_IRQHandler+0x2a>
          (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <DMA2_Channel4_IRQHandler+0x38>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 800078e:	2ba0      	cmp	r3, #160	; 0xa0
 8000790:	d101      	bne.n	8000796 <DMA2_Channel4_IRQHandler+0x2e>
     {
       BSP_SD_DMA_Tx_IRQHandler();
 8000792:	f005 fc35 	bl	8006000 <BSP_SD_DMA_Tx_IRQHandler>
     }
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <DMA2_Channel4_IRQHandler+0x3c>)
 8000798:	f000 fba9 	bl	8000eee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	200000b0 	.word	0x200000b0

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <SystemInit+0x20>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <SystemInit+0x20>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000804 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d0:	f7ff ffea 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490d      	ldr	r1, [pc, #52]	; (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0a      	ldr	r4, [pc, #40]	; (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fa:	f00a fc37 	bl	800b06c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fe:	f7ff fce7 	bl	80001d0 <main>

08000802 <LoopForever>:

LoopForever:
    b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000804:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000810:	0800b274 	.word	0x0800b274
  ldr r2, =_sbss
 8000814:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000818:	20003c0c 	.word	0x20003c0c

0800081c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC1_2_IRQHandler>

0800081e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000824:	2300      	movs	r3, #0
 8000826:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f902 	bl	8000a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082e:	200f      	movs	r0, #15
 8000830:	f7ff fef6 	bl	8000620 <HAL_InitTick>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e001      	b.n	8000844 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000840:	f7ff fdde 	bl	8000400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000844:	79fb      	ldrb	r3, [r7, #7]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x24>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_IncTick+0x24>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	20000148 	.word	0x20000148

08000878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000148 	.word	0x20000148

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff ffee 	bl	8000878 <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffde 	bl	8000878 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4907      	ldr	r1, [pc, #28]	; (8000974 <__NVIC_EnableIRQ+0x38>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff4c 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5a:	f7ff ff61 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	6978      	ldr	r0, [r7, #20]
 8000a66:	f7ff ffb1 	bl	80009cc <NVIC_EncodePriority>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff80 	bl	8000978 <__NVIC_SetPriority>
}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff54 	bl	800093c <__NVIC_EnableIRQ>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e098      	b.n	8000be0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <HAL_DMA_Init+0x150>)
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d80f      	bhi.n	8000ada <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b4b      	ldr	r3, [pc, #300]	; (8000bf0 <HAL_DMA_Init+0x154>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a4b      	ldr	r2, [pc, #300]	; (8000bf4 <HAL_DMA_Init+0x158>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	009a      	lsls	r2, r3, #2
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a48      	ldr	r2, [pc, #288]	; (8000bf8 <HAL_DMA_Init+0x15c>)
 8000ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad8:	e00e      	b.n	8000af8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b46      	ldr	r3, [pc, #280]	; (8000bfc <HAL_DMA_Init+0x160>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a43      	ldr	r2, [pc, #268]	; (8000bf4 <HAL_DMA_Init+0x158>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a42      	ldr	r2, [pc, #264]	; (8000c00 <HAL_DMA_Init+0x164>)
 8000af6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2202      	movs	r2, #2
 8000afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b52:	d039      	beq.n	8000bc8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <HAL_DMA_Init+0x15c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d11a      	bne.n	8000b94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f003 031c 	and.w	r3, r3, #28
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4924      	ldr	r1, [pc, #144]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6859      	ldr	r1, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	f003 031c 	and.w	r3, r3, #28
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	491d      	ldr	r1, [pc, #116]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
 8000b92:	e019      	b.n	8000bc8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9c:	f003 031c 	and.w	r3, r3, #28
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4917      	ldr	r1, [pc, #92]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6859      	ldr	r1, [r3, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f003 031c 	and.w	r3, r3, #28
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	4911      	ldr	r1, [pc, #68]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40020407 	.word	0x40020407
 8000bf0:	bffdfff8 	.word	0xbffdfff8
 8000bf4:	cccccccd 	.word	0xcccccccd
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	bffdfbf8 	.word	0xbffdfbf8
 8000c00:	40020400 	.word	0x40020400
 8000c04:	400200a8 	.word	0x400200a8
 8000c08:	400204a8 	.word	0x400204a8

08000c0c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e072      	b.n	8000d04 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0201 	bic.w	r2, r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_DMA_DeInit+0x104>)
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d80f      	bhi.n	8000c5a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_DMA_DeInit+0x108>)
 8000c42:	4413      	add	r3, r2
 8000c44:	4a34      	ldr	r2, [pc, #208]	; (8000d18 <HAL_DMA_DeInit+0x10c>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	009a      	lsls	r2, r3, #2
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <HAL_DMA_DeInit+0x110>)
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40
 8000c58:	e00e      	b.n	8000c78 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <HAL_DMA_DeInit+0x114>)
 8000c62:	4413      	add	r3, r2
 8000c64:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <HAL_DMA_DeInit+0x10c>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a2b      	ldr	r2, [pc, #172]	; (8000d24 <HAL_DMA_DeInit+0x118>)
 8000c76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	f003 021c 	and.w	r2, r3, #28
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c92:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <HAL_DMA_DeInit+0x110>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10d      	bne.n	8000cba <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_DMA_DeInit+0x11c>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f003 031c 	and.w	r3, r3, #28
 8000caa:	210f      	movs	r1, #15
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	491d      	ldr	r1, [pc, #116]	; (8000d28 <HAL_DMA_DeInit+0x11c>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	600b      	str	r3, [r1, #0]
 8000cb8:	e00c      	b.n	8000cd4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_DMA_DeInit+0x120>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f003 031c 	and.w	r3, r3, #28
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4917      	ldr	r1, [pc, #92]	; (8000d2c <HAL_DMA_DeInit+0x120>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	40020407 	.word	0x40020407
 8000d14:	bffdfff8 	.word	0xbffdfff8
 8000d18:	cccccccd 	.word	0xcccccccd
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	bffdfbf8 	.word	0xbffdfbf8
 8000d24:	40020400 	.word	0x40020400
 8000d28:	400200a8 	.word	0x400200a8
 8000d2c:	400204a8 	.word	0x400204a8

08000d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d101      	bne.n	8000d50 <HAL_DMA_Start_IT+0x20>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e04b      	b.n	8000de8 <HAL_DMA_Start_IT+0xb8>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d13a      	bne.n	8000dda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2202      	movs	r2, #2
 8000d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0201 	bic.w	r2, r2, #1
 8000d80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f95f 	bl	800104c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d008      	beq.n	8000da8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 020e 	orr.w	r2, r2, #14
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e00f      	b.n	8000dc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0204 	bic.w	r2, r2, #4
 8000db6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 020a 	orr.w	r2, r2, #10
 8000dc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e005      	b.n	8000de6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000de2:	2302      	movs	r3, #2
 8000de4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d008      	beq.n	8000e1a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e022      	b.n	8000e60 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 020e 	bic.w	r2, r2, #14
 8000e28:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0201 	bic.w	r2, r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f003 021c 	and.w	r2, r3, #28
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d005      	beq.n	8000e90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2204      	movs	r2, #4
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e029      	b.n	8000ee4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 020e 	bic.w	r2, r2, #14
 8000e9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	f003 021c 	and.w	r2, r3, #28
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	4798      	blx	r3
    }
  }
  return status;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f003 031c 	and.w	r3, r3, #28
 8000f0e:	2204      	movs	r2, #4
 8000f10:	409a      	lsls	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d026      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x7a>
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d021      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d107      	bne.n	8000f42 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0204 	bic.w	r2, r2, #4
 8000f40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f003 021c 	and.w	r2, r3, #28
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	2104      	movs	r1, #4
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d071      	beq.n	8001042 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000f66:	e06c      	b.n	8001042 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f003 031c 	and.w	r3, r3, #28
 8000f70:	2202      	movs	r2, #2
 8000f72:	409a      	lsls	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d02e      	beq.n	8000fda <HAL_DMA_IRQHandler+0xec>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d029      	beq.n	8000fda <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0320 	and.w	r3, r3, #32
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10b      	bne.n	8000fac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 020a 	bic.w	r2, r2, #10
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb0:	f003 021c 	and.w	r2, r3, #28
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	2102      	movs	r1, #2
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d038      	beq.n	8001042 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd8:	e033      	b.n	8001042 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 031c 	and.w	r3, r3, #28
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d02a      	beq.n	8001044 <HAL_DMA_IRQHandler+0x156>
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d025      	beq.n	8001044 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 020e 	bic.w	r2, r2, #14
 8001006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f003 021c 	and.w	r2, r3, #28
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001042:	bf00      	nop
 8001044:	bf00      	nop
}
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f003 021c 	and.w	r2, r3, #28
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2b10      	cmp	r3, #16
 800107c:	d108      	bne.n	8001090 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800108e:	e007      	b.n	80010a0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	60da      	str	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e17f      	b.n	80013bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8171 	beq.w	80013b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d005      	beq.n	80010ec <HAL_GPIO_Init+0x40>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d130      	bne.n	800114e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001122:	2201      	movs	r2, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f003 0201 	and.w	r2, r3, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b03      	cmp	r3, #3
 8001158:	d118      	bne.n	800118c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	08db      	lsrs	r3, r3, #3
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d017      	beq.n	80011c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80ac 	beq.w	80013b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b5f      	ldr	r3, [pc, #380]	; (80013dc <HAL_GPIO_Init+0x330>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	4a5e      	ldr	r2, [pc, #376]	; (80013dc <HAL_GPIO_Init+0x330>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6613      	str	r3, [r2, #96]	; 0x60
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <HAL_GPIO_Init+0x330>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001276:	4a5a      	ldr	r2, [pc, #360]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x242>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4f      	ldr	r2, [pc, #316]	; (80013e4 <HAL_GPIO_Init+0x338>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x23e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4e      	ldr	r2, [pc, #312]	; (80013e8 <HAL_GPIO_Init+0x33c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x23a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4d      	ldr	r2, [pc, #308]	; (80013ec <HAL_GPIO_Init+0x340>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x236>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4c      	ldr	r2, [pc, #304]	; (80013f0 <HAL_GPIO_Init+0x344>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x232>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4b      	ldr	r2, [pc, #300]	; (80013f4 <HAL_GPIO_Init+0x348>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x22e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4a      	ldr	r2, [pc, #296]	; (80013f8 <HAL_GPIO_Init+0x34c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x22a>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00c      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00a      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012da:	2305      	movs	r3, #5
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012de:	2304      	movs	r3, #4
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x244>
 80012ee:	2300      	movs	r3, #0
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001300:	4937      	ldr	r1, [pc, #220]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001332:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_GPIO_Init+0x350>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <HAL_GPIO_Init+0x350>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001386:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_GPIO_Init+0x350>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_GPIO_Init+0x350>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b0:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_GPIO_Init+0x350>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f47f ae78 	bne.w	80010bc <HAL_GPIO_Init+0x10>
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	48000400 	.word	0x48000400
 80013e8:	48000800 	.word	0x48000800
 80013ec:	48000c00 	.word	0x48000c00
 80013f0:	48001000 	.word	0x48001000
 80013f4:	48001400 	.word	0x48001400
 80013f8:	48001800 	.word	0x48001800
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_PWREx_GetVoltageRange+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40007000 	.word	0x40007000

0800141c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142a:	d130      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001438:	d038      	beq.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001442:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2232      	movs	r2, #50	; 0x32
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001460:	e002      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3b01      	subs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001474:	d102      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f2      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001488:	d110      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e00f      	b.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149a:	d007      	beq.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40007000 	.word	0x40007000
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e3ca      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	4b97      	ldr	r3, [pc, #604]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e4:	4b94      	ldr	r3, [pc, #592]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80e4 	beq.w	80016c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_RCC_OscConfig+0x4a>
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	f040 808b 	bne.w	8001620 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b01      	cmp	r3, #1
 800150e:	f040 8087 	bne.w	8001620 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001512:	4b89      	ldr	r3, [pc, #548]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x62>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e3a2      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1a      	ldr	r2, [r3, #32]
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <HAL_RCC_OscConfig+0x7c>
 800153a:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001542:	e005      	b.n	8001550 <HAL_RCC_OscConfig+0x88>
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001550:	4293      	cmp	r3, r2
 8001552:	d223      	bcs.n	800159c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fd87 	bl	800206c <RCC_SetFlashLatencyFromMSIRange>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e383      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001568:	4b73      	ldr	r3, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a72      	ldr	r2, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b70      	ldr	r3, [pc, #448]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	496d      	ldr	r1, [pc, #436]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001586:	4b6c      	ldr	r3, [pc, #432]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	4968      	ldr	r1, [pc, #416]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
 800159a:	e025      	b.n	80015e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a65      	ldr	r2, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b63      	ldr	r3, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4960      	ldr	r1, [pc, #384]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	495b      	ldr	r1, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d109      	bne.n	80015e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fd47 	bl	800206c <RCC_SetFlashLatencyFromMSIRange>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e343      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e8:	f000 fc4a 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b52      	ldr	r3, [pc, #328]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	4950      	ldr	r1, [pc, #320]	; (800173c <HAL_RCC_OscConfig+0x274>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	4a4e      	ldr	r2, [pc, #312]	; (8001740 <HAL_RCC_OscConfig+0x278>)
 8001606:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001608:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f807 	bl	8000620 <HAL_InitTick>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d052      	beq.n	80016c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	e327      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d032      	beq.n	800168e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001628:	4b43      	ldr	r3, [pc, #268]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a42      	ldr	r2, [pc, #264]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001634:	f7ff f920 	bl	8000878 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163c:	f7ff f91c 	bl	8000878 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e310      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164e:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165a:	4b37      	ldr	r3, [pc, #220]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a36      	ldr	r2, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4931      	ldr	r1, [pc, #196]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	492c      	ldr	r1, [pc, #176]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
 800168c:	e01a      	b.n	80016c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a29      	ldr	r2, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169a:	f7ff f8ed 	bl	8000878 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a2:	f7ff f8e9 	bl	8000878 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e2dd      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x1da>
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d074      	beq.n	80017ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d005      	beq.n	80016e2 <HAL_RCC_OscConfig+0x21a>
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d10e      	bne.n	80016fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d10b      	bne.n	80016fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d064      	beq.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d160      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e2ba      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x24a>
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800170a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e026      	b.n	8001760 <HAL_RCC_OscConfig+0x298>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171a:	d115      	bne.n	8001748 <HAL_RCC_OscConfig+0x280>
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 8001722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a02      	ldr	r2, [pc, #8]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e014      	b.n	8001760 <HAL_RCC_OscConfig+0x298>
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	0800b190 	.word	0x0800b190
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004
 8001748:	4ba0      	ldr	r3, [pc, #640]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a9f      	ldr	r2, [pc, #636]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800174e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b9d      	ldr	r3, [pc, #628]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a9c      	ldr	r2, [pc, #624]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800175a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff f886 	bl	8000878 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff f882 	bl	8000878 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e276      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001782:	4b92      	ldr	r3, [pc, #584]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x2a8>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff f872 	bl	8000878 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff f86e 	bl	8000878 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e262      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017aa:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x2d0>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d060      	beq.n	8001888 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x310>
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d116      	bne.n	8001806 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_OscConfig+0x328>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e23f      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b76      	ldr	r3, [pc, #472]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	4973      	ldr	r1, [pc, #460]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	e040      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d023      	beq.n	8001856 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180e:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff f82d 	bl	8000878 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff f829 	bl	8000878 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e21d      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001834:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b62      	ldr	r3, [pc, #392]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	495f      	ldr	r1, [pc, #380]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
 8001854:	e018      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5c      	ldr	r2, [pc, #368]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800185c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff f809 	bl	8000878 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff f805 	bl	8000878 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1f9      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03c      	beq.n	800190e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a2:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7fe ffe4 	bl	8000878 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7fe ffe0 	bl	8000878 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1d4      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80018c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ef      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
 80018d4:	e01b      	b.n	800190e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7fe ffc7 	bl	8000878 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ee:	f7fe ffc3 	bl	8000878 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1b7      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ef      	bne.n	80018ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a6 	beq.w	8001a68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10d      	bne.n	8001948 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001944:	2301      	movs	r3, #1
 8001946:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_RCC_OscConfig+0x508>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d118      	bne.n	8001986 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_RCC_OscConfig+0x508>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x508>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001960:	f7fe ff8a 	bl	8000878 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001968:	f7fe ff86 	bl	8000878 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e17a      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x508>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4d8>
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199e:	e029      	b.n	80019f4 <HAL_RCC_OscConfig+0x52c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d115      	bne.n	80019d4 <HAL_RCC_OscConfig+0x50c>
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_RCC_OscConfig+0x504>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c8:	e014      	b.n	80019f4 <HAL_RCC_OscConfig+0x52c>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
 80019d4:	4b9c      	ldr	r3, [pc, #624]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019da:	4a9b      	ldr	r2, [pc, #620]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e4:	4b98      	ldr	r3, [pc, #608]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	4a97      	ldr	r2, [pc, #604]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d016      	beq.n	8001a2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7fe ff3c 	bl	8000878 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7fe ff38 	bl	8000878 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e12a      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ed      	beq.n	8001a04 <HAL_RCC_OscConfig+0x53c>
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7fe ff25 	bl	8000878 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7fe ff21 	bl	8000878 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e113      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	4b7f      	ldr	r3, [pc, #508]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ed      	bne.n	8001a32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5c:	4b7a      	ldr	r3, [pc, #488]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	4a79      	ldr	r2, [pc, #484]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80fe 	beq.w	8001c6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	f040 80d0 	bne.w	8001c1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a7c:	4b72      	ldr	r3, [pc, #456]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d130      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d127      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d11f      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001abc:	2a07      	cmp	r2, #7
 8001abe:	bf14      	ite	ne
 8001ac0:	2201      	movne	r2, #1
 8001ac2:	2200      	moveq	r2, #0
 8001ac4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d113      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d109      	bne.n	8001af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	3b01      	subs	r3, #1
 8001aec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d06e      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d069      	beq.n	8001bcc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0ad      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b14:	4b4c      	ldr	r3, [pc, #304]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b20:	f7fe feaa 	bl	8000878 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7fe fea6 	bl	8000878 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e09a      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3a:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b46:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <HAL_RCC_OscConfig+0x784>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b56:	3a01      	subs	r2, #1
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b60:	0212      	lsls	r2, r2, #8
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b68:	0852      	lsrs	r2, r2, #1
 8001b6a:	3a01      	subs	r2, #1
 8001b6c:	0552      	lsls	r2, r2, #21
 8001b6e:	4311      	orrs	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b74:	0852      	lsrs	r2, r2, #1
 8001b76:	3a01      	subs	r2, #1
 8001b78:	0652      	lsls	r2, r2, #25
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b80:	0912      	lsrs	r2, r2, #4
 8001b82:	0452      	lsls	r2, r2, #17
 8001b84:	430a      	orrs	r2, r1
 8001b86:	4930      	ldr	r1, [pc, #192]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba4:	f7fe fe68 	bl	8000878 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe fe64 	bl	8000878 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e058      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bca:	e050      	b.n	8001c6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e04f      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d148      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf4:	f7fe fe40 	bl	8000878 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe fe3c 	bl	8000878 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e030      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x734>
 8001c1a:	e028      	b.n	8001c6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d023      	beq.n	8001c6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_RCC_OscConfig+0x780>)
 8001c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7fe fe23 	bl	8000878 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c34:	e00c      	b.n	8001c50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7fe fe1f 	bl	8000878 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d905      	bls.n	8001c50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e013      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x7b0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ec      	bne.n	8001c36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x7b0>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4905      	ldr	r1, [pc, #20]	; (8001c78 <HAL_RCC_OscConfig+0x7b0>)
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_OscConfig+0x7b4>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
 8001c68:	e001      	b.n	8001c6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	feeefffc 	.word	0xfeeefffc

08001c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0e7      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d910      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4970      	ldr	r1, [pc, #448]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cf      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d010      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d908      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4960      	ldr	r1, [pc, #384]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d04c      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d121      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0a6      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e09a      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d36:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e08e      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e086      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4943      	ldr	r1, [pc, #268]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d68:	f7fe fd86 	bl	8000878 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7fe fd82 	bl	8000878 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e06e      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d208      	bcs.n	8001dc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	492b      	ldr	r1, [pc, #172]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d210      	bcs.n	8001df6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0207 	bic.w	r2, r3, #7
 8001ddc:	4923      	ldr	r1, [pc, #140]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_RCC_ClockConfig+0x1ec>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e036      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4918      	ldr	r1, [pc, #96]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4910      	ldr	r1, [pc, #64]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e34:	f000 f824 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	490b      	ldr	r1, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1f4>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1fc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fbe1 	bl	8000620 <HAL_InitTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e62:	7afb      	ldrb	r3, [r7, #11]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	0800b190 	.word	0x0800b190
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d121      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d11e      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb4:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e005      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001edc:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e004      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d134      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d003      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0xac>
 8001f24:	e005      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f28:	617b      	str	r3, [r7, #20]
      break;
 8001f2a:	e005      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f2e:	617b      	str	r3, [r7, #20]
      break;
 8001f30:	e002      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	617b      	str	r3, [r7, #20]
      break;
 8001f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	3301      	adds	r3, #1
 8001f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	fb03 f202 	mul.w	r2, r3, r2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	0e5b      	lsrs	r3, r3, #25
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f78:	69bb      	ldr	r3, [r7, #24]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	0800b1a8 	.word	0x0800b1a8
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	007a1200 	.word	0x007a1200

08001f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000000 	.word	0x20000000

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	0800b1a0 	.word	0x0800b1a0

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fe0:	f7ff ffda 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0adb      	lsrs	r3, r3, #11
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4904      	ldr	r1, [pc, #16]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	0800b1a0 	.word	0x0800b1a0

08002008 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	220f      	movs	r2, #15
 8002016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_GetClockConfig+0x5c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_RCC_GetClockConfig+0x60>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0207 	and.w	r2, r3, #7
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40022000 	.word	0x40022000

0800206c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002084:	f7ff f9bc 	bl	8001400 <HAL_PWREx_GetVoltageRange>
 8002088:	6178      	str	r0, [r7, #20]
 800208a:	e014      	b.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020a4:	f7ff f9ac 	bl	8001400 <HAL_PWREx_GetVoltageRange>
 80020a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020bc:	d10b      	bne.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d919      	bls.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2ba0      	cmp	r3, #160	; 0xa0
 80020c8:	d902      	bls.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ca:	2302      	movs	r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e013      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e010      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d902      	bls.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020dc:	2303      	movs	r3, #3
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	e00a      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d102      	bne.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e8:	2302      	movs	r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e004      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b70      	cmp	r3, #112	; 0x70
 80020f2:	d101      	bne.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 0207 	bic.w	r2, r3, #7
 8002100:	4909      	ldr	r1, [pc, #36]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40022000 	.word	0x40022000

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002134:	2300      	movs	r3, #0
 8002136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002138:	2300      	movs	r3, #0
 800213a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002144:	2b00      	cmp	r3, #0
 8002146:	d041      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002150:	d02a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002156:	d824      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800215c:	d008      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800215e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002162:	d81e      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216c:	d010      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800216e:	e018      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002170:	4b86      	ldr	r3, [pc, #536]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a85      	ldr	r2, [pc, #532]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800217c:	e015      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f001 f829 	bl	80031dc <RCCEx_PLLSAI1_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218e:	e00c      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3320      	adds	r3, #32
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f001 f914 	bl	80033c4 <RCCEx_PLLSAI2_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021a0:	e003      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	74fb      	strb	r3, [r7, #19]
      break;
 80021a6:	e000      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021be:	4973      	ldr	r1, [pc, #460]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021c6:	e001      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d041      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021e0:	d02a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021e6:	d824      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021ec:	d008      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021f2:	d81e      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d010      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021fe:	e018      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800220c:	e015      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f000 ffe1 	bl	80031dc <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800221e:	e00c      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3320      	adds	r3, #32
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f8cc 	bl	80033c4 <RCCEx_PLLSAI2_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002230:	e003      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	74fb      	strb	r3, [r7, #19]
      break;
 8002236:	e000      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002240:	4b52      	ldr	r3, [pc, #328]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800224e:	494f      	ldr	r1, [pc, #316]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002256:	e001      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a0 	beq.w	80023aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a40      	ldr	r2, [pc, #256]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229c:	2301      	movs	r3, #1
 800229e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fae4 	bl	8000878 <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b2:	e009      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe fae0 	bl	8000878 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d902      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	74fb      	strb	r3, [r7, #19]
        break;
 80022c6:	e005      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d15c      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01f      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d019      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fa9f 	bl	8000878 <HAL_GetTick>
 800233a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	e00b      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fa9b 	bl	8000878 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d902      	bls.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	74fb      	strb	r3, [r7, #19]
            break;
 8002354:	e006      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ec      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237a:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002382:	e009      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
 8002388:	e006      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002398:	7c7b      	ldrb	r3, [r7, #17]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b9e      	ldr	r3, [pc, #632]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	4a9d      	ldr	r2, [pc, #628]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b6:	4b98      	ldr	r3, [pc, #608]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f023 0203 	bic.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	4994      	ldr	r1, [pc, #592]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 020c 	bic.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	498c      	ldr	r1, [pc, #560]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023fa:	4b87      	ldr	r3, [pc, #540]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	4983      	ldr	r1, [pc, #524]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	497b      	ldr	r1, [pc, #492]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800243e:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244c:	4972      	ldr	r1, [pc, #456]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002460:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	496a      	ldr	r1, [pc, #424]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	4961      	ldr	r1, [pc, #388]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024a4:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	4959      	ldr	r1, [pc, #356]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4950      	ldr	r1, [pc, #320]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	4948      	ldr	r1, [pc, #288]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	493f      	ldr	r1, [pc, #252]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d028      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253a:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254a:	d106      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a31      	ldr	r2, [pc, #196]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002556:	60d3      	str	r3, [r2, #12]
 8002558:	e011      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002562:	d10c      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	2101      	movs	r1, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fe36 	bl	80031dc <RCCEx_PLLSAI1_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d028      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	491f      	ldr	r1, [pc, #124]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a8:	d106      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b4:	60d3      	str	r3, [r2, #12]
 80025b6:	e011      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c0:	d10c      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2101      	movs	r1, #1
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fe07 	bl	80031dc <RCCEx_PLLSAI1_Config>
 80025ce:	4603      	mov	r3, r0
 80025d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02b      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002606:	d109      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a02      	ldr	r2, [pc, #8]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002612:	60d3      	str	r3, [r2, #12]
 8002614:	e014      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fdd5 	bl	80031dc <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02f      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265a:	4928      	ldr	r1, [pc, #160]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800266a:	d10d      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	2102      	movs	r1, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fdb2 	bl	80031dc <RCCEx_PLLSAI1_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d014      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	74bb      	strb	r3, [r7, #18]
 8002686:	e011      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002690:	d10c      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3320      	adds	r3, #32
 8002696:	2102      	movs	r1, #2
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fe93 	bl	80033c4 <RCCEx_PLLSAI2_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ea:	4904      	ldr	r1, [pc, #16]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002712:	d13e      	bne.n	8002792 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002714:	4bb2      	ldr	r3, [pc, #712]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002726:	d028      	beq.n	800277a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800272e:	f200 8542 	bhi.w	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002738:	d005      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002740:	d00e      	beq.n	8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002742:	f000 bd38 	b.w	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002746:	4ba6      	ldr	r3, [pc, #664]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	f040 8532 	bne.w	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8002756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275a:	61fb      	str	r3, [r7, #28]
      break;
 800275c:	f000 bd2d 	b.w	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002760:	4b9f      	ldr	r3, [pc, #636]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	f040 8527 	bne.w	80031be <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8002770:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002774:	61fb      	str	r3, [r7, #28]
      break;
 8002776:	f000 bd22 	b.w	80031be <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800277a:	4b99      	ldr	r3, [pc, #612]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002786:	f040 851c 	bne.w	80031c2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800278a:	4b96      	ldr	r3, [pc, #600]	; (80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800278c:	61fb      	str	r3, [r7, #28]
      break;
 800278e:	f000 bd18 	b.w	80031c2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002792:	4b93      	ldr	r3, [pc, #588]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d036      	beq.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d840      	bhi.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d003      	beq.n	80027b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d020      	beq.n	80027f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80027b4:	e039      	b.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80027b6:	4b8a      	ldr	r3, [pc, #552]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d116      	bne.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80027c2:	4b87      	ldr	r3, [pc, #540]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80027ce:	4b84      	ldr	r3, [pc, #528]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	e005      	b.n	80027e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80027da:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a80      	ldr	r2, [pc, #512]	; (80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80027ee:	e01f      	b.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
      break;
 80027f4:	e01c      	b.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80027f6:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002802:	d102      	bne.n	800280a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002804:	4b79      	ldr	r3, [pc, #484]	; (80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002806:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002808:	e012      	b.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
      break;
 800280e:	e00f      	b.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002810:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800281c:	d102      	bne.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800281e:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8002820:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
      break;
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
      break;
 800282e:	bf00      	nop
    }

    switch(PeriphClk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002836:	f000 80dd 	beq.w	80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002840:	f200 84c1 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800284a:	f000 80d3 	beq.w	80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002854:	f200 84b7 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285e:	f000 835f 	beq.w	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	f200 84ad 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002872:	f000 847e 	beq.w	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287c:	f200 84a3 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002886:	f000 82cd 	beq.w	8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002890:	f200 8499 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289a:	f000 80ab 	beq.w	80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a4:	f200 848f 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	f000 8090 	beq.w	80029d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b8:	f200 8485 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c2:	d07f      	beq.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ca:	f200 847c 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d4:	f000 8403 	beq.w	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028de:	f200 8472 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e8:	f000 83af 	beq.w	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f2:	f200 8468 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fc:	f000 8379 	beq.w	8002ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	f200 845e 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	f000 8344 	beq.w	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	f200 8456 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b20      	cmp	r3, #32
 800291e:	d84b      	bhi.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 844f 	beq.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	2b1f      	cmp	r3, #31
 800292e:	f200 844a 	bhi.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	08002b21 	.word	0x08002b21
 800293c:	08002b8f 	.word	0x08002b8f
 8002940:	080031c7 	.word	0x080031c7
 8002944:	08002c23 	.word	0x08002c23
 8002948:	080031c7 	.word	0x080031c7
 800294c:	080031c7 	.word	0x080031c7
 8002950:	080031c7 	.word	0x080031c7
 8002954:	08002ca9 	.word	0x08002ca9
 8002958:	080031c7 	.word	0x080031c7
 800295c:	080031c7 	.word	0x080031c7
 8002960:	080031c7 	.word	0x080031c7
 8002964:	080031c7 	.word	0x080031c7
 8002968:	080031c7 	.word	0x080031c7
 800296c:	080031c7 	.word	0x080031c7
 8002970:	080031c7 	.word	0x080031c7
 8002974:	08002d21 	.word	0x08002d21
 8002978:	080031c7 	.word	0x080031c7
 800297c:	080031c7 	.word	0x080031c7
 8002980:	080031c7 	.word	0x080031c7
 8002984:	080031c7 	.word	0x080031c7
 8002988:	080031c7 	.word	0x080031c7
 800298c:	080031c7 	.word	0x080031c7
 8002990:	080031c7 	.word	0x080031c7
 8002994:	080031c7 	.word	0x080031c7
 8002998:	080031c7 	.word	0x080031c7
 800299c:	080031c7 	.word	0x080031c7
 80029a0:	080031c7 	.word	0x080031c7
 80029a4:	080031c7 	.word	0x080031c7
 80029a8:	080031c7 	.word	0x080031c7
 80029ac:	080031c7 	.word	0x080031c7
 80029b0:	080031c7 	.word	0x080031c7
 80029b4:	08002da3 	.word	0x08002da3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	f000 82c1 	beq.w	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80029c0:	f000 bc01 	b.w	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029ca:	f000 fdd9 	bl	8003580 <RCCEx_GetSAIxPeriphCLKFreq>
 80029ce:	61f8      	str	r0, [r7, #28]
      break;
 80029d0:	e3fa      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80029d2:	69b9      	ldr	r1, [r7, #24]
 80029d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029d8:	f000 fdd2 	bl	8003580 <RCCEx_GetSAIxPeriphCLKFreq>
 80029dc:	61f8      	str	r0, [r7, #28]
      break;
 80029de:	e3f3      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	0003d090 	.word	0x0003d090
 80029e8:	0800b1a8 	.word	0x0800b1a8
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80029f4:	4ba9      	ldr	r3, [pc, #676]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002a06:	d00c      	beq.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002a0e:	d87f      	bhi.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a16:	d04e      	beq.n	8002ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1e:	d01d      	beq.n	8002a5c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8002a20:	e076      	b.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002a22:	4b9e      	ldr	r3, [pc, #632]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d172      	bne.n	8002b14 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002a2e:	4b9b      	ldr	r3, [pc, #620]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8002a3a:	4b98      	ldr	r3, [pc, #608]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	e005      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8002a46:	4b95      	ldr	r3, [pc, #596]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	4a93      	ldr	r2, [pc, #588]	; (8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	61fb      	str	r3, [r7, #28]
          break;
 8002a5a:	e05b      	b.n	8002b14 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002a5c:	4b8f      	ldr	r3, [pc, #572]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a68:	d156      	bne.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002a6a:	4b8c      	ldr	r3, [pc, #560]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a76:	d14f      	bne.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002a78:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a82:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	fb03 f202 	mul.w	r2, r3, r2
 8002a8c:	4b83      	ldr	r3, [pc, #524]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	3301      	adds	r3, #1
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	0d5b      	lsrs	r3, r3, #21
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	61fb      	str	r3, [r7, #28]
          break;
 8002ab4:	e030      	b.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002ab6:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac2:	d12b      	bne.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002ac4:	4b75      	ldr	r3, [pc, #468]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad0:	d124      	bne.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002ad2:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002adc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	fb03 f202 	mul.w	r2, r3, r2
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	3301      	adds	r3, #1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	0d5b      	lsrs	r3, r3, #21
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	3301      	adds	r3, #1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	61fb      	str	r3, [r7, #28]
          break;
 8002b0e:	e005      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8002b10:	bf00      	nop
 8002b12:	e359      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002b14:	bf00      	nop
 8002b16:	e357      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002b18:	bf00      	nop
 8002b1a:	e355      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002b1c:	bf00      	nop
        break;
 8002b1e:	e353      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002b20:	4b5e      	ldr	r3, [pc, #376]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d827      	bhi.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b51 	.word	0x08002b51
 8002b40:	08002b59 	.word	0x08002b59
 8002b44:	08002b6d 	.word	0x08002b6d
          frequency = HAL_RCC_GetPCLK2Freq();
 8002b48:	f7ff fa48 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002b4c:	61f8      	str	r0, [r7, #28]
          break;
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b50:	f7ff f996 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002b54:	61f8      	str	r0, [r7, #28]
          break;
 8002b56:	e019      	b.n	8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d10f      	bne.n	8002b86 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8002b66:	4b4f      	ldr	r3, [pc, #316]	; (8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002b68:	61fb      	str	r3, [r7, #28]
          break;
 8002b6a:	e00c      	b.n	8002b86 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d107      	bne.n	8002b8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8002b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7e:	61fb      	str	r3, [r7, #28]
          break;
 8002b80:	e003      	b.n	8002b8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8002b82:	bf00      	nop
 8002b84:	e320      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002b86:	bf00      	nop
 8002b88:	e31e      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002b8a:	bf00      	nop
        break;
 8002b8c:	e31c      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d83a      	bhi.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8002ba0:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8002ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002c17 	.word	0x08002c17
 8002bb0:	08002c17 	.word	0x08002c17
 8002bb4:	08002c17 	.word	0x08002c17
 8002bb8:	08002be5 	.word	0x08002be5
 8002bbc:	08002c17 	.word	0x08002c17
 8002bc0:	08002c17 	.word	0x08002c17
 8002bc4:	08002c17 	.word	0x08002c17
 8002bc8:	08002bed 	.word	0x08002bed
 8002bcc:	08002c17 	.word	0x08002c17
 8002bd0:	08002c17 	.word	0x08002c17
 8002bd4:	08002c17 	.word	0x08002c17
 8002bd8:	08002c01 	.word	0x08002c01
          frequency = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f7ff f9e8 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8002be0:	61f8      	str	r0, [r7, #28]
          break;
 8002be2:	e01d      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8002be4:	f7ff f94c 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002be8:	61f8      	str	r0, [r7, #28]
          break;
 8002bea:	e019      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d10f      	bne.n	8002c1a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002bfc:	61fb      	str	r3, [r7, #28]
          break;
 8002bfe:	e00c      	b.n	8002c1a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002c00:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8002c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c12:	61fb      	str	r3, [r7, #28]
          break;
 8002c14:	e003      	b.n	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8002c16:	bf00      	nop
 8002c18:	e2d6      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002c1a:	bf00      	nop
 8002c1c:	e2d4      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002c1e:	bf00      	nop
        break;
 8002c20:	e2d2      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b30      	cmp	r3, #48	; 0x30
 8002c32:	d021      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b30      	cmp	r3, #48	; 0x30
 8002c38:	d829      	bhi.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d011      	beq.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d823      	bhi.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d004      	beq.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8002c52:	e01c      	b.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c54:	f7ff f9ac 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8002c58:	61f8      	str	r0, [r7, #28]
          break;
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c5c:	f7ff f910 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002c60:	61f8      	str	r0, [r7, #28]
          break;
 8002c62:	e019      	b.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c64:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d10f      	bne.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8002c74:	61fb      	str	r3, [r7, #28]
          break;
 8002c76:	e00c      	b.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d107      	bne.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8002c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8a:	61fb      	str	r3, [r7, #28]
          break;
 8002c8c:	e003      	b.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8002c8e:	bf00      	nop
 8002c90:	e29a      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002c92:	bf00      	nop
 8002c94:	e298      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002c96:	bf00      	nop
        break;
 8002c98:	e296      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	0800b1a8 	.word	0x0800b1a8
 8002ca4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002ca8:	4b9b      	ldr	r3, [pc, #620]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002cb8:	d021      	beq.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2bc0      	cmp	r3, #192	; 0xc0
 8002cbe:	d829      	bhi.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d011      	beq.n	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b80      	cmp	r3, #128	; 0x80
 8002cca:	d823      	bhi.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d004      	beq.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002cda:	f7ff f969 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8002cde:	61f8      	str	r0, [r7, #28]
          break;
 8002ce0:	e01d      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ce2:	f7ff f8cd 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002ce6:	61f8      	str	r0, [r7, #28]
          break;
 8002ce8:	e019      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002cea:	4b8b      	ldr	r3, [pc, #556]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d10f      	bne.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8002cf8:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002cfa:	61fb      	str	r3, [r7, #28]
          break;
 8002cfc:	e00c      	b.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002cfe:	4b86      	ldr	r3, [pc, #536]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8002d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d10:	61fb      	str	r3, [r7, #28]
          break;
 8002d12:	e003      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8002d14:	bf00      	nop
 8002d16:	e257      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d18:	bf00      	nop
 8002d1a:	e255      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d1c:	bf00      	nop
        break;
 8002d1e:	e253      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002d20:	4b7d      	ldr	r3, [pc, #500]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d32:	d025      	beq.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d3a:	d82c      	bhi.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d42:	d013      	beq.n	8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4a:	d824      	bhi.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d58:	d004      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8002d5a:	e01c      	b.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7ff f928 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8002d60:	61f8      	str	r0, [r7, #28]
          break;
 8002d62:	e01d      	b.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d64:	f7ff f88c 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002d68:	61f8      	str	r0, [r7, #28]
          break;
 8002d6a:	e019      	b.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d78:	d10f      	bne.n	8002d9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8002d7a:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002d7c:	61fb      	str	r3, [r7, #28]
          break;
 8002d7e:	e00c      	b.n	8002d9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d80:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8002d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d92:	61fb      	str	r3, [r7, #28]
          break;
 8002d94:	e003      	b.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8002d96:	bf00      	nop
 8002d98:	e216      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d9a:	bf00      	nop
 8002d9c:	e214      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002d9e:	bf00      	nop
        break;
 8002da0:	e212      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002db4:	d025      	beq.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dbc:	d82c      	bhi.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc4:	d013      	beq.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dcc:	d824      	bhi.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d004      	beq.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002dde:	f7ff f8e7 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8002de2:	61f8      	str	r0, [r7, #28]
          break;
 8002de4:	e01d      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8002de6:	f7ff f84b 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002dea:	61f8      	str	r0, [r7, #28]
          break;
 8002dec:	e019      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002dee:	4b4a      	ldr	r3, [pc, #296]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d10f      	bne.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8002dfe:	61fb      	str	r3, [r7, #28]
          break;
 8002e00:	e00c      	b.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e02:	4b45      	ldr	r3, [pc, #276]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8002e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e14:	61fb      	str	r3, [r7, #28]
          break;
 8002e16:	e003      	b.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8002e18:	bf00      	nop
 8002e1a:	e1d5      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002e1c:	bf00      	nop
 8002e1e:	e1d3      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002e20:	bf00      	nop
        break;
 8002e22:	e1d1      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002e24:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e36:	d00c      	beq.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e3e:	d864      	bhi.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e46:	d008      	beq.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e4e:	d030      	beq.n	8002eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8002e50:	e05b      	b.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e52:	f7ff f815 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002e56:	61f8      	str	r0, [r7, #28]
          break;
 8002e58:	e05c      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e66:	d152      	bne.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d04c      	beq.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e7e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	fb03 f202 	mul.w	r2, r3, r2
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	3301      	adds	r3, #1
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	0e5b      	lsrs	r3, r3, #25
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	61fb      	str	r3, [r7, #28]
          break;
 8002eb0:	e02d      	b.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ebe:	d128      	bne.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d022      	beq.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	fb03 f202 	mul.w	r2, r3, r2
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	3301      	adds	r3, #1
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	0e5b      	lsrs	r3, r3, #25
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	3301      	adds	r3, #1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	61fb      	str	r3, [r7, #28]
          break;
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8002f0a:	bf00      	nop
 8002f0c:	e15c      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f0e:	bf00      	nop
 8002f10:	e15a      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f12:	bf00      	nop
        break;
 8002f14:	e158      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002f20:	4b9d      	ldr	r3, [pc, #628]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f2a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002f32:	f7ff f853 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002f36:	61f8      	str	r0, [r7, #28]
        break;
 8002f38:	e146      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f3a:	f7fe ffa1 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002f3e:	61f8      	str	r0, [r7, #28]
        break;
 8002f40:	e142      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002f42:	4b95      	ldr	r3, [pc, #596]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f54:	d013      	beq.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5c:	d819      	bhi.n	8002f92 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6a:	d004      	beq.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8002f6c:	e011      	b.n	8002f92 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f6e:	f7ff f81f 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8002f72:	61f8      	str	r0, [r7, #28]
          break;
 8002f74:	e010      	b.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f76:	f7fe ff83 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002f7a:	61f8      	str	r0, [r7, #28]
          break;
 8002f7c:	e00c      	b.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f7e:	4b86      	ldr	r3, [pc, #536]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8a:	d104      	bne.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8002f8c:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8002f8e:	61fb      	str	r3, [r7, #28]
          break;
 8002f90:	e001      	b.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8002f92:	bf00      	nop
 8002f94:	e118      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002f96:	bf00      	nop
        break;
 8002f98:	e116      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002f9a:	4b7f      	ldr	r3, [pc, #508]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fac:	d013      	beq.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb4:	d819      	bhi.n	8002fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fc2:	d004      	beq.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8002fc4:	e011      	b.n	8002fea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002fc6:	f7fe fff3 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8002fca:	61f8      	str	r0, [r7, #28]
          break;
 8002fcc:	e010      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002fce:	f7fe ff57 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002fd2:	61f8      	str	r0, [r7, #28]
          break;
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d104      	bne.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8002fe4:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8002fe6:	61fb      	str	r3, [r7, #28]
          break;
 8002fe8:	e001      	b.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8002fea:	bf00      	nop
 8002fec:	e0ec      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8002fee:	bf00      	nop
        break;
 8002ff0:	e0ea      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002ff2:	4b69      	ldr	r3, [pc, #420]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003004:	d013      	beq.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800300c:	d819      	bhi.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301a:	d004      	beq.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800301c:	e011      	b.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800301e:	f7fe ffc7 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8003022:	61f8      	str	r0, [r7, #28]
          break;
 8003024:	e010      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003026:	f7fe ff2b 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800302a:	61f8      	str	r0, [r7, #28]
          break;
 800302c:	e00c      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800302e:	4b5a      	ldr	r3, [pc, #360]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d104      	bne.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800303c:	4b57      	ldr	r3, [pc, #348]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800303e:	61fb      	str	r3, [r7, #28]
          break;
 8003040:	e001      	b.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003042:	bf00      	nop
 8003044:	e0c0      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003046:	bf00      	nop
        break;
 8003048:	e0be      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800304a:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800305c:	d02c      	beq.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003064:	d833      	bhi.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800306c:	d01a      	beq.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003074:	d82b      	bhi.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003082:	d004      	beq.n	800308e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003084:	e023      	b.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003086:	f7fe ff93 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 800308a:	61f8      	str	r0, [r7, #28]
          break;
 800308c:	e026      	b.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800308e:	4b42      	ldr	r3, [pc, #264]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d11a      	bne.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800309c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80030a0:	61fb      	str	r3, [r7, #28]
          break;
 80030a2:	e016      	b.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b0:	d111      	bne.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80030b4:	61fb      	str	r3, [r7, #28]
          break;
 80030b6:	e00e      	b.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80030b8:	4b37      	ldr	r3, [pc, #220]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d109      	bne.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80030c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ca:	61fb      	str	r3, [r7, #28]
          break;
 80030cc:	e005      	b.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80030ce:	bf00      	nop
 80030d0:	e07a      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80030d2:	bf00      	nop
 80030d4:	e078      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80030d6:	bf00      	nop
 80030d8:	e076      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80030da:	bf00      	nop
        break;
 80030dc:	e074      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030f0:	d02c      	beq.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030f8:	d833      	bhi.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003100:	d01a      	beq.n	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003108:	d82b      	bhi.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d004      	beq.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003116:	d004      	beq.n	8003122 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003118:	e023      	b.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800311a:	f7fe ff49 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 800311e:	61f8      	str	r0, [r7, #28]
          break;
 8003120:	e026      	b.n	8003170 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	d11a      	bne.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003130:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003134:	61fb      	str	r3, [r7, #28]
          break;
 8003136:	e016      	b.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003144:	d111      	bne.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003148:	61fb      	str	r3, [r7, #28]
          break;
 800314a:	e00e      	b.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d109      	bne.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800315a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315e:	61fb      	str	r3, [r7, #28]
          break;
 8003160:	e005      	b.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003162:	bf00      	nop
 8003164:	e030      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003166:	bf00      	nop
 8003168:	e02e      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800316a:	bf00      	nop
 800316c:	e02c      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800316e:	bf00      	nop
        break;
 8003170:	e02a      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d009      	beq.n	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800318c:	e012      	b.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800318e:	f7fe ff0f 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 8003192:	61f8      	str	r0, [r7, #28]
          break;
 8003194:	e00e      	b.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ac:	d101      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80031b0:	61fb      	str	r3, [r7, #28]
          break;
 80031b2:	bf00      	nop
        break;
 80031b4:	e008      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80031b6:	bf00      	nop
 80031b8:	e006      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80031ba:	bf00      	nop
 80031bc:	e004      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80031be:	bf00      	nop
 80031c0:	e002      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80031c6:	bf00      	nop
    }
  }

  return(frequency);
 80031c8:	69fb      	ldr	r3, [r7, #28]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	00f42400 	.word	0x00f42400

080031dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ea:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d018      	beq.n	8003228 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031f6:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0203 	and.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d10d      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
       ||
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800320e:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
       ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d047      	beq.n	80032b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	e044      	b.n	80032b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d018      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x86>
 8003230:	2b03      	cmp	r3, #3
 8003232:	d825      	bhi.n	8003280 <RCCEx_PLLSAI1_Config+0xa4>
 8003234:	2b01      	cmp	r3, #1
 8003236:	d002      	beq.n	800323e <RCCEx_PLLSAI1_Config+0x62>
 8003238:	2b02      	cmp	r3, #2
 800323a:	d009      	beq.n	8003250 <RCCEx_PLLSAI1_Config+0x74>
 800323c:	e020      	b.n	8003280 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800323e:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11d      	bne.n	8003286 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800324e:	e01a      	b.n	8003286 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003250:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d116      	bne.n	800328a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003260:	e013      	b.n	800328a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003262:	4b57      	ldr	r3, [pc, #348]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800327e:	e006      	b.n	800328e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e004      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003296:	4b4a      	ldr	r3, [pc, #296]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	430b      	orrs	r3, r1
 80032ac:	4944      	ldr	r1, [pc, #272]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d17d      	bne.n	80033b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032b8:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fd fad8 	bl	8000878 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ca:	e009      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032cc:	f7fd fad4 	bl	8000878 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d902      	bls.n	80032e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	73fb      	strb	r3, [r7, #15]
        break;
 80032de:	e005      	b.n	80032ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e0:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ef      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d160      	bne.n	80033b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d111      	bne.n	800331c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	0211      	lsls	r1, r2, #8
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68d2      	ldr	r2, [r2, #12]
 800330e:	0912      	lsrs	r2, r2, #4
 8003310:	0452      	lsls	r2, r2, #17
 8003312:	430a      	orrs	r2, r1
 8003314:	492a      	ldr	r1, [pc, #168]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	610b      	str	r3, [r1, #16]
 800331a:	e027      	b.n	800336c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d112      	bne.n	8003348 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003322:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800332a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6892      	ldr	r2, [r2, #8]
 8003332:	0211      	lsls	r1, r2, #8
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6912      	ldr	r2, [r2, #16]
 8003338:	0852      	lsrs	r2, r2, #1
 800333a:	3a01      	subs	r2, #1
 800333c:	0552      	lsls	r2, r2, #21
 800333e:	430a      	orrs	r2, r1
 8003340:	491f      	ldr	r1, [pc, #124]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	610b      	str	r3, [r1, #16]
 8003346:	e011      	b.n	800336c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003350:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6892      	ldr	r2, [r2, #8]
 8003358:	0211      	lsls	r1, r2, #8
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6952      	ldr	r2, [r2, #20]
 800335e:	0852      	lsrs	r2, r2, #1
 8003360:	3a01      	subs	r2, #1
 8003362:	0652      	lsls	r2, r2, #25
 8003364:	430a      	orrs	r2, r1
 8003366:	4916      	ldr	r1, [pc, #88]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fd fa7e 	bl	8000878 <HAL_GetTick>
 800337c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800337e:	e009      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003380:	f7fd fa7a 	bl	8000878 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d902      	bls.n	8003394 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	73fb      	strb	r3, [r7, #15]
          break;
 8003392:	e005      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ef      	beq.n	8003380 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	4904      	ldr	r1, [pc, #16]	; (80033c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000

080033c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033d2:	4b6a      	ldr	r3, [pc, #424]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033de:	4b67      	ldr	r3, [pc, #412]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10d      	bne.n	800340a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
       ||
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033f6:	4b61      	ldr	r3, [pc, #388]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
       ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d047      	beq.n	800349a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e044      	b.n	800349a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d018      	beq.n	800344a <RCCEx_PLLSAI2_Config+0x86>
 8003418:	2b03      	cmp	r3, #3
 800341a:	d825      	bhi.n	8003468 <RCCEx_PLLSAI2_Config+0xa4>
 800341c:	2b01      	cmp	r3, #1
 800341e:	d002      	beq.n	8003426 <RCCEx_PLLSAI2_Config+0x62>
 8003420:	2b02      	cmp	r3, #2
 8003422:	d009      	beq.n	8003438 <RCCEx_PLLSAI2_Config+0x74>
 8003424:	e020      	b.n	8003468 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003426:	4b55      	ldr	r3, [pc, #340]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11d      	bne.n	800346e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003436:	e01a      	b.n	800346e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d116      	bne.n	8003472 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003448:	e013      	b.n	8003472 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800344a:	4b4c      	ldr	r3, [pc, #304]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003456:	4b49      	ldr	r3, [pc, #292]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003466:	e006      	b.n	8003476 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      break;
 800346c:	e004      	b.n	8003478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003476:	bf00      	nop
    }

    if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	430b      	orrs	r3, r1
 8003494:	4939      	ldr	r1, [pc, #228]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d167      	bne.n	8003570 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a35      	ldr	r2, [pc, #212]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fd f9e4 	bl	8000878 <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034b2:	e009      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034b4:	f7fd f9e0 	bl	8000878 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	73fb      	strb	r3, [r7, #15]
        break;
 80034c6:	e005      	b.n	80034d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034c8:	4b2c      	ldr	r3, [pc, #176]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ef      	bne.n	80034b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d14a      	bne.n	8003570 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034e0:	4b26      	ldr	r3, [pc, #152]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6892      	ldr	r2, [r2, #8]
 80034f0:	0211      	lsls	r1, r2, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	0912      	lsrs	r2, r2, #4
 80034f8:	0452      	lsls	r2, r2, #17
 80034fa:	430a      	orrs	r2, r1
 80034fc:	491f      	ldr	r1, [pc, #124]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	614b      	str	r3, [r1, #20]
 8003502:	e011      	b.n	8003528 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800350c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6892      	ldr	r2, [r2, #8]
 8003514:	0211      	lsls	r1, r2, #8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6912      	ldr	r2, [r2, #16]
 800351a:	0852      	lsrs	r2, r2, #1
 800351c:	3a01      	subs	r2, #1
 800351e:	0652      	lsls	r2, r2, #25
 8003520:	430a      	orrs	r2, r1
 8003522:	4916      	ldr	r1, [pc, #88]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003524:	4313      	orrs	r3, r2
 8003526:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a13      	ldr	r2, [pc, #76]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003534:	f7fd f9a0 	bl	8000878 <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800353c:	f7fd f99c 	bl	8000878 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
          break;
 800354e:	e005      	b.n	800355c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ef      	beq.n	800353c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	4904      	ldr	r1, [pc, #16]	; (800357c <RCCEx_PLLSAI2_Config+0x1b8>)
 800356c:	4313      	orrs	r3, r2
 800356e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000

08003580 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359c:	d10c      	bne.n	80035b8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800359e:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035a8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035b0:	d112      	bne.n	80035d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80035b2:	4b6a      	ldr	r3, [pc, #424]	; (800375c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e00f      	b.n	80035d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	d10b      	bne.n	80035d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80035c0:	4b65      	ldr	r3, [pc, #404]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80035ca:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035d2:	d101      	bne.n	80035d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80035d4:	4b61      	ldr	r3, [pc, #388]	; (800375c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80035d6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 80b4 	bne.w	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ea:	d003      	beq.n	80035f4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f2:	d135      	bne.n	8003660 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80035f4:	4b58      	ldr	r3, [pc, #352]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003600:	f040 80a1 	bne.w	8003746 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8003604:	4b54      	ldr	r3, [pc, #336]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 809a 	beq.w	8003746 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	3301      	adds	r3, #1
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003626:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003638:	4b47      	ldr	r3, [pc, #284]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003644:	2311      	movs	r3, #17
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e001      	b.n	800364e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800364a:	2307      	movs	r3, #7
 800364c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	fb03 f202 	mul.w	r2, r3, r2
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800365e:	e072      	b.n	8003746 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d133      	bne.n	80036ce <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003666:	4b3c      	ldr	r3, [pc, #240]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003672:	d169      	bne.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003674:	4b38      	ldr	r3, [pc, #224]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d063      	beq.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	3301      	adds	r3, #1
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003694:	4b30      	ldr	r3, [pc, #192]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80036b2:	2311      	movs	r3, #17
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e001      	b.n	80036bc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80036b8:	2307      	movs	r3, #7
 80036ba:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	fb03 f202 	mul.w	r2, r3, r2
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e03c      	b.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d4:	d003      	beq.n	80036de <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d134      	bne.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ea:	d12d      	bne.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d027      	beq.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	3301      	adds	r3, #1
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003716:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800372a:	2311      	movs	r3, #17
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e001      	b.n	8003734 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003730:	2307      	movs	r3, #7
 8003732:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	fb03 f202 	mul.w	r2, r3, r2
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	e000      	b.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003746:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003748:	69fb      	ldr	r3, [r7, #28]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	001fff68 	.word	0x001fff68

08003760 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e022      	b.n	80037b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fc fe63 	bl	8000450 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f814 	bl	80037c0 <HAL_SD_InitCard>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e00a      	b.n	80037b8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af04      	add	r7, sp, #16
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80037dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037e0:	f7fe ff8e 	bl	8002700 <HAL_RCCEx_GetPeriphCLKFreq>
 80037e4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e07b      	b.n	80038f8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	09db      	lsrs	r3, r3, #7
 8003804:	4a3e      	ldr	r2, [pc, #248]	; (8003900 <HAL_SD_InitCard+0x140>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	3b02      	subs	r3, #2
 800380e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681d      	ldr	r5, [r3, #0]
 8003814:	466c      	mov	r4, sp
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800381e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003828:	4628      	mov	r0, r5
 800382a:	f001 fd93 	bl	8005354 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fdd1 	bl	80053ea <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003856:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3302      	adds	r3, #2
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003864:	4a27      	ldr	r2, [pc, #156]	; (8003904 <HAL_SD_InitCard+0x144>)
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	3301      	adds	r3, #1
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd f80e 	bl	8000890 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 ffdf 	bl	8004838 <SD_PowerON>
 800387a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e02e      	b.n	80038f8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fefe 	bl	800469c <SD_InitCard>
 80038a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e01b      	b.n	80038f8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fe21 	bl	8005510 <SDMMC_CmdBlockLength>
 80038ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00f      	beq.n	80038f6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <HAL_SD_InitCard+0x148>)
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	; 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003900:	014f8b59 	.word	0x014f8b59
 8003904:	00012110 	.word	0x00012110
 8003908:	004005ff 	.word	0x004005ff

0800390c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	; 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0a9      	b.n	8003a88 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	f040 80a2 	bne.w	8003a86 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	441a      	add	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	429a      	cmp	r2, r3
 8003954:	d907      	bls.n	8003966 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e090      	b.n	8003a88 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2203      	movs	r2, #3
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a45      	ldr	r2, [pc, #276]	; (8003a90 <HAL_SD_ReadBlocks_DMA+0x184>)
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <HAL_SD_ReadBlocks_DMA+0x188>)
 8003984:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2200      	movs	r2, #0
 800398c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3380      	adds	r3, #128	; 0x80
 8003998:	4619      	mov	r1, r3
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	025b      	lsls	r3, r3, #9
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	f7fd f9c5 	bl	8000d30 <HAL_DMA_Start_IT>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00f      	beq.n	80039cc <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a39      	ldr	r2, [pc, #228]	; (8003a98 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e05d      	b.n	8003a88 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d002      	beq.n	80039ea <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	025b      	lsls	r3, r3, #9
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	025b      	lsls	r3, r3, #9
 80039f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80039f6:	2390      	movs	r3, #144	; 0x90
 80039f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80039fa:	2302      	movs	r3, #2
 80039fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003a02:	2301      	movs	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f107 0210 	add.w	r2, r7, #16
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 fd51 	bl	80054b8 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d90a      	bls.n	8003a32 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2282      	movs	r2, #130	; 0x82
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 fdb5 	bl	8005598 <SDMMC_CmdReadMultiBlock>
 8003a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a30:	e009      	b.n	8003a46 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2281      	movs	r2, #129	; 0x81
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 fd88 	bl	8005554 <SDMMC_CmdReadSingleBlock>
 8003a44:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d012      	beq.n	8003a72 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00a      	b.n	8003a88 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
  }
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3730      	adds	r7, #48	; 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	080044b7 	.word	0x080044b7
 8003a94:	08004529 	.word	0x08004529
 8003a98:	004005ff 	.word	0x004005ff

08003a9c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0ac      	b.n	8003c1e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 80a5 	bne.w	8003c1c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	441a      	add	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d907      	bls.n	8003af6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e093      	b.n	8003c1e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	4a47      	ldr	r2, [pc, #284]	; (8003c28 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	4a46      	ldr	r2, [pc, #280]	; (8003c2c <HAL_SD_WriteBlocks_DMA+0x190>)
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d002      	beq.n	8003b2c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	025b      	lsls	r3, r3, #9
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d90a      	bls.n	8003b48 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	22a0      	movs	r2, #160	; 0xa0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fd6e 	bl	8005620 <SDMMC_CmdWriteMultiBlock>
 8003b44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b46:	e009      	b.n	8003b5c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2290      	movs	r2, #144	; 0x90
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 fd41 	bl	80055dc <SDMMC_CmdWriteSingleBlock>
 8003b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d012      	beq.n	8003b88 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a32      	ldr	r2, [pc, #200]	; (8003c30 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e04a      	b.n	8003c1e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0208 	orr.w	r2, r2, #8
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3380      	adds	r3, #128	; 0x80
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	f7fd f8c0 	bl	8000d30 <HAL_DMA_Start_IT>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e020      	b.n	8003c1e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003be0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	025b      	lsls	r3, r3, #9
 8003be6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003be8:	2390      	movs	r3, #144	; 0x90
 8003bea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f107 0210 	add.w	r2, r7, #16
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 fc58 	bl	80054b8 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 021a 	orr.w	r2, r2, #26
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3730      	adds	r7, #48	; 0x30
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	0800448d 	.word	0x0800448d
 8003c2c:	08004529 	.word	0x08004529
 8003c30:	004005ff 	.word	0x004005ff

08003c34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_SD_IRQHandler+0x2e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f001 f802 	bl	8004c64 <SD_Read_IT>
 8003c60:	e155      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 808f 	beq.w	8003d90 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003c8a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c8e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d039      	beq.n	8003d1e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <HAL_SD_IRQHandler+0x8a>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fcce 	bl	8005664 <SDMMC_CmdStopTransfer>
 8003cc8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f91f 	bl	8003f20 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_SD_IRQHandler+0xda>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f002 f958 	bl	8005fc4 <HAL_SD_RxCpltCallback>
 8003d14:	e0fb      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f002 f94a 	bl	8005fb0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003d1c:	e0f7      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80f2 	beq.w	8003f0e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d011      	beq.n	8003d58 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fc93 	bl	8005664 <SDMMC_CmdStopTransfer>
 8003d3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8e4 	bl	8003f20 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 80d5 	bne.w	8003f0e <HAL_SD_IRQHandler+0x2da>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 80cf 	bne.w	8003f0e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0208 	bic.w	r2, r2, #8
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f002 f911 	bl	8005fb0 <HAL_SD_TxCpltCallback>
}
 8003d8e:	e0be      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_SD_IRQHandler+0x17c>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 ffac 	bl	8004d06 <SD_Write_IT>
 8003dae:	e0ae      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80a7 	beq.w	8003f0e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	f043 0202 	orr.w	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	f043 0208 	orr.w	r2, r3, #8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	f043 0220 	orr.w	r2, r3, #32
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f043 0210 	orr.w	r2, r3, #16
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e40:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 fc0c 	bl	8005664 <SDMMC_CmdStopTransfer>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f855 	bl	8003f20 <HAL_SD_ErrorCallback>
}
 8003e76:	e04a      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d045      	beq.n	8003f0e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_SD_IRQHandler+0x262>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d011      	beq.n	8003eba <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_SD_IRQHandler+0x2e4>)
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc ffe2 	bl	8000e6c <HAL_DMA_Abort_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d02f      	beq.n	8003f0e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fb84 	bl	80045c0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003eb8:	e029      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d104      	bne.n	8003ece <HAL_SD_IRQHandler+0x29a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <HAL_SD_IRQHandler+0x2e8>)
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc ffc6 	bl	8000e6c <HAL_DMA_Abort_IT>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d013      	beq.n	8003f0e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fb9f 	bl	800462e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ef0:	e00d      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f002 f848 	bl	8005f9c <HAL_SD_AbortCallback>
}
 8003f0c:	e7ff      	b.n	8003f0e <HAL_SD_IRQHandler+0x2da>
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	080045c1 	.word	0x080045c1
 8003f1c:	0800462f 	.word	0x0800462f

08003f20 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f42:	0f9b      	lsrs	r3, r3, #30
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4e:	0e9b      	lsrs	r3, r3, #26
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f60:	0e1b      	lsrs	r3, r3, #24
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f72:	0c1b      	lsrs	r3, r3, #16
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f94:	0d1b      	lsrs	r3, r3, #20
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb2:	0bdb      	lsrs	r3, r3, #15
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	0b9b      	lsrs	r3, r3, #14
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd6:	0b5b      	lsrs	r3, r3, #13
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe8:	0b1b      	lsrs	r3, r3, #12
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	2b00      	cmp	r3, #0
 8004002:	d163      	bne.n	80040cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004008:	009a      	lsls	r2, r3, #2
 800400a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800400e:	4013      	ands	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004014:	0f92      	lsrs	r2, r2, #30
 8004016:	431a      	orrs	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004020:	0edb      	lsrs	r3, r3, #27
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	b2da      	uxtb	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	0e1b      	lsrs	r3, r3, #24
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	b2da      	uxtb	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004044:	0d5b      	lsrs	r3, r3, #21
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	b2da      	uxtb	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	0c9b      	lsrs	r3, r3, #18
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	b2da      	uxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004068:	0bdb      	lsrs	r3, r3, #15
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	b2da      	uxtb	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	7e1b      	ldrb	r3, [r3, #24]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	3302      	adds	r3, #2
 800408c:	2201      	movs	r2, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004096:	fb03 f202 	mul.w	r2, r3, r2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7a1b      	ldrb	r3, [r3, #8]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040b8:	0a52      	lsrs	r2, r2, #9
 80040ba:	fb03 f202 	mul.w	r2, r3, r2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c8:	661a      	str	r2, [r3, #96]	; 0x60
 80040ca:	e031      	b.n	8004130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d11d      	bne.n	8004110 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	431a      	orrs	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	3301      	adds	r3, #1
 80040f0:	029a      	lsls	r2, r3, #10
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004104:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	661a      	str	r2, [r3, #96]	; 0x60
 800410e:	e00f      	b.n	8004130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a58      	ldr	r2, [pc, #352]	; (8004278 <HAL_SD_GetCardCSD+0x344>)
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e09d      	b.n	800426c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004134:	0b9b      	lsrs	r3, r3, #14
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004146:	09db      	lsrs	r3, r3, #7
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414e:	b2da      	uxtb	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415e:	b2da      	uxtb	r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	0fdb      	lsrs	r3, r3, #31
 800416a:	b2da      	uxtb	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	0f5b      	lsrs	r3, r3, #29
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	b2da      	uxtb	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	0e9b      	lsrs	r3, r3, #26
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	b2da      	uxtb	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	0d9b      	lsrs	r3, r3, #22
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	0d5b      	lsrs	r3, r3, #21
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	0bdb      	lsrs	r3, r3, #15
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	0b9b      	lsrs	r3, r3, #14
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	0b5b      	lsrs	r3, r3, #13
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	0b1b      	lsrs	r3, r3, #12
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	0a9b      	lsrs	r3, r3, #10
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	b2da      	uxtb	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425a:	b2da      	uxtb	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	004005ff 	.word	0x004005ff

0800427c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80042d4:	b5b0      	push	{r4, r5, r7, lr}
 80042d6:	b090      	sub	sp, #64	; 0x40
 80042d8:	af04      	add	r7, sp, #16
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2203      	movs	r2, #3
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d02e      	beq.n	8004352 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d106      	bne.n	800430a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
 8004308:	e029      	b.n	800435e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004310:	d10a      	bne.n	8004328 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fb46 	bl	80049a4 <SD_WideBus_Enable>
 8004318:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
 8004326:	e01a      	b.n	800435e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fb83 	bl	8004a3a <SD_WideBus_Disable>
 8004334:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
 8004342:	e00c      	b.n	800435e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
 8004350:	e005      	b.n	800435e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a35      	ldr	r2, [pc, #212]	; (8004440 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004374:	e042      	b.n	80043fc <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004376:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800437a:	f7fe f9c1 	bl	8002700 <HAL_RCCEx_GetPeriphCLKFreq>
 800437e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d031      	beq.n	80043ea <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	3302      	adds	r3, #2
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	4a25      	ldr	r2, [pc, #148]	; (8004444 <HAL_SD_ConfigWideBusOperation+0x170>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d907      	bls.n	80043c4 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	4a24      	ldr	r2, [pc, #144]	; (8004448 <HAL_SD_ConfigWideBusOperation+0x174>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	0ddb      	lsrs	r3, r3, #23
 80043be:	3b02      	subs	r3, #2
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	e002      	b.n	80043ca <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681d      	ldr	r5, [r3, #0]
 80043ce:	466c      	mov	r4, sp
 80043d0:	f107 0318 	add.w	r3, r7, #24
 80043d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043dc:	f107 030c 	add.w	r3, r7, #12
 80043e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043e2:	4628      	mov	r0, r5
 80043e4:	f000 ffb6 	bl	8005354 <SDMMC_Init>
 80043e8:	e008      	b.n	80043fc <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004404:	4618      	mov	r0, r3
 8004406:	f001 f883 	bl	8005510 <SDMMC_CmdBlockLength>
 800440a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004438:	4618      	mov	r0, r3
 800443a:	3730      	adds	r7, #48	; 0x30
 800443c:	46bd      	mov	sp, r7
 800443e:	bdb0      	pop	{r4, r5, r7, pc}
 8004440:	004005ff 	.word	0x004005ff
 8004444:	017d7840 	.word	0x017d7840
 8004448:	55e63b89 	.word	0x55e63b89

0800444c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa78 	bl	8004954 <SD_SendStatus>
 8004464:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	0a5b      	lsrs	r3, r3, #9
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004482:	693b      	ldr	r3, [r7, #16]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	2b82      	cmp	r3, #130	; 0x82
 80044ca:	d111      	bne.n	80044f0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f8c7 	bl	8005664 <SDMMC_CmdStopTransfer>
 80044d6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff fd18 	bl	8003f20 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0208 	bic.w	r2, r2, #8
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f240 523a 	movw	r2, #1338	; 0x53a
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f001 fd53 	bl	8005fc4 <HAL_SD_RxCpltCallback>
#endif
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d002      	beq.n	8004552 <SD_DMAError+0x2a>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d12d      	bne.n	80045ae <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a19      	ldr	r2, [pc, #100]	; (80045bc <SD_DMAError+0x94>)
 8004558:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004568:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7ff ff68 	bl	800444c <HAL_SD_GetCardState>
 800457c:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b06      	cmp	r3, #6
 8004582:	d002      	beq.n	800458a <SD_DMAError+0x62>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b05      	cmp	r3, #5
 8004588:	d10a      	bne.n	80045a0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f001 f868 	bl	8005664 <SDMMC_CmdStopTransfer>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	431a      	orrs	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80045ae:	6978      	ldr	r0, [r7, #20]
 80045b0:	f7ff fcb6 	bl	8003f20 <HAL_SD_ErrorCallback>
#endif
}
 80045b4:	bf00      	nop
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	004005ff 	.word	0x004005ff

080045c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff37 	bl	800444c <HAL_SD_GetCardState>
 80045de:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d002      	beq.n	80045fa <SD_DMATxAbort+0x3a>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d10a      	bne.n	8004610 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f830 	bl	8005664 <SDMMC_CmdStopTransfer>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	431a      	orrs	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f001 fcbf 	bl	8005f9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800461e:	e002      	b.n	8004626 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fc7d 	bl	8003f20 <HAL_SD_ErrorCallback>
}
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f240 523a 	movw	r2, #1338	; 0x53a
 8004644:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff ff00 	bl	800444c <HAL_SD_GetCardState>
 800464c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b06      	cmp	r3, #6
 8004660:	d002      	beq.n	8004668 <SD_DMARxAbort+0x3a>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b05      	cmp	r3, #5
 8004666:	d10a      	bne.n	800467e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fff9 	bl	8005664 <SDMMC_CmdStopTransfer>
 8004672:	4602      	mov	r2, r0
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f001 fc88 	bl	8005f9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800468c:	e002      	b.n	8004694 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fc46 	bl	8003f20 <HAL_SD_ErrorCallback>
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800469c:	b5b0      	push	{r4, r5, r7, lr}
 800469e:	b094      	sub	sp, #80	; 0x50
 80046a0:	af04      	add	r7, sp, #16
 80046a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80046a4:	2301      	movs	r3, #1
 80046a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 feab 	bl	8005408 <SDMMC_GetPowerState>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046bc:	e0b8      	b.n	8004830 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d02f      	beq.n	8004726 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 f8d4 	bl	8005878 <SDMMC_CmdSendCID>
 80046d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <SD_InitCard+0x40>
    {
      return errorstate;
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	e0a9      	b.n	8004830 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fed5 	bl	8005492 <SDMMC_GetResponse>
 80046e8:	4602      	mov	r2, r0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2104      	movs	r1, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fecc 	bl	8005492 <SDMMC_GetResponse>
 80046fa:	4602      	mov	r2, r0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2108      	movs	r1, #8
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fec3 	bl	8005492 <SDMMC_GetResponse>
 800470c:	4602      	mov	r2, r0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	210c      	movs	r1, #12
 8004718:	4618      	mov	r0, r3
 800471a:	f000 feba 	bl	8005492 <SDMMC_GetResponse>
 800471e:	4602      	mov	r2, r0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	2b03      	cmp	r3, #3
 800472c:	d00d      	beq.n	800474a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f107 020e 	add.w	r2, r7, #14
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f8da 	bl	80058f2 <SDMMC_CmdSetRelAdd>
 800473e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <SD_InitCard+0xae>
    {
      return errorstate;
 8004746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004748:	e072      	b.n	8004830 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	2b03      	cmp	r3, #3
 8004750:	d036      	beq.n	80047c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004752:	89fb      	ldrh	r3, [r7, #14]
 8004754:	461a      	mov	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f001 f8a4 	bl	80058b4 <SDMMC_CmdSendCSD>
 800476c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004776:	e05b      	b.n	8004830 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe87 	bl	8005492 <SDMMC_GetResponse>
 8004784:	4602      	mov	r2, r0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2104      	movs	r1, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fe7e 	bl	8005492 <SDMMC_GetResponse>
 8004796:	4602      	mov	r2, r0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2108      	movs	r1, #8
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fe75 	bl	8005492 <SDMMC_GetResponse>
 80047a8:	4602      	mov	r2, r0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	210c      	movs	r1, #12
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fe6c 	bl	8005492 <SDMMC_GetResponse>
 80047ba:	4602      	mov	r2, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2104      	movs	r1, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fe63 	bl	8005492 <SDMMC_GetResponse>
 80047cc:	4603      	mov	r3, r0
 80047ce:	0d1a      	lsrs	r2, r3, #20
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80047d4:	f107 0310 	add.w	r3, r7, #16
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fbaa 	bl	8003f34 <HAL_SD_GetCardCSD>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047ea:	e021      	b.n	8004830 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	2200      	movs	r2, #0
 80047f8:	461c      	mov	r4, r3
 80047fa:	4615      	mov	r5, r2
 80047fc:	4622      	mov	r2, r4
 80047fe:	462b      	mov	r3, r5
 8004800:	4608      	mov	r0, r1
 8004802:	f000 ff51 	bl	80056a8 <SDMMC_CmdSelDesel>
 8004806:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <SD_InitCard+0x176>
  {
    return errorstate;
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004810:	e00e      	b.n	8004830 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681d      	ldr	r5, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	466c      	mov	r4, sp
 800481a:	f103 0210 	add.w	r2, r3, #16
 800481e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004820:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004824:	3304      	adds	r3, #4
 8004826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004828:	4628      	mov	r0, r5
 800482a:	f000 fd93 	bl	8005354 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3740      	adds	r7, #64	; 0x40
 8004834:	46bd      	mov	sp, r7
 8004836:	bdb0      	pop	{r4, r5, r7, pc}

08004838 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 ff4c 	bl	80056ee <SDMMC_CmdGoIdleState>
 8004856:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <SD_PowerON+0x2a>
  {
    return errorstate;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	e072      	b.n	8004948 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 ff5f 	bl	800572a <SDMMC_CmdOperCond>
 800486c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 ff35 	bl	80056ee <SDMMC_CmdGoIdleState>
 8004884:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <SD_PowerON+0x5e>
    {
      return errorstate;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e05b      	b.n	8004948 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489a:	2b01      	cmp	r3, #1
 800489c:	d137      	bne.n	800490e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 ff5f 	bl	8005768 <SDMMC_CmdAppCommand>
 80048aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02d      	beq.n	800490e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048b6:	e047      	b.n	8004948 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 ff52 	bl	8005768 <SDMMC_CmdAppCommand>
 80048c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	e03b      	b.n	8004948 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	491e      	ldr	r1, [pc, #120]	; (8004950 <SD_PowerON+0x118>)
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 ff68 	bl	80057ac <SDMMC_CmdAppOperCommand>
 80048dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048e8:	e02e      	b.n	8004948 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fdce 	bl	8005492 <SDMMC_GetResponse>
 80048f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	0fdb      	lsrs	r3, r3, #31
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <SD_PowerON+0xcc>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <SD_PowerON+0xce>
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]

    count++;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3301      	adds	r3, #1
 800490c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004914:	4293      	cmp	r3, r2
 8004916:	d802      	bhi.n	800491e <SD_PowerON+0xe6>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0cc      	beq.n	80048b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004924:	4293      	cmp	r3, r2
 8004926:	d902      	bls.n	800492e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800492c:	e00c      	b.n	8004948 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	645a      	str	r2, [r3, #68]	; 0x44
 800493e:	e002      	b.n	8004946 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	c1100000 	.word	0xc1100000

08004954 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004968:	e018      	b.n	800499c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 ffdc 	bl	8005934 <SDMMC_CmdSendStatus>
 800497c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	e009      	b.n	800499c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fd7f 	bl	8005492 <SDMMC_GetResponse>
 8004994:	4602      	mov	r2, r0
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fd69 	bl	8005492 <SDMMC_GetResponse>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ca:	d102      	bne.n	80049d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049d0:	e02f      	b.n	8004a32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80049d2:	f107 030c 	add.w	r3, r7, #12
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f879 	bl	8004ad0 <SD_FindSCR>
 80049de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	e023      	b.n	8004a32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01c      	beq.n	8004a2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 feb1 	bl	8005768 <SDMMC_CmdAppCommand>
 8004a06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	e00f      	b.n	8004a32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2102      	movs	r1, #2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 feea 	bl	80057f2 <SDMMC_CmdBusWidth>
 8004a1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	e003      	b.n	8004a32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e001      	b.n	8004a32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b086      	sub	sp, #24
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fd1e 	bl	8005492 <SDMMC_GetResponse>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a60:	d102      	bne.n	8004a68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a66:	e02f      	b.n	8004ac8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a68:	f107 030c 	add.w	r3, r7, #12
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f82e 	bl	8004ad0 <SD_FindSCR>
 8004a74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	e023      	b.n	8004ac8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01c      	beq.n	8004ac4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f000 fe66 	bl	8005768 <SDMMC_CmdAppCommand>
 8004a9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	e00f      	b.n	8004ac8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fe9f 	bl	80057f2 <SDMMC_CmdBusWidth>
 8004ab4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	e003      	b.n	8004ac8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e001      	b.n	8004ac8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ac4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b08f      	sub	sp, #60	; 0x3c
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ada:	f7fb fecd 	bl	8000878 <HAL_GetTick>
 8004ade:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2108      	movs	r1, #8
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fd0a 	bl	8005510 <SDMMC_CmdBlockLength>
 8004afc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	e0a9      	b.n	8004c5c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 fe27 	bl	8005768 <SDMMC_CmdAppCommand>
 8004b1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	e09a      	b.n	8004c5c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004b30:	2330      	movs	r3, #48	; 0x30
 8004b32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b34:	2302      	movs	r3, #2
 8004b36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f107 0210 	add.w	r2, r7, #16
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fcb4 	bl	80054b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fe6e 	bl	8005836 <SDMMC_CmdSendSCR>
 8004b5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d022      	beq.n	8004ba8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	e07a      	b.n	8004c5c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	f107 0208 	add.w	r2, r7, #8
 8004b80:	18d4      	adds	r4, r2, r3
 8004b82:	4608      	mov	r0, r1
 8004b84:	f000 fc13 	bl	80053ae <SDMMC_ReadFIFO>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	6023      	str	r3, [r4, #0]
      index++;
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	3301      	adds	r3, #1
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b92:	f7fb fe71 	bl	8000878 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d102      	bne.n	8004ba8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ba2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ba6:	e059      	b.n	8004c5c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bae:	f240 432a 	movw	r3, #1066	; 0x42a
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0d6      	beq.n	8004b66 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2208      	movs	r2, #8
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004bce:	2308      	movs	r3, #8
 8004bd0:	e044      	b.n	8004c5c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2202      	movs	r2, #2
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004be8:	2302      	movs	r3, #2
 8004bea:	e037      	b.n	8004c5c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004c02:	2320      	movs	r3, #32
 8004c04:	e02a      	b.n	8004c5c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	061a      	lsls	r2, r3, #24
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c26:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	0e1b      	lsrs	r3, r3, #24
 8004c2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	601a      	str	r2, [r3, #0]
    scr++;
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	3304      	adds	r3, #4
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	061a      	lsls	r2, r3, #24
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c4e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	0e1b      	lsrs	r3, r3, #24
 8004c54:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	373c      	adds	r7, #60	; 0x3c
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd90      	pop	{r4, r7, pc}

08004c64 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03f      	beq.n	8004cfe <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e033      	b.n	8004cec <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fb90 	bl	80053ae <SDMMC_ReadFIFO>
 8004c8e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	0e1b      	lsrs	r3, r3, #24
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b07      	cmp	r3, #7
 8004cf0:	d9c8      	bls.n	8004c84 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d043      	beq.n	8004da8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e037      	b.n	8004d96 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	021a      	lsls	r2, r3, #8
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	041a      	lsls	r2, r3, #16
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	061a      	lsls	r2, r3, #24
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f107 0208 	add.w	r2, r7, #8
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fb1c 	bl	80053c8 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3301      	adds	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b07      	cmp	r3, #7
 8004d9a:	d9c4      	bls.n	8004d26 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e049      	b.n	8004e56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f841 	bl	8004e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f000 f9f8 	bl	80051e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d001      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04f      	b.n	8004f2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01d      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x76>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb6:	d018      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x76>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x76>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x76>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x76>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x76>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d115      	bne.n	8004f16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b06      	cmp	r3, #6
 8004efa:	d015      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0xb4>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f02:	d011      	beq.n	8004f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f14:	e008      	b.n	8004f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e000      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	00010007 	.word	0x00010007

08004f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d122      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d11b      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0202 	mvn.w	r2, #2
 8004f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f905 	bl	80051a6 <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f8f7 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f908 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0204 	mvn.w	r2, #4
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8db 	bl	80051a6 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8cd 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8de 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b08      	cmp	r3, #8
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b08      	cmp	r3, #8
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0208 	mvn.w	r2, #8
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2204      	movs	r2, #4
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f8b1 	bl	80051a6 <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f8a3 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8b4 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b10      	cmp	r3, #16
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b10      	cmp	r3, #16
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0210 	mvn.w	r2, #16
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2208      	movs	r2, #8
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f887 	bl	80051a6 <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f879 	bl	8005192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f88a 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10e      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0201 	mvn.w	r2, #1
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fb f97c 	bl	80003d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d10e      	bne.n	8005104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f0:	2b80      	cmp	r3, #128	; 0x80
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f914 	bl	800532c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	d10e      	bne.n	8005132 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b80      	cmp	r3, #128	; 0x80
 8005120:	d107      	bne.n	8005132 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800512a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f907 	bl	8005340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d10e      	bne.n	800515e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d107      	bne.n	800515e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f838 	bl	80051ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b20      	cmp	r3, #32
 800516a:	d10e      	bne.n	800518a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b20      	cmp	r3, #32
 8005178:	d107      	bne.n	800518a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f06f 0220 	mvn.w	r2, #32
 8005182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f8c7 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a40      	ldr	r2, [pc, #256]	; (80052f8 <TIM_Base_SetConfig+0x114>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005202:	d00f      	beq.n	8005224 <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a3d      	ldr	r2, [pc, #244]	; (80052fc <TIM_Base_SetConfig+0x118>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00b      	beq.n	8005224 <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3c      	ldr	r2, [pc, #240]	; (8005300 <TIM_Base_SetConfig+0x11c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a3b      	ldr	r2, [pc, #236]	; (8005304 <TIM_Base_SetConfig+0x120>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a3a      	ldr	r2, [pc, #232]	; (8005308 <TIM_Base_SetConfig+0x124>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d108      	bne.n	8005236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2f      	ldr	r2, [pc, #188]	; (80052f8 <TIM_Base_SetConfig+0x114>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01f      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d01b      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <TIM_Base_SetConfig+0x118>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d017      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <TIM_Base_SetConfig+0x11c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2a      	ldr	r2, [pc, #168]	; (8005304 <TIM_Base_SetConfig+0x120>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00f      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a29      	ldr	r2, [pc, #164]	; (8005308 <TIM_Base_SetConfig+0x124>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00b      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <TIM_Base_SetConfig+0x128>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d007      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a27      	ldr	r2, [pc, #156]	; (8005310 <TIM_Base_SetConfig+0x12c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_Base_SetConfig+0x9a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a26      	ldr	r2, [pc, #152]	; (8005314 <TIM_Base_SetConfig+0x130>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d108      	bne.n	8005290 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <TIM_Base_SetConfig+0x114>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00f      	beq.n	80052dc <TIM_Base_SetConfig+0xf8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a12      	ldr	r2, [pc, #72]	; (8005308 <TIM_Base_SetConfig+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00b      	beq.n	80052dc <TIM_Base_SetConfig+0xf8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a11      	ldr	r2, [pc, #68]	; (800530c <TIM_Base_SetConfig+0x128>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <TIM_Base_SetConfig+0xf8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a10      	ldr	r2, [pc, #64]	; (8005310 <TIM_Base_SetConfig+0x12c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_Base_SetConfig+0xf8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a0f      	ldr	r2, [pc, #60]	; (8005314 <TIM_Base_SetConfig+0x130>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d103      	bne.n	80052e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	615a      	str	r2, [r3, #20]
}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40013400 	.word	0x40013400
 800530c:	40014000 	.word	0x40014000
 8005310:	40014400 	.word	0x40014400
 8005314:	40014800 	.word	0x40014800

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005354:	b084      	sub	sp, #16
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	f107 001c 	add.w	r0, r7, #28
 8005362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8005372:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8005376:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800537a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800537e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005382:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005392:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	b004      	add	sp, #16
 80053ac:	4770      	bx	lr

080053ae <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2203      	movs	r2, #3
 80053f6:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80053f8:	2002      	movs	r0, #2
 80053fa:	f7fb fa49 	bl	8000890 <HAL_Delay>

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0303 	and.w	r3, r3, #3
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005442:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005448:	431a      	orrs	r2, r3
                       Command->CPSM);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800544e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800545e:	f023 030f 	bic.w	r3, r3, #15
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	b2db      	uxtb	r3, r3
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3314      	adds	r3, #20
 80054a0:	461a      	mov	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80054e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80054ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005502:	2300      	movs	r3, #0

}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800551e:	2310      	movs	r3, #16
 8005520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005522:	2340      	movs	r3, #64	; 0x40
 8005524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800552a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800552e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005530:	f107 0308 	add.w	r3, r7, #8
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ff74 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	2110      	movs	r1, #16
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa18 	bl	8005978 <SDMMC_GetCmdResp1>
 8005548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800554a:	69fb      	ldr	r3, [r7, #28]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005562:	2311      	movs	r3, #17
 8005564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005566:	2340      	movs	r3, #64	; 0x40
 8005568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800556e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005572:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ff52 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	2111      	movs	r1, #17
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9f6 	bl	8005978 <SDMMC_GetCmdResp1>
 800558c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800558e:	69fb      	ldr	r3, [r7, #28]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80055a6:	2312      	movs	r3, #18
 80055a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff ff30 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	2112      	movs	r1, #18
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9d4 	bl	8005978 <SDMMC_GetCmdResp1>
 80055d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055d2:	69fb      	ldr	r3, [r7, #28]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80055ea:	2318      	movs	r3, #24
 80055ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055ee:	2340      	movs	r3, #64	; 0x40
 80055f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055fc:	f107 0308 	add.w	r3, r7, #8
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ff0e 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	2118      	movs	r1, #24
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f9b2 	bl	8005978 <SDMMC_GetCmdResp1>
 8005614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005616:	69fb      	ldr	r3, [r7, #28]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800562e:	2319      	movs	r3, #25
 8005630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800563a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005640:	f107 0308 	add.w	r3, r7, #8
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff feec 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	2119      	movs	r1, #25
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f990 	bl	8005978 <SDMMC_GetCmdResp1>
 8005658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800565a:	69fb      	ldr	r3, [r7, #28]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005670:	230c      	movs	r3, #12
 8005672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800567c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005680:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff fecb 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800568e:	4a05      	ldr	r2, [pc, #20]	; (80056a4 <SDMMC_CmdStopTransfer+0x40>)
 8005690:	210c      	movs	r1, #12
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f970 	bl	8005978 <SDMMC_GetCmdResp1>
 8005698:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800569a:	69fb      	ldr	r3, [r7, #28]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	05f5e100 	.word	0x05f5e100

080056a8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80056b8:	2307      	movs	r3, #7
 80056ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056ca:	f107 0310 	add.w	r3, r7, #16
 80056ce:	4619      	mov	r1, r3
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff fea7 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	2107      	movs	r1, #7
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f94b 	bl	8005978 <SDMMC_GetCmdResp1>
 80056e2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b088      	sub	sp, #32
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80056fe:	2300      	movs	r3, #0
 8005700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800570c:	f107 0308 	add.w	r3, r7, #8
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fe86 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb65 	bl	8005de8 <SDMMC_GetCmdError>
 800571e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005720:	69fb      	ldr	r3, [r7, #28]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b088      	sub	sp, #32
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005732:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005736:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005738:	2308      	movs	r3, #8
 800573a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800574a:	f107 0308 	add.w	r3, r7, #8
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fe67 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 faf8 	bl	8005d4c <SDMMC_GetCmdResp7>
 800575c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800575e:	69fb      	ldr	r3, [r7, #28]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005776:	2337      	movs	r3, #55	; 0x37
 8005778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800577a:	2340      	movs	r3, #64	; 0x40
 800577c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005788:	f107 0308 	add.w	r3, r7, #8
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fe48 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	2137      	movs	r1, #55	; 0x37
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f8ec 	bl	8005978 <SDMMC_GetCmdResp1>
 80057a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057a2:	69fb      	ldr	r3, [r7, #28]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057c0:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80057c2:	2329      	movs	r3, #41	; 0x29
 80057c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057d4:	f107 0308 	add.w	r3, r7, #8
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fe22 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f9ff 	bl	8005be4 <SDMMC_GetCmdResp3>
 80057e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057e8:	69fb      	ldr	r3, [r7, #28]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3720      	adds	r7, #32
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005800:	2306      	movs	r3, #6
 8005802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005804:	2340      	movs	r3, #64	; 0x40
 8005806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800580c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fe03 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800581e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005822:	2106      	movs	r1, #6
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f8a7 	bl	8005978 <SDMMC_GetCmdResp1>
 800582a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800582c:	69fb      	ldr	r3, [r7, #28]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b088      	sub	sp, #32
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005842:	2333      	movs	r3, #51	; 0x33
 8005844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800584e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005852:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fde2 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	2133      	movs	r1, #51	; 0x33
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f886 	bl	8005978 <SDMMC_GetCmdResp1>
 800586c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005884:	2302      	movs	r3, #2
 8005886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005888:	23c0      	movs	r3, #192	; 0xc0
 800588a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005896:	f107 0308 	add.w	r3, r7, #8
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fdc1 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f956 	bl	8005b54 <SDMMC_GetCmdResp2>
 80058a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058aa:	69fb      	ldr	r3, [r7, #28]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80058c2:	2309      	movs	r3, #9
 80058c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80058c6:	23c0      	movs	r3, #192	; 0xc0
 80058c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fda2 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f937 	bl	8005b54 <SDMMC_GetCmdResp2>
 80058e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058e8:	69fb      	ldr	r3, [r7, #28]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b088      	sub	sp, #32
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005900:	2303      	movs	r3, #3
 8005902:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800590c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005910:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fd83 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	2103      	movs	r1, #3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f99c 	bl	8005c60 <SDMMC_GetCmdResp6>
 8005928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800592a:	69fb      	ldr	r3, [r7, #28]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005942:	230d      	movs	r3, #13
 8005944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005946:	2340      	movs	r3, #64	; 0x40
 8005948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800594e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005954:	f107 0308 	add.w	r3, r7, #8
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fd62 	bl	8005424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005960:	f241 3288 	movw	r2, #5000	; 0x1388
 8005964:	210d      	movs	r1, #13
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f806 	bl	8005978 <SDMMC_GetCmdResp1>
 800596c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800596e:	69fb      	ldr	r3, [r7, #28]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	460b      	mov	r3, r1
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005986:	4b70      	ldr	r3, [pc, #448]	; (8005b48 <SDMMC_GetCmdResp1+0x1d0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a70      	ldr	r2, [pc, #448]	; (8005b4c <SDMMC_GetCmdResp1+0x1d4>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	0a5a      	lsrs	r2, r3, #9
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	61fa      	str	r2, [r7, #28]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059a8:	e0c9      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0ef      	beq.n	800599a <SDMMC_GetCmdResp1+0x22>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ea      	bne.n	800599a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2204      	movs	r2, #4
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059d6:	2304      	movs	r3, #4
 80059d8:	e0b1      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d004      	beq.n	80059f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0a6      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	22c5      	movs	r2, #197	; 0xc5
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff fd3e 	bl	8005478 <SDMMC_GetCommandResponse>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	7afb      	ldrb	r3, [r7, #11]
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d001      	beq.n	8005a0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e099      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff fd40 	bl	8005492 <SDMMC_GetResponse>
 8005a12:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4b4e      	ldr	r3, [pc, #312]	; (8005b50 <SDMMC_GetCmdResp1+0x1d8>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e08d      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da02      	bge.n	8005a2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a2c:	e087      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	e080      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a46:	2380      	movs	r3, #128	; 0x80
 8005a48:	e079      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a58:	e071      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a68:	e069      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a78:	e061      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a88:	e059      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a98:	e051      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005aa8:	e049      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ab8:	e041      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac8:	e039      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ad8:	e031      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ae8:	e029      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005af4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005af8:	e021      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005b04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b08:	e019      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b18:	e011      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b28:	e009      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b38:	e001      	b.n	8005b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	10624dd3 	.word	0x10624dd3
 8005b50:	fdffe008 	.word	0xfdffe008

08005b54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <SDMMC_GetCmdResp2+0x88>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <SDMMC_GetCmdResp2+0x8c>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	0a5b      	lsrs	r3, r3, #9
 8005b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	60fa      	str	r2, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b80:	e026      	b.n	8005bd0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0ef      	beq.n	8005b72 <SDMMC_GetCmdResp2+0x1e>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1ea      	bne.n	8005b72 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2204      	movs	r2, #4
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bae:	2304      	movs	r3, #4
 8005bb0:	e00e      	b.n	8005bd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e003      	b.n	8005bd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	22c5      	movs	r2, #197	; 0xc5
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	20000000 	.word	0x20000000
 8005be0:	10624dd3 	.word	0x10624dd3

08005be4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bec:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <SDMMC_GetCmdResp3+0x74>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <SDMMC_GetCmdResp3+0x78>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0a5b      	lsrs	r3, r3, #9
 8005bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1e5a      	subs	r2, r3, #1
 8005c06:	60fa      	str	r2, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c10:	e01b      	b.n	8005c4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0ef      	beq.n	8005c02 <SDMMC_GetCmdResp3+0x1e>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1ea      	bne.n	8005c02 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c3e:	2304      	movs	r3, #4
 8005c40:	e003      	b.n	8005c4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	22c5      	movs	r2, #197	; 0xc5
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000000 	.word	0x20000000
 8005c5c:	10624dd3 	.word	0x10624dd3

08005c60 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c6e:	4b35      	ldr	r3, [pc, #212]	; (8005d44 <SDMMC_GetCmdResp6+0xe4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a35      	ldr	r2, [pc, #212]	; (8005d48 <SDMMC_GetCmdResp6+0xe8>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	0a5b      	lsrs	r3, r3, #9
 8005c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	1e5a      	subs	r2, r3, #1
 8005c88:	61fa      	str	r2, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c92:	e052      	b.n	8005d3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ef      	beq.n	8005c84 <SDMMC_GetCmdResp6+0x24>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1ea      	bne.n	8005c84 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d004      	beq.n	8005cc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	e03a      	b.n	8005d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e02f      	b.n	8005d3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff fbcc 	bl	8005478 <SDMMC_GetCommandResponse>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d001      	beq.n	8005cee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e025      	b.n	8005d3a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	22c5      	movs	r2, #197	; 0xc5
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff fbcb 	bl	8005492 <SDMMC_GetResponse>
 8005cfc:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e011      	b.n	8005d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d24:	e009      	b.n	8005d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d34:	e001      	b.n	8005d3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000000 	.word	0x20000000
 8005d48:	10624dd3 	.word	0x10624dd3

08005d4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d54:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <SDMMC_GetCmdResp7+0x94>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <SDMMC_GetCmdResp7+0x98>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	0a5b      	lsrs	r3, r3, #9
 8005d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1e5a      	subs	r2, r3, #1
 8005d6e:	60fa      	str	r2, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d78:	e02c      	b.n	8005dd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0ef      	beq.n	8005d6a <SDMMC_GetCmdResp7+0x1e>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1ea      	bne.n	8005d6a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2204      	movs	r2, #4
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005da6:	2304      	movs	r3, #4
 8005da8:	e014      	b.n	8005dd4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d004      	beq.n	8005dc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e009      	b.n	8005dd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005dd2:	2300      	movs	r3, #0

}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000000 	.word	0x20000000
 8005de4:	10624dd3 	.word	0x10624dd3

08005de8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <SDMMC_GetCmdError+0x50>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <SDMMC_GetCmdError+0x54>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	0a5b      	lsrs	r3, r3, #9
 8005dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1e5a      	subs	r2, r3, #1
 8005e0a:	60fa      	str	r2, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e14:	e009      	b.n	8005e2a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f1      	beq.n	8005e06 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	22c5      	movs	r2, #197	; 0xc5
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000000 	.word	0x20000000
 8005e3c:	10624dd3 	.word	0x10624dd3

08005e40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e44:	4904      	ldr	r1, [pc, #16]	; (8005e58 <MX_FATFS_Init+0x18>)
 8005e46:	4805      	ldr	r0, [pc, #20]	; (8005e5c <MX_FATFS_Init+0x1c>)
 8005e48:	f002 fbbe 	bl	80085c8 <FATFS_LinkDriver>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <MX_FATFS_Init+0x20>)
 8005e52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000150 	.word	0x20000150
 8005e5c:	0800b1d8 	.word	0x0800b1d8
 8005e60:	2000014c 	.word	0x2000014c

08005e64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e7e:	f000 f8b2 	bl	8005fe6 <BSP_SD_IsDetected>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d001      	beq.n	8005e8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e012      	b.n	8005eb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005e8c:	480b      	ldr	r0, [pc, #44]	; (8005ebc <BSP_SD_Init+0x48>)
 8005e8e:	f7fd fc67 	bl	8003760 <HAL_SD_Init>
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005e9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ea0:	4806      	ldr	r0, [pc, #24]	; (8005ebc <BSP_SD_Init+0x48>)
 8005ea2:	f7fe fa17 	bl	80042d4 <HAL_SD_ConfigWideBusOperation>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	2000002c 	.word	0x2000002c

08005ec0 <BSP_SD_ReadBlocks_DMA>:
  */


/* USER CODE BEGIN BeforeEraseSection */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
	uint8_t sd_state = MSD_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	75fb      	strb	r3, [r7, #23]
	/* Invalidate the dma tx handle*/
	hsd1.hdmatx = NULL;
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Prepare the dma channel for a read operation */
	sd_state = SD_DMAConfigRx(&hsd1);
 8005ed6:	480d      	ldr	r0, [pc, #52]	; (8005f0c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8005ed8:	f000 f8aa 	bl	8006030 <SD_DMAConfigRx>
 8005edc:	4603      	mov	r3, r0
 8005ede:	75fb      	strb	r3, [r7, #23]

	if(sd_state == HAL_OK)
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d107      	bne.n	8005ef6 <BSP_SD_ReadBlocks_DMA+0x36>
	{
		/* Read block(s) in DMA transfer mode */
		sd_state = HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	4807      	ldr	r0, [pc, #28]	; (8005f0c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8005eee:	f7fd fd0d 	bl	800390c <HAL_SD_ReadBlocks_DMA>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]
	}

	if( sd_state == HAL_OK)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <BSP_SD_ReadBlocks_DMA+0x40>
	{
		return MSD_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e000      	b.n	8005f02 <BSP_SD_ReadBlocks_DMA+0x42>
	}
	else
	{
		return MSD_ERROR;
 8005f00:	2301      	movs	r3, #1
	}
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	2000002c 	.word	0x2000002c

08005f10 <BSP_SD_WriteBlocks_DMA>:
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
	uint8_t sd_state = MSD_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	75fb      	strb	r3, [r7, #23]

	// Invalidate the dma rx handle
	hsd1.hdmarx = NULL;
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <BSP_SD_WriteBlocks_DMA+0x4c>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40

	// Prepare the dma channel for a read operation
	sd_state = SD_DMAConfigTx(&hsd1);
 8005f26:	480d      	ldr	r0, [pc, #52]	; (8005f5c <BSP_SD_WriteBlocks_DMA+0x4c>)
 8005f28:	f000 f8c6 	bl	80060b8 <SD_DMAConfigTx>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	75fb      	strb	r3, [r7, #23]

	if(sd_state == HAL_OK)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d107      	bne.n	8005f46 <BSP_SD_WriteBlocks_DMA+0x36>
	{
		/* Write block(s) in DMA transfer mode */
		sd_state = HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	68f9      	ldr	r1, [r7, #12]
 8005f3c:	4807      	ldr	r0, [pc, #28]	; (8005f5c <BSP_SD_WriteBlocks_DMA+0x4c>)
 8005f3e:	f7fd fdad 	bl	8003a9c <HAL_SD_WriteBlocks_DMA>
 8005f42:	4603      	mov	r3, r0
 8005f44:	75fb      	strb	r3, [r7, #23]
	}

	if( sd_state == HAL_OK)
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <BSP_SD_WriteBlocks_DMA+0x40>
	{
		return MSD_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e000      	b.n	8005f52 <BSP_SD_WriteBlocks_DMA+0x42>
	}
	else
	{
		return MSD_ERROR;
 8005f50:	2301      	movs	r3, #1
	}

	return sd_state;
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	2000002c 	.word	0x2000002c

08005f60 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f64:	4805      	ldr	r0, [pc, #20]	; (8005f7c <BSP_SD_GetCardState+0x1c>)
 8005f66:	f7fe fa71 	bl	800444c <HAL_SD_GetCardState>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000002c 	.word	0x2000002c

08005f80 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4803      	ldr	r0, [pc, #12]	; (8005f98 <BSP_SD_GetCardInfo+0x18>)
 8005f8c:	f7fe f976 	bl	800427c <HAL_SD_GetCardInfo>
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	2000002c 	.word	0x2000002c

08005f9c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005fa4:	f000 f818 	bl	8005fd8 <BSP_SD_AbortCallback>
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005fb8:	f000 fa2a 	bl	8006410 <BSP_SD_WriteCpltCallback>
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005fcc:	f000 fa2c 	bl	8006428 <BSP_SD_ReadCpltCallback>
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0

}
 8005fdc:	bf00      	nop
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005fec:	2301      	movs	r3, #1
 8005fee:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	b2db      	uxtb	r3, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <BSP_SD_DMA_Tx_IRQHandler>:

/* USER CODE BEGIN AdditionalCode */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hsd1.hdmatx);
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <BSP_SD_DMA_Tx_IRQHandler+0x14>)
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	4618      	mov	r0, r3
 800600a:	f7fa ff70 	bl	8000eee <HAL_DMA_IRQHandler>
}
 800600e:	bf00      	nop
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	2000002c 	.word	0x2000002c

08006018 <BSP_SD_DMA_Rx_IRQHandler>:
/**
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hsd1.hdmarx);
 800601c:	4b03      	ldr	r3, [pc, #12]	; (800602c <BSP_SD_DMA_Rx_IRQHandler+0x14>)
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	4618      	mov	r0, r3
 8006022:	f7fa ff64 	bl	8000eee <HAL_DMA_IRQHandler>
}
 8006026:	bf00      	nop
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	2000002c 	.word	0x2000002c

08006030 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	73fb      	strb	r3, [r7, #15]

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 800603c:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <SD_DMAConfigRx+0x80>)
 800603e:	2207      	movs	r2, #7
 8006040:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006042:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <SD_DMAConfigRx+0x80>)
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006048:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <SD_DMAConfigRx+0x80>)
 800604a:	2200      	movs	r2, #0
 800604c:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800604e:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <SD_DMAConfigRx+0x80>)
 8006050:	2280      	movs	r2, #128	; 0x80
 8006052:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006054:	4b16      	ldr	r3, [pc, #88]	; (80060b0 <SD_DMAConfigRx+0x80>)
 8006056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800605a:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800605c:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <SD_DMAConfigRx+0x80>)
 800605e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006062:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8006064:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <SD_DMAConfigRx+0x80>)
 8006066:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800606a:	621a      	str	r2, [r3, #32]

  hdma_rx.Instance = DMA2_Channel4;
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <SD_DMAConfigRx+0x80>)
 800606e:	4a11      	ldr	r2, [pc, #68]	; (80060b4 <SD_DMAConfigRx+0x84>)
 8006070:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a0e      	ldr	r2, [pc, #56]	; (80060b0 <SD_DMAConfigRx+0x80>)
 8006076:	641a      	str	r2, [r3, #64]	; 0x40
 8006078:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <SD_DMAConfigRx+0x80>)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 800607e:	480c      	ldr	r0, [pc, #48]	; (80060b0 <SD_DMAConfigRx+0x80>)
 8006080:	f7fa feb6 	bl	8000df0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 8006084:	480a      	ldr	r0, [pc, #40]	; (80060b0 <SD_DMAConfigRx+0x80>)
 8006086:	f7fa fdc1 	bl	8000c0c <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 800608a:	4809      	ldr	r0, [pc, #36]	; (80060b0 <SD_DMAConfigRx+0x80>)
 800608c:	f7fa fd06 	bl	8000a9c <HAL_DMA_Init>
 8006090:	4603      	mov	r3, r0
 8006092:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2106      	movs	r1, #6
 8006098:	203b      	movs	r0, #59	; 0x3b
 800609a:	f7fa fcd5 	bl	8000a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800609e:	203b      	movs	r0, #59	; 0x3b
 80060a0:	f7fa fcee 	bl	8000a80 <HAL_NVIC_EnableIRQ>

  return (status);
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200021b8 	.word	0x200021b8
 80060b4:	40020444 	.word	0x40020444

080060b8 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80060c0:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060c2:	2207      	movs	r2, #7
 80060c4:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80060c6:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060c8:	2210      	movs	r2, #16
 80060ca:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80060cc:	4b19      	ldr	r3, [pc, #100]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80060d2:	4b18      	ldr	r3, [pc, #96]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060d8:	4b16      	ldr	r3, [pc, #88]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060de:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80060e0:	4b14      	ldr	r3, [pc, #80]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e6:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060ea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80060ee:	621a      	str	r2, [r3, #32]

  hdma_tx.Instance = DMA2_Channel4;
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060f2:	4a11      	ldr	r2, [pc, #68]	; (8006138 <SD_DMAConfigTx+0x80>)
 80060f4:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a0e      	ldr	r2, [pc, #56]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80060fc:	4a0d      	ldr	r2, [pc, #52]	; (8006134 <SD_DMAConfigTx+0x7c>)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 8006102:	480c      	ldr	r0, [pc, #48]	; (8006134 <SD_DMAConfigTx+0x7c>)
 8006104:	f7fa fe74 	bl	8000df0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 8006108:	480a      	ldr	r0, [pc, #40]	; (8006134 <SD_DMAConfigTx+0x7c>)
 800610a:	f7fa fd7f 	bl	8000c0c <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 800610e:	4809      	ldr	r0, [pc, #36]	; (8006134 <SD_DMAConfigTx+0x7c>)
 8006110:	f7fa fcc4 	bl	8000a9c <HAL_DMA_Init>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 8006118:	2200      	movs	r2, #0
 800611a:	2106      	movs	r1, #6
 800611c:	203b      	movs	r0, #59	; 0x3b
 800611e:	f7fa fc93 	bl	8000a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8006122:	203b      	movs	r0, #59	; 0x3b
 8006124:	f7fa fcac 	bl	8000a80 <HAL_NVIC_EnableIRQ>

  return (status);
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20002200 	.word	0x20002200
 8006138:	40020444 	.word	0x40020444

0800613c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006144:	f7fa fb98 	bl	8000878 <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800614a:	e006      	b.n	800615a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800614c:	f7ff ff08 	bl	8005f60 <BSP_SD_GetCardState>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006156:	2300      	movs	r3, #0
 8006158:	e009      	b.n	800616e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800615a:	f7fa fb8d 	bl	8000878 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d8f0      	bhi.n	800614c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <SD_CheckStatus+0x38>)
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006188:	f7ff feea 	bl	8005f60 <BSP_SD_GetCardState>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <SD_CheckStatus+0x38>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <SD_CheckStatus+0x38>)
 80061a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80061a2:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <SD_CheckStatus+0x38>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	b2db      	uxtb	r3, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000009 	.word	0x20000009

080061b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80061be:	f7ff fe59 	bl	8005e74 <BSP_SD_Init>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ffd4 	bl	8006178 <SD_CheckStatus>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <SD_initialize+0x34>)
 80061d6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80061d8:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <SD_initialize+0x34>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000009 	.word	0x20000009

080061ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff ffbd 	bl	8006178 <SD_CheckStatus>
 80061fe:	4603      	mov	r3, r0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800621c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006220:	f7ff ff8c 	bl	800613c <SD_CheckStatusWithTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	da01      	bge.n	800622e <SD_read+0x26>
  {
    return res;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	e03b      	b.n	80062a6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	68b8      	ldr	r0, [r7, #8]
 8006234:	f7ff fe44 	bl	8005ec0 <BSP_SD_ReadBlocks_DMA>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d132      	bne.n	80062a4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800623e:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <SD_read+0xa8>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006244:	f7fa fb18 	bl	8000878 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800624a:	bf00      	nop
 800624c:	4b18      	ldr	r3, [pc, #96]	; (80062b0 <SD_read+0xa8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <SD_read+0x5e>
 8006254:	f7fa fb10 	bl	8000878 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	f247 522f 	movw	r2, #29999	; 0x752f
 8006262:	4293      	cmp	r3, r2
 8006264:	d9f2      	bls.n	800624c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <SD_read+0xa8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
 8006272:	e017      	b.n	80062a4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <SD_read+0xa8>)
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800627a:	f7fa fafd 	bl	8000878 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006280:	e007      	b.n	8006292 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006282:	f7ff fe6d 	bl	8005f60 <BSP_SD_GetCardState>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <SD_read+0x8a>
          {
            res = RES_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006290:	e008      	b.n	80062a4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006292:	f7fa faf1 	bl	8000878 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f247 522f 	movw	r2, #29999	; 0x752f
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d9ee      	bls.n	8006282 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2000224c 	.word	0x2000224c

080062b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80062c8:	4b24      	ldr	r3, [pc, #144]	; (800635c <SD_write+0xa8>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062ce:	f247 5030 	movw	r0, #30000	; 0x7530
 80062d2:	f7ff ff33 	bl	800613c <SD_CheckStatusWithTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da01      	bge.n	80062e0 <SD_write+0x2c>
  {
    return res;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	e038      	b.n	8006352 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	68b8      	ldr	r0, [r7, #8]
 80062e6:	f7ff fe13 	bl	8005f10 <BSP_SD_WriteBlocks_DMA>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d12f      	bne.n	8006350 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80062f0:	f7fa fac2 	bl	8000878 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80062f6:	bf00      	nop
 80062f8:	4b18      	ldr	r3, [pc, #96]	; (800635c <SD_write+0xa8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d108      	bne.n	8006312 <SD_write+0x5e>
 8006300:	f7fa faba 	bl	8000878 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f247 522f 	movw	r2, #29999	; 0x752f
 800630e:	4293      	cmp	r3, r2
 8006310:	d9f2      	bls.n	80062f8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006312:	4b12      	ldr	r3, [pc, #72]	; (800635c <SD_write+0xa8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
 800631e:	e017      	b.n	8006350 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006320:	4b0e      	ldr	r3, [pc, #56]	; (800635c <SD_write+0xa8>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006326:	f7fa faa7 	bl	8000878 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800632c:	e007      	b.n	800633e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800632e:	f7ff fe17 	bl	8005f60 <BSP_SD_GetCardState>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <SD_write+0x8a>
          {
            res = RES_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	75fb      	strb	r3, [r7, #23]
            break;
 800633c:	e008      	b.n	8006350 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800633e:	f7fa fa9b 	bl	8000878 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	f247 522f 	movw	r2, #29999	; 0x752f
 800634c:	4293      	cmp	r3, r2
 800634e:	d9ee      	bls.n	800632e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20002248 	.word	0x20002248

08006360 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08c      	sub	sp, #48	; 0x30
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	603a      	str	r2, [r7, #0]
 800636a:	71fb      	strb	r3, [r7, #7]
 800636c:	460b      	mov	r3, r1
 800636e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006376:	4b25      	ldr	r3, [pc, #148]	; (800640c <SD_ioctl+0xac>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <SD_ioctl+0x28>
 8006384:	2303      	movs	r3, #3
 8006386:	e03c      	b.n	8006402 <SD_ioctl+0xa2>

  switch (cmd)
 8006388:	79bb      	ldrb	r3, [r7, #6]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d834      	bhi.n	80063f8 <SD_ioctl+0x98>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <SD_ioctl+0x34>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063ad 	.word	0x080063ad
 800639c:	080063c5 	.word	0x080063c5
 80063a0:	080063df 	.word	0x080063df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063aa:	e028      	b.n	80063fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80063ac:	f107 030c 	add.w	r3, r7, #12
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fde5 	bl	8005f80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063c2:	e01c      	b.n	80063fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80063c4:	f107 030c 	add.w	r3, r7, #12
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fdd9 	bl	8005f80 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063dc:	e00f      	b.n	80063fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80063de:	f107 030c 	add.w	r3, r7, #12
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fdcc 	bl	8005f80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	0a5a      	lsrs	r2, r3, #9
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063f6:	e002      	b.n	80063fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80063fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006402:	4618      	mov	r0, r3
 8006404:	3730      	adds	r7, #48	; 0x30
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000009 	.word	0x20000009

08006410 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <BSP_SD_WriteCpltCallback+0x14>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	20002248 	.word	0x20002248

08006428 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800642c:	4b03      	ldr	r3, [pc, #12]	; (800643c <BSP_SD_ReadCpltCallback+0x14>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	2000224c 	.word	0x2000224c

08006440 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <disk_status+0x30>)
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	79fa      	ldrb	r2, [r7, #7]
 8006458:	4905      	ldr	r1, [pc, #20]	; (8006470 <disk_status+0x30>)
 800645a:	440a      	add	r2, r1
 800645c:	7a12      	ldrb	r2, [r2, #8]
 800645e:	4610      	mov	r0, r2
 8006460:	4798      	blx	r3
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006466:	7bfb      	ldrb	r3, [r7, #15]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200022f8 	.word	0x200022f8

08006474 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <disk_initialize+0x48>)
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d111      	bne.n	80064b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	4a0b      	ldr	r2, [pc, #44]	; (80064bc <disk_initialize+0x48>)
 8006490:	2101      	movs	r1, #1
 8006492:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <disk_initialize+0x48>)
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	79fa      	ldrb	r2, [r7, #7]
 80064a2:	4906      	ldr	r1, [pc, #24]	; (80064bc <disk_initialize+0x48>)
 80064a4:	440a      	add	r2, r1
 80064a6:	7a12      	ldrb	r2, [r2, #8]
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	200022f8 	.word	0x200022f8

080064c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <disk_read+0x3c>)
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	689c      	ldr	r4, [r3, #8]
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	4a07      	ldr	r2, [pc, #28]	; (80064fc <disk_read+0x3c>)
 80064e0:	4413      	add	r3, r2
 80064e2:	7a18      	ldrb	r0, [r3, #8]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	47a0      	blx	r4
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd90      	pop	{r4, r7, pc}
 80064fa:	bf00      	nop
 80064fc:	200022f8 	.word	0x200022f8

08006500 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	4a0a      	ldr	r2, [pc, #40]	; (800653c <disk_write+0x3c>)
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68dc      	ldr	r4, [r3, #12]
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	4a07      	ldr	r2, [pc, #28]	; (800653c <disk_write+0x3c>)
 8006520:	4413      	add	r3, r2
 8006522:	7a18      	ldrb	r0, [r3, #8]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	47a0      	blx	r4
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006530:	7dfb      	ldrb	r3, [r7, #23]
}
 8006532:	4618      	mov	r0, r3
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd90      	pop	{r4, r7, pc}
 800653a:	bf00      	nop
 800653c:	200022f8 	.word	0x200022f8

08006540 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	603a      	str	r2, [r7, #0]
 800654a:	71fb      	strb	r3, [r7, #7]
 800654c:	460b      	mov	r3, r1
 800654e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	4a09      	ldr	r2, [pc, #36]	; (8006578 <disk_ioctl+0x38>)
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	79fa      	ldrb	r2, [r7, #7]
 800655e:	4906      	ldr	r1, [pc, #24]	; (8006578 <disk_ioctl+0x38>)
 8006560:	440a      	add	r2, r1
 8006562:	7a10      	ldrb	r0, [r2, #8]
 8006564:	79b9      	ldrb	r1, [r7, #6]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	4798      	blx	r3
 800656a:	4603      	mov	r3, r0
 800656c:	73fb      	strb	r3, [r7, #15]
  return res;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	200022f8 	.word	0x200022f8

0800657c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800658c:	89fb      	ldrh	r3, [r7, #14]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	b21a      	sxth	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	b21b      	sxth	r3, r3
 8006598:	4313      	orrs	r3, r2
 800659a:	b21b      	sxth	r3, r3
 800659c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800659e:	89fb      	ldrh	r3, [r7, #14]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3303      	adds	r3, #3
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	3202      	adds	r2, #2
 80065c4:	7812      	ldrb	r2, [r2, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	3201      	adds	r2, #1
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80065e4:	68fb      	ldr	r3, [r7, #12]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	887a      	ldrh	r2, [r7, #2]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	887b      	ldrh	r3, [r7, #2]
 800660c:	0a1b      	lsrs	r3, r3, #8
 800660e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	887a      	ldrh	r2, [r7, #2]
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	0a1b      	lsrs	r3, r3, #8
 8006654:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00d      	beq.n	80066b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	1c53      	adds	r3, r2, #1
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6179      	str	r1, [r7, #20]
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f1      	bne.n	800669a <mem_cpy+0x1a>
	}
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	617a      	str	r2, [r7, #20]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f3      	bne.n	80066d2 <mem_set+0x10>
}
 80066ea:	bf00      	nop
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	61fa      	str	r2, [r7, #28]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	4619      	mov	r1, r3
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	61ba      	str	r2, [r7, #24]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	1acb      	subs	r3, r1, r3
 8006724:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3b01      	subs	r3, #1
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <mem_cmp+0x40>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0eb      	beq.n	8006710 <mem_cmp+0x18>

	return r;
 8006738:	697b      	ldr	r3, [r7, #20]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3724      	adds	r7, #36	; 0x24
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006750:	e002      	b.n	8006758 <chk_chr+0x12>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3301      	adds	r3, #1
 8006756:	607b      	str	r3, [r7, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <chk_chr+0x26>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	4293      	cmp	r3, r2
 800676a:	d1f2      	bne.n	8006752 <chk_chr+0xc>
	return *str;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	781b      	ldrb	r3, [r3, #0]
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	e029      	b.n	80067e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006790:	4a27      	ldr	r2, [pc, #156]	; (8006830 <chk_lock+0xb4>)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	4413      	add	r3, r2
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01d      	beq.n	80067da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800679e:	4a24      	ldr	r2, [pc, #144]	; (8006830 <chk_lock+0xb4>)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	4413      	add	r3, r2
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d116      	bne.n	80067de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80067b0:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <chk_lock+0xb4>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	4413      	add	r3, r2
 80067b8:	3304      	adds	r3, #4
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d10c      	bne.n	80067de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067c4:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <chk_lock+0xb4>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	4413      	add	r3, r2
 80067cc:	3308      	adds	r3, #8
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d102      	bne.n	80067de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067d8:	e007      	b.n	80067ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80067da:	2301      	movs	r3, #1
 80067dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d9d2      	bls.n	8006790 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b0a      	cmp	r3, #10
 80067ee:	d109      	bne.n	8006804 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <chk_lock+0x80>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d101      	bne.n	8006800 <chk_lock+0x84>
 80067fc:	2300      	movs	r3, #0
 80067fe:	e010      	b.n	8006822 <chk_lock+0xa6>
 8006800:	2312      	movs	r3, #18
 8006802:	e00e      	b.n	8006822 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d108      	bne.n	800681c <chk_lock+0xa0>
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <chk_lock+0xb4>)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	4413      	add	r3, r2
 8006812:	330c      	adds	r3, #12
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681a:	d101      	bne.n	8006820 <chk_lock+0xa4>
 800681c:	2310      	movs	r3, #16
 800681e:	e000      	b.n	8006822 <chk_lock+0xa6>
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20002258 	.word	0x20002258

08006834 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	e002      	b.n	8006846 <enq_lock+0x12>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3301      	adds	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b09      	cmp	r3, #9
 800684a:	d806      	bhi.n	800685a <enq_lock+0x26>
 800684c:	4a09      	ldr	r2, [pc, #36]	; (8006874 <enq_lock+0x40>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	4413      	add	r3, r2
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f2      	bne.n	8006840 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b0a      	cmp	r3, #10
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20002258 	.word	0x20002258

08006878 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	e01f      	b.n	80068c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006888:	4a41      	ldr	r2, [pc, #260]	; (8006990 <inc_lock+0x118>)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	4413      	add	r3, r2
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d113      	bne.n	80068c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800689a:	4a3d      	ldr	r2, [pc, #244]	; (8006990 <inc_lock+0x118>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	4413      	add	r3, r2
 80068a2:	3304      	adds	r3, #4
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d109      	bne.n	80068c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80068ae:	4a38      	ldr	r2, [pc, #224]	; (8006990 <inc_lock+0x118>)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	4413      	add	r3, r2
 80068b6:	3308      	adds	r3, #8
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80068be:	429a      	cmp	r2, r3
 80068c0:	d006      	beq.n	80068d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b09      	cmp	r3, #9
 80068cc:	d9dc      	bls.n	8006888 <inc_lock+0x10>
 80068ce:	e000      	b.n	80068d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80068d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b0a      	cmp	r3, #10
 80068d6:	d132      	bne.n	800693e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e002      	b.n	80068e4 <inc_lock+0x6c>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b09      	cmp	r3, #9
 80068e8:	d806      	bhi.n	80068f8 <inc_lock+0x80>
 80068ea:	4a29      	ldr	r2, [pc, #164]	; (8006990 <inc_lock+0x118>)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	4413      	add	r3, r2
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f2      	bne.n	80068de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b0a      	cmp	r3, #10
 80068fc:	d101      	bne.n	8006902 <inc_lock+0x8a>
 80068fe:	2300      	movs	r3, #0
 8006900:	e040      	b.n	8006984 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	4922      	ldr	r1, [pc, #136]	; (8006990 <inc_lock+0x118>)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	440b      	add	r3, r1
 800690e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	491e      	ldr	r1, [pc, #120]	; (8006990 <inc_lock+0x118>)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	440b      	add	r3, r1
 800691c:	3304      	adds	r3, #4
 800691e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	695a      	ldr	r2, [r3, #20]
 8006924:	491a      	ldr	r1, [pc, #104]	; (8006990 <inc_lock+0x118>)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	440b      	add	r3, r1
 800692c:	3308      	adds	r3, #8
 800692e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006930:	4a17      	ldr	r2, [pc, #92]	; (8006990 <inc_lock+0x118>)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	4413      	add	r3, r2
 8006938:	330c      	adds	r3, #12
 800693a:	2200      	movs	r2, #0
 800693c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <inc_lock+0xe0>
 8006944:	4a12      	ldr	r2, [pc, #72]	; (8006990 <inc_lock+0x118>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	4413      	add	r3, r2
 800694c:	330c      	adds	r3, #12
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <inc_lock+0xe0>
 8006954:	2300      	movs	r3, #0
 8006956:	e015      	b.n	8006984 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d108      	bne.n	8006970 <inc_lock+0xf8>
 800695e:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <inc_lock+0x118>)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	4413      	add	r3, r2
 8006966:	330c      	adds	r3, #12
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	e001      	b.n	8006974 <inc_lock+0xfc>
 8006970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006974:	4906      	ldr	r1, [pc, #24]	; (8006990 <inc_lock+0x118>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	440b      	add	r3, r1
 800697c:	330c      	adds	r3, #12
 800697e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20002258 	.word	0x20002258

08006994 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3b01      	subs	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b09      	cmp	r3, #9
 80069a6:	d825      	bhi.n	80069f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <dec_lock+0x74>)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	4413      	add	r3, r2
 80069b0:	330c      	adds	r3, #12
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80069b6:	89fb      	ldrh	r3, [r7, #14]
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069bc:	d101      	bne.n	80069c2 <dec_lock+0x2e>
 80069be:	2300      	movs	r3, #0
 80069c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80069c2:	89fb      	ldrh	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <dec_lock+0x3a>
 80069c8:	89fb      	ldrh	r3, [r7, #14]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80069ce:	4a0e      	ldr	r2, [pc, #56]	; (8006a08 <dec_lock+0x74>)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	4413      	add	r3, r2
 80069d6:	330c      	adds	r3, #12
 80069d8:	89fa      	ldrh	r2, [r7, #14]
 80069da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d105      	bne.n	80069ee <dec_lock+0x5a>
 80069e2:	4a09      	ldr	r2, [pc, #36]	; (8006a08 <dec_lock+0x74>)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	4413      	add	r3, r2
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	737b      	strb	r3, [r7, #13]
 80069f2:	e001      	b.n	80069f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80069f4:	2302      	movs	r3, #2
 80069f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80069f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20002258 	.word	0x20002258

08006a0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e010      	b.n	8006a3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a1a:	4a0d      	ldr	r2, [pc, #52]	; (8006a50 <clear_lock+0x44>)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	4413      	add	r3, r2
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d105      	bne.n	8006a36 <clear_lock+0x2a>
 8006a2a:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <clear_lock+0x44>)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	4413      	add	r3, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b09      	cmp	r3, #9
 8006a40:	d9eb      	bls.n	8006a1a <clear_lock+0xe>
	}
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20002258 	.word	0x20002258

08006a54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	78db      	ldrb	r3, [r3, #3]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d034      	beq.n	8006ad2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7858      	ldrb	r0, [r3, #1]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a78:	2301      	movs	r3, #1
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	f7ff fd40 	bl	8006500 <disk_write>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]
 8006a8a:	e022      	b.n	8006ad2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d217      	bcs.n	8006ad2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	789b      	ldrb	r3, [r3, #2]
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	e010      	b.n	8006acc <sync_window+0x78>
					wsect += fs->fsize;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	7858      	ldrb	r0, [r3, #1]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006abe:	2301      	movs	r3, #1
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	f7ff fd1d 	bl	8006500 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d8eb      	bhi.n	8006aaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d01b      	beq.n	8006b2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ffad 	bl	8006a54 <sync_window>
 8006afa:	4603      	mov	r3, r0
 8006afc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7858      	ldrb	r0, [r3, #1]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b0e:	2301      	movs	r3, #1
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	f7ff fcd5 	bl	80064c0 <disk_read>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ff87 	bl	8006a54 <sync_window>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d159      	bne.n	8006c04 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d149      	bne.n	8006bec <sync_fs+0xb4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d145      	bne.n	8006bec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	899b      	ldrh	r3, [r3, #12]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f7ff fda8 	bl	80066c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3334      	adds	r3, #52	; 0x34
 8006b76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b7a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fd37 	bl	80065f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3334      	adds	r3, #52	; 0x34
 8006b88:	4921      	ldr	r1, [pc, #132]	; (8006c10 <sync_fs+0xd8>)
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fd4c 	bl	8006628 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3334      	adds	r3, #52	; 0x34
 8006b94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b98:	491e      	ldr	r1, [pc, #120]	; (8006c14 <sync_fs+0xdc>)
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff fd44 	bl	8006628 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3334      	adds	r3, #52	; 0x34
 8006ba4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7ff fd3a 	bl	8006628 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3334      	adds	r3, #52	; 0x34
 8006bb8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7ff fd30 	bl	8006628 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	7858      	ldrb	r0, [r3, #1]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be0:	2301      	movs	r3, #1
 8006be2:	f7ff fc8d 	bl	8006500 <disk_write>
			fs->fsi_flag = 0;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff fca3 	bl	8006540 <disk_ioctl>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <sync_fs+0xcc>
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	41615252 	.word	0x41615252
 8006c14:	61417272 	.word	0x61417272

08006c18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	3b02      	subs	r3, #2
 8006c26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	3b02      	subs	r3, #2
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d301      	bcc.n	8006c38 <clust2sect+0x20>
 8006c34:	2300      	movs	r3, #0
 8006c36:	e008      	b.n	8006c4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	895b      	ldrh	r3, [r3, #10]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	fb03 f202 	mul.w	r2, r3, r2
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4413      	add	r3, r2
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d904      	bls.n	8006c76 <get_fat+0x20>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d302      	bcc.n	8006c7c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c76:	2301      	movs	r3, #1
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e0bb      	b.n	8006df4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	f000 8083 	beq.w	8006d92 <get_fat+0x13c>
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	f300 80a7 	bgt.w	8006de0 <get_fat+0x18a>
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d002      	beq.n	8006c9c <get_fat+0x46>
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d056      	beq.n	8006d48 <get_fat+0xf2>
 8006c9a:	e0a1      	b.n	8006de0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	899b      	ldrh	r3, [r3, #12]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cba:	4413      	add	r3, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6938      	ldr	r0, [r7, #16]
 8006cc0:	f7ff ff0c 	bl	8006adc <move_window>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 808d 	bne.w	8006de6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	60fa      	str	r2, [r7, #12]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	8992      	ldrh	r2, [r2, #12]
 8006cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cda:	fb01 f202 	mul.w	r2, r1, r2
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ce8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	899b      	ldrh	r3, [r3, #12]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6938      	ldr	r0, [r7, #16]
 8006d00:	f7ff feec 	bl	8006adc <move_window>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d16f      	bne.n	8006dea <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	899b      	ldrh	r3, [r3, #12]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d16:	fb01 f202 	mul.w	r2, r1, r2
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	461a      	mov	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <get_fat+0xe8>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	091b      	lsrs	r3, r3, #4
 8006d3c:	e002      	b.n	8006d44 <get_fat+0xee>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d44:	617b      	str	r3, [r7, #20]
			break;
 8006d46:	e055      	b.n	8006df4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	899b      	ldrh	r3, [r3, #12]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	4619      	mov	r1, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6938      	ldr	r0, [r7, #16]
 8006d62:	f7ff febb 	bl	8006adc <move_window>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d140      	bne.n	8006dee <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	8992      	ldrh	r2, [r2, #12]
 8006d7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d7e:	fb00 f202 	mul.w	r2, r0, r2
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	440b      	add	r3, r1
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff fbf8 	bl	800657c <ld_word>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	617b      	str	r3, [r7, #20]
			break;
 8006d90:	e030      	b.n	8006df4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	899b      	ldrh	r3, [r3, #12]
 8006d9a:	089b      	lsrs	r3, r3, #2
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006da6:	4413      	add	r3, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	6938      	ldr	r0, [r7, #16]
 8006dac:	f7ff fe96 	bl	8006adc <move_window>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d11d      	bne.n	8006df2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	8992      	ldrh	r2, [r2, #12]
 8006dc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dc8:	fb00 f202 	mul.w	r2, r0, r2
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	440b      	add	r3, r1
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff fbeb 	bl	80065ac <ld_dword>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ddc:	617b      	str	r3, [r7, #20]
			break;
 8006dde:	e009      	b.n	8006df4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006de0:	2301      	movs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e006      	b.n	8006df4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006de6:	bf00      	nop
 8006de8:	e004      	b.n	8006df4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006df2:	bf00      	nop
		}
	}

	return val;
 8006df4:	697b      	ldr	r3, [r7, #20]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006dfe:	b590      	push	{r4, r7, lr}
 8006e00:	b089      	sub	sp, #36	; 0x24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f240 8102 	bls.w	800701a <put_fat+0x21c>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	f080 80fc 	bcs.w	800701a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	f000 80b6 	beq.w	8006f98 <put_fat+0x19a>
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	f300 80fd 	bgt.w	800702c <put_fat+0x22e>
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d003      	beq.n	8006e3e <put_fat+0x40>
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	f000 8083 	beq.w	8006f42 <put_fat+0x144>
 8006e3c:	e0f6      	b.n	800702c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4413      	add	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	899b      	ldrh	r3, [r3, #12]
 8006e54:	4619      	mov	r1, r3
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff fe3b 	bl	8006adc <move_window>
 8006e66:	4603      	mov	r3, r0
 8006e68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e6a:	7ffb      	ldrb	r3, [r7, #31]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f040 80d6 	bne.w	800701e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	61ba      	str	r2, [r7, #24]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	8992      	ldrh	r2, [r2, #12]
 8006e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e86:	fb00 f202 	mul.w	r2, r0, r2
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <put_fat+0xb8>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	b25b      	sxtb	r3, r3
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	b25a      	sxtb	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b25b      	sxtb	r3, r3
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	e001      	b.n	8006eba <put_fat+0xbc>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	899b      	ldrh	r3, [r3, #12]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fdff 	bl	8006adc <move_window>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ee2:	7ffb      	ldrb	r3, [r7, #31]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 809c 	bne.w	8007022 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	899b      	ldrh	r3, [r3, #12]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006efc:	fb00 f202 	mul.w	r2, r0, r2
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	440b      	add	r3, r1
 8006f04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <put_fat+0x11a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	e00e      	b.n	8006f36 <put_fat+0x138>
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	f023 030f 	bic.w	r3, r3, #15
 8006f22:	b25a      	sxtb	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	70da      	strb	r2, [r3, #3]
			break;
 8006f40:	e074      	b.n	800702c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	899b      	ldrh	r3, [r3, #12]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f56:	4413      	add	r3, r2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff fdbe 	bl	8006adc <move_window>
 8006f60:	4603      	mov	r3, r0
 8006f62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f64:	7ffb      	ldrb	r3, [r7, #31]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d15d      	bne.n	8007026 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	8992      	ldrh	r2, [r2, #12]
 8006f78:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f7c:	fb00 f202 	mul.w	r2, r0, r2
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	440b      	add	r3, r1
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	b292      	uxth	r2, r2
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fb31 	bl	80065f2 <st_word>
			fs->wflag = 1;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	70da      	strb	r2, [r3, #3]
			break;
 8006f96:	e049      	b.n	800702c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	899b      	ldrh	r3, [r3, #12]
 8006fa0:	089b      	lsrs	r3, r3, #2
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fac:	4413      	add	r3, r2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fd93 	bl	8006adc <move_window>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fba:	7ffb      	ldrb	r3, [r7, #31]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d134      	bne.n	800702a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	8992      	ldrh	r2, [r2, #12]
 8006fd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fd8:	fb00 f202 	mul.w	r2, r0, r2
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	440b      	add	r3, r1
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff fae3 	bl	80065ac <ld_dword>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006fec:	4323      	orrs	r3, r4
 8006fee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	8992      	ldrh	r2, [r2, #12]
 8006ffe:	fbb3 f0f2 	udiv	r0, r3, r2
 8007002:	fb00 f202 	mul.w	r2, r0, r2
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	440b      	add	r3, r1
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff fb0b 	bl	8006628 <st_dword>
			fs->wflag = 1;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	70da      	strb	r2, [r3, #3]
			break;
 8007018:	e008      	b.n	800702c <put_fat+0x22e>
		}
	}
 800701a:	bf00      	nop
 800701c:	e006      	b.n	800702c <put_fat+0x22e>
			if (res != FR_OK) break;
 800701e:	bf00      	nop
 8007020:	e004      	b.n	800702c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007022:	bf00      	nop
 8007024:	e002      	b.n	800702c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <put_fat+0x22e>
			if (res != FR_OK) break;
 800702a:	bf00      	nop
	return res;
 800702c:	7ffb      	ldrb	r3, [r7, #31]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3724      	adds	r7, #36	; 0x24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd90      	pop	{r4, r7, pc}

08007036 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b088      	sub	sp, #32
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d904      	bls.n	800705c <remove_chain+0x26>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d301      	bcc.n	8007060 <remove_chain+0x2a>
 800705c:	2302      	movs	r3, #2
 800705e:	e04b      	b.n	80070f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00c      	beq.n	8007080 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007066:	f04f 32ff 	mov.w	r2, #4294967295
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	69b8      	ldr	r0, [r7, #24]
 800706e:	f7ff fec6 	bl	8006dfe <put_fat>
 8007072:	4603      	mov	r3, r0
 8007074:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <remove_chain+0x4a>
 800707c:	7ffb      	ldrb	r3, [r7, #31]
 800707e:	e03b      	b.n	80070f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fde7 	bl	8006c56 <get_fat>
 8007088:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d031      	beq.n	80070f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <remove_chain+0x64>
 8007096:	2302      	movs	r3, #2
 8007098:	e02e      	b.n	80070f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d101      	bne.n	80070a6 <remove_chain+0x70>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e028      	b.n	80070f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80070a6:	2200      	movs	r2, #0
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	69b8      	ldr	r0, [r7, #24]
 80070ac:	f7ff fea7 	bl	8006dfe <put_fat>
 80070b0:	4603      	mov	r3, r0
 80070b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80070b4:	7ffb      	ldrb	r3, [r7, #31]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <remove_chain+0x88>
 80070ba:	7ffb      	ldrb	r3, [r7, #31]
 80070bc:	e01c      	b.n	80070f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	3b02      	subs	r3, #2
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d20b      	bcs.n	80070e4 <remove_chain+0xae>
			fs->free_clst++;
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	791b      	ldrb	r3, [r3, #4]
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d3c6      	bcc.n	8007080 <remove_chain+0x4a>
 80070f2:	e000      	b.n	80070f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80070f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <create_chain+0x2c>
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d31b      	bcc.n	8007164 <create_chain+0x64>
 800712c:	2301      	movs	r3, #1
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	e018      	b.n	8007164 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff fd8e 	bl	8006c56 <get_fat>
 800713a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d801      	bhi.n	8007146 <create_chain+0x46>
 8007142:	2301      	movs	r3, #1
 8007144:	e070      	b.n	8007228 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d101      	bne.n	8007152 <create_chain+0x52>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	e06a      	b.n	8007228 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	429a      	cmp	r2, r3
 800715a:	d201      	bcs.n	8007160 <create_chain+0x60>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	e063      	b.n	8007228 <create_chain+0x128>
		scl = clst;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3301      	adds	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	429a      	cmp	r2, r3
 8007176:	d307      	bcc.n	8007188 <create_chain+0x88>
				ncl = 2;
 8007178:	2302      	movs	r3, #2
 800717a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	429a      	cmp	r2, r3
 8007182:	d901      	bls.n	8007188 <create_chain+0x88>
 8007184:	2300      	movs	r3, #0
 8007186:	e04f      	b.n	8007228 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007188:	69f9      	ldr	r1, [r7, #28]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fd63 	bl	8006c56 <get_fat>
 8007190:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00e      	beq.n	80071b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d003      	beq.n	80071a6 <create_chain+0xa6>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a4:	d101      	bne.n	80071aa <create_chain+0xaa>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	e03e      	b.n	8007228 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d1da      	bne.n	8007168 <create_chain+0x68>
 80071b2:	2300      	movs	r3, #0
 80071b4:	e038      	b.n	8007228 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80071b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295
 80071bc:	69f9      	ldr	r1, [r7, #28]
 80071be:	6938      	ldr	r0, [r7, #16]
 80071c0:	f7ff fe1d 	bl	8006dfe <put_fat>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <create_chain+0xe2>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6938      	ldr	r0, [r7, #16]
 80071da:	f7ff fe10 	bl	8006dfe <put_fat>
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d116      	bne.n	8007216 <create_chain+0x116>
		fs->last_clst = ncl;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	3b02      	subs	r3, #2
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d804      	bhi.n	8007206 <create_chain+0x106>
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	1e5a      	subs	r2, r3, #1
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	791b      	ldrb	r3, [r3, #4]
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	b2da      	uxtb	r2, r3
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	711a      	strb	r2, [r3, #4]
 8007214:	e007      	b.n	8007226 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d102      	bne.n	8007222 <create_chain+0x122>
 800721c:	f04f 33ff 	mov.w	r3, #4294967295
 8007220:	e000      	b.n	8007224 <create_chain+0x124>
 8007222:	2301      	movs	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007226:	69fb      	ldr	r3, [r7, #28]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007246:	d204      	bcs.n	8007252 <dir_sdi+0x22>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007252:	2302      	movs	r3, #2
 8007254:	e071      	b.n	800733a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <dir_sdi+0x46>
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d902      	bls.n	8007276 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10c      	bne.n	8007296 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	8912      	ldrh	r2, [r2, #8]
 8007284:	4293      	cmp	r3, r2
 8007286:	d301      	bcc.n	800728c <dir_sdi+0x5c>
 8007288:	2302      	movs	r3, #2
 800728a:	e056      	b.n	800733a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	61da      	str	r2, [r3, #28]
 8007294:	e02d      	b.n	80072f2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	895b      	ldrh	r3, [r3, #10]
 800729a:	461a      	mov	r2, r3
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	899b      	ldrh	r3, [r3, #12]
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80072a6:	e019      	b.n	80072dc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6979      	ldr	r1, [r7, #20]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fcd2 	bl	8006c56 <get_fat>
 80072b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d101      	bne.n	80072c0 <dir_sdi+0x90>
 80072bc:	2301      	movs	r3, #1
 80072be:	e03c      	b.n	800733a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d904      	bls.n	80072d0 <dir_sdi+0xa0>
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d301      	bcc.n	80072d4 <dir_sdi+0xa4>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e032      	b.n	800733a <dir_sdi+0x10a>
			ofs -= csz;
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d2e1      	bcs.n	80072a8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80072e4:	6979      	ldr	r1, [r7, #20]
 80072e6:	6938      	ldr	r0, [r7, #16]
 80072e8:	f7ff fc96 	bl	8006c18 <clust2sect>
 80072ec:	4602      	mov	r2, r0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <dir_sdi+0xd4>
 8007300:	2302      	movs	r3, #2
 8007302:	e01a      	b.n	800733a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	899b      	ldrh	r3, [r3, #12]
 800730c:	4619      	mov	r1, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	fbb3 f3f1 	udiv	r3, r3, r1
 8007314:	441a      	add	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	899b      	ldrh	r3, [r3, #12]
 8007324:	461a      	mov	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	fbb3 f0f2 	udiv	r0, r3, r2
 800732c:	fb00 f202 	mul.w	r2, r0, r2
 8007330:	1a9b      	subs	r3, r3, r2
 8007332:	18ca      	adds	r2, r1, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	3320      	adds	r3, #32
 8007358:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <dir_next+0x28>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007368:	d301      	bcc.n	800736e <dir_next+0x2c>
 800736a:	2304      	movs	r3, #4
 800736c:	e0bb      	b.n	80074e6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	899b      	ldrh	r3, [r3, #12]
 8007372:	461a      	mov	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	fbb3 f1f2 	udiv	r1, r3, r2
 800737a:	fb01 f202 	mul.w	r2, r1, r2
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 809d 	bne.w	80074c0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10b      	bne.n	80073b0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	8912      	ldrh	r2, [r2, #8]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	f0c0 808d 	bcc.w	80074c0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	61da      	str	r2, [r3, #28]
 80073ac:	2304      	movs	r3, #4
 80073ae:	e09a      	b.n	80074e6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	899b      	ldrh	r3, [r3, #12]
 80073b4:	461a      	mov	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	8952      	ldrh	r2, [r2, #10]
 80073c0:	3a01      	subs	r2, #1
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d17b      	bne.n	80074c0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7ff fc40 	bl	8006c56 <get_fat>
 80073d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d801      	bhi.n	80073e2 <dir_next+0xa0>
 80073de:	2302      	movs	r3, #2
 80073e0:	e081      	b.n	80074e6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d101      	bne.n	80073ee <dir_next+0xac>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e07b      	b.n	80074e6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d359      	bcc.n	80074ac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d104      	bne.n	8007408 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	61da      	str	r2, [r3, #28]
 8007404:	2304      	movs	r3, #4
 8007406:	e06e      	b.n	80074e6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	4619      	mov	r1, r3
 8007410:	4610      	mov	r0, r2
 8007412:	f7ff fe75 	bl	8007100 <create_chain>
 8007416:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <dir_next+0xe0>
 800741e:	2307      	movs	r3, #7
 8007420:	e061      	b.n	80074e6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <dir_next+0xea>
 8007428:	2302      	movs	r3, #2
 800742a:	e05c      	b.n	80074e6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d101      	bne.n	8007438 <dir_next+0xf6>
 8007434:	2301      	movs	r3, #1
 8007436:	e056      	b.n	80074e6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fb0b 	bl	8006a54 <sync_window>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <dir_next+0x106>
 8007444:	2301      	movs	r3, #1
 8007446:	e04e      	b.n	80074e6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	899b      	ldrh	r3, [r3, #12]
 8007452:	461a      	mov	r2, r3
 8007454:	2100      	movs	r1, #0
 8007456:	f7ff f934 	bl	80066c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	6979      	ldr	r1, [r7, #20]
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff fbd9 	bl	8006c18 <clust2sect>
 8007466:	4602      	mov	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	631a      	str	r2, [r3, #48]	; 0x30
 800746c:	e012      	b.n	8007494 <dir_next+0x152>
						fs->wflag = 1;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff faed 	bl	8006a54 <sync_window>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <dir_next+0x142>
 8007480:	2301      	movs	r3, #1
 8007482:	e030      	b.n	80074e6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	3301      	adds	r3, #1
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	631a      	str	r2, [r3, #48]	; 0x30
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	895b      	ldrh	r3, [r3, #10]
 8007498:	461a      	mov	r2, r3
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4293      	cmp	r3, r2
 800749e:	d3e6      	bcc.n	800746e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80074b2:	6979      	ldr	r1, [r7, #20]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fbaf 	bl	8006c18 <clust2sect>
 80074ba:	4602      	mov	r2, r0
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	899b      	ldrh	r3, [r3, #12]
 80074d0:	461a      	mov	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80074d8:	fb00 f202 	mul.w	r2, r0, r2
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	18ca      	adds	r2, r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80074fe:	2100      	movs	r1, #0
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fe95 	bl	8007230 <dir_sdi>
 8007506:	4603      	mov	r3, r0
 8007508:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d12b      	bne.n	8007568 <dir_alloc+0x7a>
		n = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	4619      	mov	r1, r3
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff fade 	bl	8006adc <move_window>
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d11d      	bne.n	8007566 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2be5      	cmp	r3, #229	; 0xe5
 8007532:	d004      	beq.n	800753e <dir_alloc+0x50>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d107      	bne.n	800754e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3301      	adds	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d102      	bne.n	8007552 <dir_alloc+0x64>
 800754c:	e00c      	b.n	8007568 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800754e:	2300      	movs	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007552:	2101      	movs	r1, #1
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fef4 	bl	8007342 <dir_next>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0d7      	beq.n	8007514 <dir_alloc+0x26>
 8007564:	e000      	b.n	8007568 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007566:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b04      	cmp	r3, #4
 800756c:	d101      	bne.n	8007572 <dir_alloc+0x84>
 800756e:	2307      	movs	r3, #7
 8007570:	75fb      	strb	r3, [r7, #23]
	return res;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	331a      	adds	r3, #26
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fff6 	bl	800657c <ld_word>
 8007590:	4603      	mov	r3, r0
 8007592:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b03      	cmp	r3, #3
 800759a:	d109      	bne.n	80075b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	3314      	adds	r3, #20
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe ffeb 	bl	800657c <ld_word>
 80075a6:	4603      	mov	r3, r0
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80075b0:	68fb      	ldr	r3, [r7, #12]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	331a      	adds	r3, #26
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	b292      	uxth	r2, r2
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff f80e 	bl	80065f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d109      	bne.n	80075f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f103 0214 	add.w	r2, r3, #20
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7ff f800 	bl	80065f2 <st_word>
	}
}
 80075f2:	bf00      	nop
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fe10 	bl	8007230 <dir_sdi>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <dir_find+0x24>
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	e03e      	b.n	800769c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	4619      	mov	r1, r3
 8007624:	6938      	ldr	r0, [r7, #16]
 8007626:	f7ff fa59 	bl	8006adc <move_window>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d12f      	bne.n	8007694 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <dir_find+0x4e>
 8007642:	2304      	movs	r3, #4
 8007644:	75fb      	strb	r3, [r7, #23]
 8007646:	e028      	b.n	800769a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	330b      	adds	r3, #11
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007654:	b2da      	uxtb	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	330b      	adds	r3, #11
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <dir_find+0x86>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a18      	ldr	r0, [r3, #32]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3324      	adds	r3, #36	; 0x24
 8007672:	220b      	movs	r2, #11
 8007674:	4619      	mov	r1, r3
 8007676:	f7ff f83f 	bl	80066f8 <mem_cmp>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007680:	2100      	movs	r1, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff fe5d 	bl	8007342 <dir_next>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0c5      	beq.n	800761e <dir_find+0x24>
 8007692:	e002      	b.n	800769a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007698:	bf00      	nop

	return res;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80076b2:	2101      	movs	r1, #1
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff ff1a 	bl	80074ee <dir_alloc>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11c      	bne.n	80076fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4619      	mov	r1, r3
 80076ca:	68b8      	ldr	r0, [r7, #8]
 80076cc:	f7ff fa06 	bl	8006adc <move_window>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d111      	bne.n	80076fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	2220      	movs	r2, #32
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe ffed 	bl	80066c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a18      	ldr	r0, [r3, #32]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3324      	adds	r3, #36	; 0x24
 80076f0:	220b      	movs	r2, #11
 80076f2:	4619      	mov	r1, r3
 80076f4:	f7fe ffc4 	bl	8006680 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2201      	movs	r2, #1
 80076fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3324      	adds	r3, #36	; 0x24
 800771c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800771e:	220b      	movs	r2, #11
 8007720:	2120      	movs	r1, #32
 8007722:	68b8      	ldr	r0, [r7, #8]
 8007724:	f7fe ffcd 	bl	80066c2 <mem_set>
	si = i = 0; ni = 8;
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	2308      	movs	r3, #8
 8007732:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	61fa      	str	r2, [r7, #28]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007742:	7efb      	ldrb	r3, [r7, #27]
 8007744:	2b20      	cmp	r3, #32
 8007746:	d94e      	bls.n	80077e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007748:	7efb      	ldrb	r3, [r7, #27]
 800774a:	2b2f      	cmp	r3, #47	; 0x2f
 800774c:	d006      	beq.n	800775c <create_name+0x54>
 800774e:	7efb      	ldrb	r3, [r7, #27]
 8007750:	2b5c      	cmp	r3, #92	; 0x5c
 8007752:	d110      	bne.n	8007776 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007754:	e002      	b.n	800775c <create_name+0x54>
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	3301      	adds	r3, #1
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	4413      	add	r3, r2
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b2f      	cmp	r3, #47	; 0x2f
 8007766:	d0f6      	beq.n	8007756 <create_name+0x4e>
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b5c      	cmp	r3, #92	; 0x5c
 8007772:	d0f0      	beq.n	8007756 <create_name+0x4e>
			break;
 8007774:	e038      	b.n	80077e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007776:	7efb      	ldrb	r3, [r7, #27]
 8007778:	2b2e      	cmp	r3, #46	; 0x2e
 800777a:	d003      	beq.n	8007784 <create_name+0x7c>
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	429a      	cmp	r2, r3
 8007782:	d30c      	bcc.n	800779e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b0b      	cmp	r3, #11
 8007788:	d002      	beq.n	8007790 <create_name+0x88>
 800778a:	7efb      	ldrb	r3, [r7, #27]
 800778c:	2b2e      	cmp	r3, #46	; 0x2e
 800778e:	d001      	beq.n	8007794 <create_name+0x8c>
 8007790:	2306      	movs	r3, #6
 8007792:	e044      	b.n	800781e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007794:	2308      	movs	r3, #8
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	230b      	movs	r3, #11
 800779a:	617b      	str	r3, [r7, #20]
			continue;
 800779c:	e022      	b.n	80077e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800779e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da04      	bge.n	80077b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80077a6:	7efb      	ldrb	r3, [r7, #27]
 80077a8:	3b80      	subs	r3, #128	; 0x80
 80077aa:	4a1f      	ldr	r2, [pc, #124]	; (8007828 <create_name+0x120>)
 80077ac:	5cd3      	ldrb	r3, [r2, r3]
 80077ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077b0:	7efb      	ldrb	r3, [r7, #27]
 80077b2:	4619      	mov	r1, r3
 80077b4:	481d      	ldr	r0, [pc, #116]	; (800782c <create_name+0x124>)
 80077b6:	f7fe ffc6 	bl	8006746 <chk_chr>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <create_name+0xbc>
 80077c0:	2306      	movs	r3, #6
 80077c2:	e02c      	b.n	800781e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80077c4:	7efb      	ldrb	r3, [r7, #27]
 80077c6:	2b60      	cmp	r3, #96	; 0x60
 80077c8:	d905      	bls.n	80077d6 <create_name+0xce>
 80077ca:	7efb      	ldrb	r3, [r7, #27]
 80077cc:	2b7a      	cmp	r3, #122	; 0x7a
 80077ce:	d802      	bhi.n	80077d6 <create_name+0xce>
 80077d0:	7efb      	ldrb	r3, [r7, #27]
 80077d2:	3b20      	subs	r3, #32
 80077d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	613a      	str	r2, [r7, #16]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	4413      	add	r3, r2
 80077e0:	7efa      	ldrb	r2, [r7, #27]
 80077e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80077e4:	e7a6      	b.n	8007734 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80077e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	441a      	add	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <create_name+0xf4>
 80077f8:	2306      	movs	r3, #6
 80077fa:	e010      	b.n	800781e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2be5      	cmp	r3, #229	; 0xe5
 8007802:	d102      	bne.n	800780a <create_name+0x102>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2205      	movs	r2, #5
 8007808:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800780a:	7efb      	ldrb	r3, [r7, #27]
 800780c:	2b20      	cmp	r3, #32
 800780e:	d801      	bhi.n	8007814 <create_name+0x10c>
 8007810:	2204      	movs	r2, #4
 8007812:	e000      	b.n	8007816 <create_name+0x10e>
 8007814:	2200      	movs	r2, #0
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	330b      	adds	r3, #11
 800781a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800781c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800781e:	4618      	mov	r0, r3
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	0800b1ec 	.word	0x0800b1ec
 800782c:	0800b110 	.word	0x0800b110

08007830 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007844:	e002      	b.n	800784c <follow_path+0x1c>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	3301      	adds	r3, #1
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b2f      	cmp	r3, #47	; 0x2f
 8007852:	d0f8      	beq.n	8007846 <follow_path+0x16>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b5c      	cmp	r3, #92	; 0x5c
 800785a:	d0f4      	beq.n	8007846 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2200      	movs	r2, #0
 8007860:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b1f      	cmp	r3, #31
 8007868:	d80a      	bhi.n	8007880 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2280      	movs	r2, #128	; 0x80
 800786e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007872:	2100      	movs	r1, #0
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fcdb 	bl	8007230 <dir_sdi>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]
 800787e:	e048      	b.n	8007912 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007880:	463b      	mov	r3, r7
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ff3f 	bl	8007708 <create_name>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d139      	bne.n	8007908 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff feb0 	bl	80075fa <dir_find>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d12c      	bne.n	800790c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d127      	bne.n	800790c <follow_path+0xdc>
 80078bc:	2305      	movs	r3, #5
 80078be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80078c0:	e024      	b.n	800790c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d121      	bne.n	8007910 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	799b      	ldrb	r3, [r3, #6]
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80078d8:	2305      	movs	r3, #5
 80078da:	75fb      	strb	r3, [r7, #23]
 80078dc:	e019      	b.n	8007912 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	8992      	ldrh	r2, [r2, #12]
 80078ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80078f0:	fb00 f202 	mul.w	r2, r0, r2
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	440b      	add	r3, r1
 80078f8:	4619      	mov	r1, r3
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff fe3e 	bl	800757c <ld_clust>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007906:	e7bb      	b.n	8007880 <follow_path+0x50>
			if (res != FR_OK) break;
 8007908:	bf00      	nop
 800790a:	e002      	b.n	8007912 <follow_path+0xe2>
				break;
 800790c:	bf00      	nop
 800790e:	e000      	b.n	8007912 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007910:	bf00      	nop
			}
		}
	}

	return res;
 8007912:	7dfb      	ldrb	r3, [r7, #23]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d031      	beq.n	8007996 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e002      	b.n	8007940 <get_ldnumber+0x24>
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	3301      	adds	r3, #1
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b20      	cmp	r3, #32
 8007946:	d903      	bls.n	8007950 <get_ldnumber+0x34>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b3a      	cmp	r3, #58	; 0x3a
 800794e:	d1f4      	bne.n	800793a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b3a      	cmp	r3, #58	; 0x3a
 8007956:	d11c      	bne.n	8007992 <get_ldnumber+0x76>
			tp = *path;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	60fa      	str	r2, [r7, #12]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	3b30      	subs	r3, #48	; 0x30
 8007968:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b09      	cmp	r3, #9
 800796e:	d80e      	bhi.n	800798e <get_ldnumber+0x72>
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	429a      	cmp	r2, r3
 8007976:	d10a      	bne.n	800798e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d107      	bne.n	800798e <get_ldnumber+0x72>
					vol = (int)i;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	3301      	adds	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	e002      	b.n	8007998 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007996:	693b      	ldr	r3, [r7, #16]
}
 8007998:	4618      	mov	r0, r3
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	70da      	strb	r2, [r3, #3]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff f88c 	bl	8006adc <move_window>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <check_fs+0x2a>
 80079ca:	2304      	movs	r3, #4
 80079cc:	e038      	b.n	8007a40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3334      	adds	r3, #52	; 0x34
 80079d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fdd0 	bl	800657c <ld_word>
 80079dc:	4603      	mov	r3, r0
 80079de:	461a      	mov	r2, r3
 80079e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d001      	beq.n	80079ec <check_fs+0x48>
 80079e8:	2303      	movs	r3, #3
 80079ea:	e029      	b.n	8007a40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079f2:	2be9      	cmp	r3, #233	; 0xe9
 80079f4:	d009      	beq.n	8007a0a <check_fs+0x66>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079fc:	2beb      	cmp	r3, #235	; 0xeb
 80079fe:	d11e      	bne.n	8007a3e <check_fs+0x9a>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007a06:	2b90      	cmp	r3, #144	; 0x90
 8007a08:	d119      	bne.n	8007a3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3334      	adds	r3, #52	; 0x34
 8007a0e:	3336      	adds	r3, #54	; 0x36
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fdcb 	bl	80065ac <ld_dword>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a1c:	4a0a      	ldr	r2, [pc, #40]	; (8007a48 <check_fs+0xa4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d101      	bne.n	8007a26 <check_fs+0x82>
 8007a22:	2300      	movs	r3, #0
 8007a24:	e00c      	b.n	8007a40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3334      	adds	r3, #52	; 0x34
 8007a2a:	3352      	adds	r3, #82	; 0x52
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fdbd 	bl	80065ac <ld_dword>
 8007a32:	4603      	mov	r3, r0
 8007a34:	4a05      	ldr	r2, [pc, #20]	; (8007a4c <check_fs+0xa8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d101      	bne.n	8007a3e <check_fs+0x9a>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e000      	b.n	8007a40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a3e:	2302      	movs	r3, #2
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	00544146 	.word	0x00544146
 8007a4c:	33544146 	.word	0x33544146

08007a50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b096      	sub	sp, #88	; 0x58
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7ff ff59 	bl	800791c <get_ldnumber>
 8007a6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	da01      	bge.n	8007a76 <find_volume+0x26>
 8007a72:	230b      	movs	r3, #11
 8007a74:	e262      	b.n	8007f3c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a76:	4a9f      	ldr	r2, [pc, #636]	; (8007cf4 <find_volume+0x2a4>)
 8007a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <find_volume+0x3a>
 8007a86:	230c      	movs	r3, #12
 8007a88:	e258      	b.n	8007f3c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	f023 0301 	bic.w	r3, r3, #1
 8007a96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01a      	beq.n	8007ad6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fe fccb 	bl	8006440 <disk_status>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10c      	bne.n	8007ad6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <find_volume+0x82>
 8007ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007ace:	230a      	movs	r3, #10
 8007ad0:	e234      	b.n	8007f3c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e232      	b.n	8007f3c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fcc3 	bl	8006474 <disk_initialize>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b00:	2303      	movs	r3, #3
 8007b02:	e21b      	b.n	8007f3c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d007      	beq.n	8007b1a <find_volume+0xca>
 8007b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007b16:	230a      	movs	r3, #10
 8007b18:	e210      	b.n	8007f3c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	7858      	ldrb	r0, [r3, #1]
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	330c      	adds	r3, #12
 8007b22:	461a      	mov	r2, r3
 8007b24:	2102      	movs	r1, #2
 8007b26:	f7fe fd0b 	bl	8006540 <disk_ioctl>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <find_volume+0xe4>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e203      	b.n	8007f3c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	899b      	ldrh	r3, [r3, #12]
 8007b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3c:	d80d      	bhi.n	8007b5a <find_volume+0x10a>
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	899b      	ldrh	r3, [r3, #12]
 8007b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b46:	d308      	bcc.n	8007b5a <find_volume+0x10a>
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	899b      	ldrh	r3, [r3, #12]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	899b      	ldrh	r3, [r3, #12]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <find_volume+0x10e>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e1ee      	b.n	8007f3c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b66:	f7ff ff1d 	bl	80079a4 <check_fs>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d149      	bne.n	8007c0c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b78:	2300      	movs	r3, #0
 8007b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7c:	e01e      	b.n	8007bbc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b8c:	4413      	add	r3, r2
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	3304      	adds	r3, #4
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <find_volume+0x158>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fd04 	bl	80065ac <ld_dword>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	e000      	b.n	8007baa <find_volume+0x15a>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3358      	adds	r3, #88	; 0x58
 8007bb0:	443b      	add	r3, r7
 8007bb2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb8:	3301      	adds	r3, #1
 8007bba:	643b      	str	r3, [r7, #64]	; 0x40
 8007bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d9dd      	bls.n	8007b7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <find_volume+0x182>
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	3358      	adds	r3, #88	; 0x58
 8007bd8:	443b      	add	r3, r7
 8007bda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007bde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <find_volume+0x1a2>
 8007be6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007be8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bea:	f7ff fedb 	bl	80079a4 <check_fs>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	e000      	b.n	8007bf4 <find_volume+0x1a4>
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d905      	bls.n	8007c0c <find_volume+0x1bc>
 8007c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c02:	3301      	adds	r3, #1
 8007c04:	643b      	str	r3, [r7, #64]	; 0x40
 8007c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d9e2      	bls.n	8007bd2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d101      	bne.n	8007c18 <find_volume+0x1c8>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e191      	b.n	8007f3c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d901      	bls.n	8007c24 <find_volume+0x1d4>
 8007c20:	230d      	movs	r3, #13
 8007c22:	e18b      	b.n	8007f3c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	3334      	adds	r3, #52	; 0x34
 8007c28:	330b      	adds	r3, #11
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fca6 	bl	800657c <ld_word>
 8007c30:	4603      	mov	r3, r0
 8007c32:	461a      	mov	r2, r3
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	899b      	ldrh	r3, [r3, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d001      	beq.n	8007c40 <find_volume+0x1f0>
 8007c3c:	230d      	movs	r3, #13
 8007c3e:	e17d      	b.n	8007f3c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	3334      	adds	r3, #52	; 0x34
 8007c44:	3316      	adds	r3, #22
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fc98 	bl	800657c <ld_word>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <find_volume+0x214>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	3334      	adds	r3, #52	; 0x34
 8007c5a:	3324      	adds	r3, #36	; 0x24
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fca5 	bl	80065ac <ld_dword>
 8007c62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c68:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	789b      	ldrb	r3, [r3, #2]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d005      	beq.n	8007c88 <find_volume+0x238>
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	789b      	ldrb	r3, [r3, #2]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d001      	beq.n	8007c88 <find_volume+0x238>
 8007c84:	230d      	movs	r3, #13
 8007c86:	e159      	b.n	8007f3c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	789b      	ldrb	r3, [r3, #2]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
 8007c94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	895b      	ldrh	r3, [r3, #10]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <find_volume+0x26c>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	895b      	ldrh	r3, [r3, #10]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	895b      	ldrh	r3, [r3, #10]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <find_volume+0x270>
 8007cbc:	230d      	movs	r3, #13
 8007cbe:	e13d      	b.n	8007f3c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	3334      	adds	r3, #52	; 0x34
 8007cc4:	3311      	adds	r3, #17
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fc58 	bl	800657c <ld_word>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	891b      	ldrh	r3, [r3, #8]
 8007cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cda:	8992      	ldrh	r2, [r2, #12]
 8007cdc:	0952      	lsrs	r2, r2, #5
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ce4:	fb01 f202 	mul.w	r2, r1, r2
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <find_volume+0x2a8>
 8007cf0:	230d      	movs	r3, #13
 8007cf2:	e123      	b.n	8007f3c <find_volume+0x4ec>
 8007cf4:	20002250 	.word	0x20002250

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	3334      	adds	r3, #52	; 0x34
 8007cfc:	3313      	adds	r3, #19
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fc3c 	bl	800657c <ld_word>
 8007d04:	4603      	mov	r3, r0
 8007d06:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <find_volume+0x2cc>
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	3334      	adds	r3, #52	; 0x34
 8007d12:	3320      	adds	r3, #32
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fc49 	bl	80065ac <ld_dword>
 8007d1a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	3334      	adds	r3, #52	; 0x34
 8007d20:	330e      	adds	r3, #14
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fc2a 	bl	800657c <ld_word>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <find_volume+0x2e6>
 8007d32:	230d      	movs	r3, #13
 8007d34:	e102      	b.n	8007f3c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d3a:	4413      	add	r3, r2
 8007d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3e:	8911      	ldrh	r1, [r2, #8]
 8007d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d42:	8992      	ldrh	r2, [r2, #12]
 8007d44:	0952      	lsrs	r2, r2, #5
 8007d46:	b292      	uxth	r2, r2
 8007d48:	fbb1 f2f2 	udiv	r2, r1, r2
 8007d4c:	b292      	uxth	r2, r2
 8007d4e:	4413      	add	r3, r2
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d201      	bcs.n	8007d5e <find_volume+0x30e>
 8007d5a:	230d      	movs	r3, #13
 8007d5c:	e0ee      	b.n	8007f3c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d66:	8952      	ldrh	r2, [r2, #10]
 8007d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <find_volume+0x328>
 8007d74:	230d      	movs	r3, #13
 8007d76:	e0e1      	b.n	8007f3c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d802      	bhi.n	8007d8e <find_volume+0x33e>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d802      	bhi.n	8007d9e <find_volume+0x34e>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	1c9a      	adds	r2, r3, #2
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007daa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007dac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db0:	441a      	add	r2, r3
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007db6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	441a      	add	r2, r3
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d11e      	bne.n	8007e06 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	3334      	adds	r3, #52	; 0x34
 8007dcc:	332a      	adds	r3, #42	; 0x2a
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fbd4 	bl	800657c <ld_word>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <find_volume+0x38e>
 8007dda:	230d      	movs	r3, #13
 8007ddc:	e0ae      	b.n	8007f3c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	891b      	ldrh	r3, [r3, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <find_volume+0x39a>
 8007de6:	230d      	movs	r3, #13
 8007de8:	e0a8      	b.n	8007f3c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	3334      	adds	r3, #52	; 0x34
 8007dee:	332c      	adds	r3, #44	; 0x2c
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fbdb 	bl	80065ac <ld_dword>
 8007df6:	4602      	mov	r2, r0
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	647b      	str	r3, [r7, #68]	; 0x44
 8007e04:	e01f      	b.n	8007e46 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	891b      	ldrh	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <find_volume+0x3c2>
 8007e0e:	230d      	movs	r3, #13
 8007e10:	e094      	b.n	8007f3c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e18:	441a      	add	r2, r3
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d103      	bne.n	8007e2e <find_volume+0x3de>
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	e00a      	b.n	8007e44 <find_volume+0x3f4>
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	4613      	mov	r3, r2
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	4413      	add	r3, r2
 8007e38:	085a      	lsrs	r2, r3, #1
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e44:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	69da      	ldr	r2, [r3, #28]
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	899b      	ldrh	r3, [r3, #12]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e52:	440b      	add	r3, r1
 8007e54:	3b01      	subs	r3, #1
 8007e56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e58:	8989      	ldrh	r1, [r1, #12]
 8007e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d201      	bcs.n	8007e66 <find_volume+0x416>
 8007e62:	230d      	movs	r3, #13
 8007e64:	e06a      	b.n	8007f3c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6c:	615a      	str	r2, [r3, #20]
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	2280      	movs	r2, #128	; 0x80
 8007e7a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d149      	bne.n	8007f18 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	3334      	adds	r3, #52	; 0x34
 8007e88:	3330      	adds	r3, #48	; 0x30
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe fb76 	bl	800657c <ld_word>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d140      	bne.n	8007f18 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e98:	3301      	adds	r3, #1
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e9e:	f7fe fe1d 	bl	8006adc <move_window>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d137      	bne.n	8007f18 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	2200      	movs	r2, #0
 8007eac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	3334      	adds	r3, #52	; 0x34
 8007eb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fb60 	bl	800657c <ld_word>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d127      	bne.n	8007f18 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	3334      	adds	r3, #52	; 0x34
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fb6d 	bl	80065ac <ld_dword>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <find_volume+0x4f4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d11e      	bne.n	8007f18 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	3334      	adds	r3, #52	; 0x34
 8007ede:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fb62 	bl	80065ac <ld_dword>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <find_volume+0x4f8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d113      	bne.n	8007f18 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	3334      	adds	r3, #52	; 0x34
 8007ef4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fb57 	bl	80065ac <ld_dword>
 8007efe:	4602      	mov	r2, r0
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	3334      	adds	r3, #52	; 0x34
 8007f08:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fb4d 	bl	80065ac <ld_dword>
 8007f12:	4602      	mov	r2, r0
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007f1e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007f20:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <find_volume+0x4fc>)
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <find_volume+0x4fc>)
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <find_volume+0x4fc>)
 8007f2e:	881a      	ldrh	r2, [r3, #0]
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f36:	f7fe fd69 	bl	8006a0c <clear_lock>
#endif
	return FR_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3758      	adds	r7, #88	; 0x58
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	41615252 	.word	0x41615252
 8007f48:	61417272 	.word	0x61417272
 8007f4c:	20002254 	.word	0x20002254

08007f50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f5a:	2309      	movs	r3, #9
 8007f5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01c      	beq.n	8007f9e <validate+0x4e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d018      	beq.n	8007f9e <validate+0x4e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d013      	beq.n	8007f9e <validate+0x4e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	889a      	ldrh	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	88db      	ldrh	r3, [r3, #6]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d10c      	bne.n	8007f9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	785b      	ldrb	r3, [r3, #1]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fa58 	bl	8006440 <disk_status>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <validate+0x4e>
			res = FR_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <validate+0x5a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	e000      	b.n	8007fac <validate+0x5c>
 8007faa:	2300      	movs	r3, #0
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	6013      	str	r3, [r2, #0]
	return res;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007fce:	f107 0310 	add.w	r3, r7, #16
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fca2 	bl	800791c <get_ldnumber>
 8007fd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da01      	bge.n	8007fe4 <f_mount+0x28>
 8007fe0:	230b      	movs	r3, #11
 8007fe2:	e02b      	b.n	800803c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fe4:	4a17      	ldr	r2, [pc, #92]	; (8008044 <f_mount+0x88>)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ff4:	69b8      	ldr	r0, [r7, #24]
 8007ff6:	f7fe fd09 	bl	8006a0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	490d      	ldr	r1, [pc, #52]	; (8008044 <f_mount+0x88>)
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <f_mount+0x66>
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d001      	beq.n	8008026 <f_mount+0x6a>
 8008022:	2300      	movs	r3, #0
 8008024:	e00a      	b.n	800803c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008026:	f107 010c 	add.w	r1, r7, #12
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	2200      	movs	r2, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff fd0d 	bl	8007a50 <find_volume>
 8008036:	4603      	mov	r3, r0
 8008038:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800803a:	7dfb      	ldrb	r3, [r7, #23]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20002250 	.word	0x20002250

08008048 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b098      	sub	sp, #96	; 0x60
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <f_open+0x18>
 800805c:	2309      	movs	r3, #9
 800805e:	e1bb      	b.n	80083d8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008066:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008068:	79fa      	ldrb	r2, [r7, #7]
 800806a:	f107 0110 	add.w	r1, r7, #16
 800806e:	f107 0308 	add.w	r3, r7, #8
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fcec 	bl	8007a50 <find_volume>
 8008078:	4603      	mov	r3, r0
 800807a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800807e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008082:	2b00      	cmp	r3, #0
 8008084:	f040 819f 	bne.w	80083c6 <f_open+0x37e>
		dj.obj.fs = fs;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	f107 0314 	add.w	r3, r7, #20
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fbcb 	bl	8007830 <follow_path>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d11a      	bne.n	80080de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	da03      	bge.n	80080ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80080b2:	2306      	movs	r3, #6
 80080b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080b8:	e011      	b.n	80080de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	f023 0301 	bic.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf14      	ite	ne
 80080c4:	2301      	movne	r3, #1
 80080c6:	2300      	moveq	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	f107 0314 	add.w	r3, r7, #20
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fb52 	bl	800677c <chk_lock>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	f003 031c 	and.w	r3, r3, #28
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d07f      	beq.n	80081e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80080e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d017      	beq.n	8008120 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80080f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d10e      	bne.n	8008116 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80080f8:	f7fe fb9c 	bl	8006834 <enq_lock>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d006      	beq.n	8008110 <f_open+0xc8>
 8008102:	f107 0314 	add.w	r3, r7, #20
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff facc 	bl	80076a4 <dir_register>
 800810c:	4603      	mov	r3, r0
 800810e:	e000      	b.n	8008112 <f_open+0xca>
 8008110:	2312      	movs	r3, #18
 8008112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	f043 0308 	orr.w	r3, r3, #8
 800811c:	71fb      	strb	r3, [r7, #7]
 800811e:	e010      	b.n	8008142 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008120:	7ebb      	ldrb	r3, [r7, #26]
 8008122:	f003 0311 	and.w	r3, r3, #17
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <f_open+0xea>
					res = FR_DENIED;
 800812a:	2307      	movs	r3, #7
 800812c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008130:	e007      	b.n	8008142 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <f_open+0xfa>
 800813c:	2308      	movs	r3, #8
 800813e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008146:	2b00      	cmp	r3, #0
 8008148:	d168      	bne.n	800821c <f_open+0x1d4>
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d063      	beq.n	800821c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008154:	f7fd fe86 	bl	8005e64 <get_fattime>
 8008158:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	330e      	adds	r3, #14
 800815e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fa61 	bl	8006628 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008168:	3316      	adds	r3, #22
 800816a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fa5b 	bl	8006628 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008174:	330b      	adds	r3, #11
 8008176:	2220      	movs	r2, #32
 8008178:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff f9fb 	bl	800757c <ld_clust>
 8008186:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800818c:	2200      	movs	r2, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fa13 	bl	80075ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008196:	331c      	adds	r3, #28
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fa44 	bl	8006628 <st_dword>
					fs->wflag = 1;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2201      	movs	r2, #1
 80081a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80081a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d037      	beq.n	800821c <f_open+0x1d4>
						dw = fs->winsect;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80081b2:	f107 0314 	add.w	r3, r7, #20
 80081b6:	2200      	movs	r2, #0
 80081b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe ff3b 	bl	8007036 <remove_chain>
 80081c0:	4603      	mov	r3, r0
 80081c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80081c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d126      	bne.n	800821c <f_open+0x1d4>
							res = move_window(fs, dw);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fc82 	bl	8006adc <move_window>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081e2:	3a01      	subs	r2, #1
 80081e4:	611a      	str	r2, [r3, #16]
 80081e6:	e019      	b.n	800821c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80081e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d115      	bne.n	800821c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80081f0:	7ebb      	ldrb	r3, [r7, #26]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <f_open+0x1ba>
					res = FR_NO_FILE;
 80081fa:	2304      	movs	r3, #4
 80081fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008200:	e00c      	b.n	800821c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <f_open+0x1d4>
 800820c:	7ebb      	ldrb	r3, [r7, #26]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <f_open+0x1d4>
						res = FR_DENIED;
 8008216:	2307      	movs	r3, #7
 8008218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800821c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008220:	2b00      	cmp	r3, #0
 8008222:	d128      	bne.n	8008276 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	f003 0308 	and.w	r3, r3, #8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008234:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800823e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008244:	79fb      	ldrb	r3, [r7, #7]
 8008246:	f023 0301 	bic.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	bf14      	ite	ne
 800824e:	2301      	movne	r3, #1
 8008250:	2300      	moveq	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	461a      	mov	r2, r3
 8008256:	f107 0314 	add.w	r3, r7, #20
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe fb0b 	bl	8006878 <inc_lock>
 8008262:	4602      	mov	r2, r0
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <f_open+0x22e>
 8008270:	2302      	movs	r3, #2
 8008272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800827a:	2b00      	cmp	r3, #0
 800827c:	f040 80a3 	bne.w	80083c6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff f978 	bl	800757c <ld_clust>
 800828c:	4602      	mov	r2, r0
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	331c      	adds	r3, #28
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe f988 	bl	80065ac <ld_dword>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	88da      	ldrh	r2, [r3, #6]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	79fa      	ldrb	r2, [r7, #7]
 80082ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3330      	adds	r3, #48	; 0x30
 80082d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082d6:	2100      	movs	r1, #0
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fe f9f2 	bl	80066c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d06e      	beq.n	80083c6 <f_open+0x37e>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d06a      	beq.n	80083c6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	895b      	ldrh	r3, [r3, #10]
 80082fc:	461a      	mov	r2, r3
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	899b      	ldrh	r3, [r3, #12]
 8008302:	fb02 f303 	mul.w	r3, r2, r3
 8008306:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	657b      	str	r3, [r7, #84]	; 0x54
 8008314:	e016      	b.n	8008344 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fc9b 	bl	8006c56 <get_fat>
 8008320:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008324:	2b01      	cmp	r3, #1
 8008326:	d802      	bhi.n	800832e <f_open+0x2e6>
 8008328:	2302      	movs	r3, #2
 800832a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800832e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d102      	bne.n	800833c <f_open+0x2f4>
 8008336:	2301      	movs	r3, #1
 8008338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800833c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800833e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	657b      	str	r3, [r7, #84]	; 0x54
 8008344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <f_open+0x30c>
 800834c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800834e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008350:	429a      	cmp	r2, r3
 8008352:	d8e0      	bhi.n	8008316 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008358:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800835a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800835e:	2b00      	cmp	r3, #0
 8008360:	d131      	bne.n	80083c6 <f_open+0x37e>
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	899b      	ldrh	r3, [r3, #12]
 8008366:	461a      	mov	r2, r3
 8008368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800836a:	fbb3 f1f2 	udiv	r1, r3, r2
 800836e:	fb01 f202 	mul.w	r2, r1, r2
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d026      	beq.n	80083c6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe fc4b 	bl	8006c18 <clust2sect>
 8008382:	6478      	str	r0, [r7, #68]	; 0x44
 8008384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <f_open+0x34a>
						res = FR_INT_ERR;
 800838a:	2302      	movs	r3, #2
 800838c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008390:	e019      	b.n	80083c6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	899b      	ldrh	r3, [r3, #12]
 8008396:	461a      	mov	r2, r3
 8008398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839a:	fbb3 f2f2 	udiv	r2, r3, r2
 800839e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a0:	441a      	add	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	7858      	ldrb	r0, [r3, #1]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1a      	ldr	r2, [r3, #32]
 80083b4:	2301      	movs	r3, #1
 80083b6:	f7fe f883 	bl	80064c0 <disk_read>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <f_open+0x37e>
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80083c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <f_open+0x38c>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80083d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3760      	adds	r7, #96	; 0x60
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f107 0208 	add.w	r2, r7, #8
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff fdad 	bl	8007f50 <validate>
 80083f6:	4603      	mov	r3, r0
 80083f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d168      	bne.n	80084d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7d1b      	ldrb	r3, [r3, #20]
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d062      	beq.n	80084d2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	7d1b      	ldrb	r3, [r3, #20]
 8008410:	b25b      	sxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	da15      	bge.n	8008442 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	7858      	ldrb	r0, [r3, #1]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1a      	ldr	r2, [r3, #32]
 8008424:	2301      	movs	r3, #1
 8008426:	f7fe f86b 	bl	8006500 <disk_write>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <f_sync+0x54>
 8008430:	2301      	movs	r3, #1
 8008432:	e04f      	b.n	80084d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	7d1b      	ldrb	r3, [r3, #20]
 8008438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800843c:	b2da      	uxtb	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008442:	f7fd fd0f 	bl	8005e64 <get_fattime>
 8008446:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fe fb43 	bl	8006adc <move_window>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d138      	bne.n	80084d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	330b      	adds	r3, #11
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	330b      	adds	r3, #11
 8008470:	f042 0220 	orr.w	r2, r2, #32
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	461a      	mov	r2, r3
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	f7ff f899 	bl	80075ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f103 021c 	add.w	r2, r3, #28
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f7fe f8c7 	bl	8006628 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3316      	adds	r3, #22
 800849e:	6939      	ldr	r1, [r7, #16]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe f8c1 	bl	8006628 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3312      	adds	r3, #18
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe f8a0 	bl	80065f2 <st_word>
					fs->wflag = 1;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2201      	movs	r2, #1
 80084b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fb3c 	bl	8006b38 <sync_fs>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7d1b      	ldrb	r3, [r3, #20]
 80084c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff ff7b 	bl	80083e0 <f_sync>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d118      	bne.n	8008526 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f107 0208 	add.w	r2, r7, #8
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff fd27 	bl	8007f50 <validate>
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fa3f 	bl	8006994 <dec_lock>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	4613      	mov	r3, r2
 800853c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800853e:	2301      	movs	r3, #1
 8008540:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008546:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 8008548:	7a5b      	ldrb	r3, [r3, #9]
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d131      	bne.n	80085b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008550:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 8008552:	7a5b      	ldrb	r3, [r3, #9]
 8008554:	b2db      	uxtb	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 800855a:	2100      	movs	r1, #0
 800855c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800855e:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 8008560:	7a5b      	ldrb	r3, [r3, #9]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	4a17      	ldr	r2, [pc, #92]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800856e:	4b15      	ldr	r3, [pc, #84]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 8008570:	7a5b      	ldrb	r3, [r3, #9]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	461a      	mov	r2, r3
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 8008578:	4413      	add	r3, r2
 800857a:	79fa      	ldrb	r2, [r7, #7]
 800857c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800857e:	4b11      	ldr	r3, [pc, #68]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 8008580:	7a5b      	ldrb	r3, [r3, #9]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	b2d1      	uxtb	r1, r2
 8008588:	4a0e      	ldr	r2, [pc, #56]	; (80085c4 <FATFS_LinkDriverEx+0x94>)
 800858a:	7251      	strb	r1, [r2, #9]
 800858c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800858e:	7dbb      	ldrb	r3, [r7, #22]
 8008590:	3330      	adds	r3, #48	; 0x30
 8008592:	b2da      	uxtb	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	3301      	adds	r3, #1
 800859c:	223a      	movs	r2, #58	; 0x3a
 800859e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	3302      	adds	r3, #2
 80085a4:	222f      	movs	r2, #47	; 0x2f
 80085a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	3303      	adds	r3, #3
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	200022f8 	.word	0x200022f8

080085c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80085d2:	2200      	movs	r2, #0
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff ffaa 	bl	8008530 <FATFS_LinkDriverEx>
 80085dc:	4603      	mov	r3, r0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <__NVIC_SetPriority>:
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	6039      	str	r1, [r7, #0]
 80085f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	db0a      	blt.n	8008612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	490c      	ldr	r1, [pc, #48]	; (8008634 <__NVIC_SetPriority+0x4c>)
 8008602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008606:	0112      	lsls	r2, r2, #4
 8008608:	b2d2      	uxtb	r2, r2
 800860a:	440b      	add	r3, r1
 800860c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008610:	e00a      	b.n	8008628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	b2da      	uxtb	r2, r3
 8008616:	4908      	ldr	r1, [pc, #32]	; (8008638 <__NVIC_SetPriority+0x50>)
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	3b04      	subs	r3, #4
 8008620:	0112      	lsls	r2, r2, #4
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	440b      	add	r3, r1
 8008626:	761a      	strb	r2, [r3, #24]
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	e000e100 	.word	0xe000e100
 8008638:	e000ed00 	.word	0xe000ed00

0800863c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <SysTick_Handler+0x1c>)
 8008642:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008644:	f001 fcae 	bl	8009fa4 <xTaskGetSchedulerState>
 8008648:	4603      	mov	r3, r0
 800864a:	2b01      	cmp	r3, #1
 800864c:	d001      	beq.n	8008652 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800864e:	f002 fa93 	bl	800ab78 <xPortSysTickHandler>
  }
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	e000e010 	.word	0xe000e010

0800865c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008660:	2100      	movs	r1, #0
 8008662:	f06f 0004 	mvn.w	r0, #4
 8008666:	f7ff ffbf 	bl	80085e8 <__NVIC_SetPriority>
#endif
}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008676:	f3ef 8305 	mrs	r3, IPSR
 800867a:	603b      	str	r3, [r7, #0]
  return(result);
 800867c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008682:	f06f 0305 	mvn.w	r3, #5
 8008686:	607b      	str	r3, [r7, #4]
 8008688:	e00c      	b.n	80086a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800868a:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <osKernelInitialize+0x44>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008692:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <osKernelInitialize+0x44>)
 8008694:	2201      	movs	r2, #1
 8008696:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008698:	2300      	movs	r3, #0
 800869a:	607b      	str	r3, [r7, #4]
 800869c:	e002      	b.n	80086a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800869e:	f04f 33ff 	mov.w	r3, #4294967295
 80086a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086a4:	687b      	ldr	r3, [r7, #4]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20002304 	.word	0x20002304

080086b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086be:	f3ef 8305 	mrs	r3, IPSR
 80086c2:	603b      	str	r3, [r7, #0]
  return(result);
 80086c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80086ca:	f06f 0305 	mvn.w	r3, #5
 80086ce:	607b      	str	r3, [r7, #4]
 80086d0:	e010      	b.n	80086f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <osKernelStart+0x48>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d109      	bne.n	80086ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086da:	f7ff ffbf 	bl	800865c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086de:	4b08      	ldr	r3, [pc, #32]	; (8008700 <osKernelStart+0x48>)
 80086e0:	2202      	movs	r2, #2
 80086e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086e4:	f001 f816 	bl	8009714 <vTaskStartScheduler>
      stat = osOK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	607b      	str	r3, [r7, #4]
 80086ec:	e002      	b.n	80086f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80086ee:	f04f 33ff 	mov.w	r3, #4294967295
 80086f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086f4:	687b      	ldr	r3, [r7, #4]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20002304 	.word	0x20002304

08008704 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b08e      	sub	sp, #56	; 0x38
 8008708:	af04      	add	r7, sp, #16
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008714:	f3ef 8305 	mrs	r3, IPSR
 8008718:	617b      	str	r3, [r7, #20]
  return(result);
 800871a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800871c:	2b00      	cmp	r3, #0
 800871e:	d17e      	bne.n	800881e <osThreadNew+0x11a>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d07b      	beq.n	800881e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008726:	2380      	movs	r3, #128	; 0x80
 8008728:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800872a:	2318      	movs	r3, #24
 800872c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008732:	f04f 33ff 	mov.w	r3, #4294967295
 8008736:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d045      	beq.n	80087ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <osThreadNew+0x48>
        name = attr->name;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <osThreadNew+0x6e>
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b38      	cmp	r3, #56	; 0x38
 8008764:	d805      	bhi.n	8008772 <osThreadNew+0x6e>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <osThreadNew+0x72>
        return (NULL);
 8008772:	2300      	movs	r3, #0
 8008774:	e054      	b.n	8008820 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	089b      	lsrs	r3, r3, #2
 8008784:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00e      	beq.n	80087ac <osThreadNew+0xa8>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2b5b      	cmp	r3, #91	; 0x5b
 8008794:	d90a      	bls.n	80087ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800879a:	2b00      	cmp	r3, #0
 800879c:	d006      	beq.n	80087ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <osThreadNew+0xa8>
        mem = 1;
 80087a6:	2301      	movs	r3, #1
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e010      	b.n	80087ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10c      	bne.n	80087ce <osThreadNew+0xca>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d108      	bne.n	80087ce <osThreadNew+0xca>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d104      	bne.n	80087ce <osThreadNew+0xca>
          mem = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61bb      	str	r3, [r7, #24]
 80087c8:	e001      	b.n	80087ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d110      	bne.n	80087f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087dc:	9202      	str	r2, [sp, #8]
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6a3a      	ldr	r2, [r7, #32]
 80087e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 fdf0 	bl	80093d0 <xTaskCreateStatic>
 80087f0:	4603      	mov	r3, r0
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	e013      	b.n	800881e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d110      	bne.n	800881e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	f107 0310 	add.w	r3, r7, #16
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fe3b 	bl	800948a <xTaskCreate>
 8008814:	4603      	mov	r3, r0
 8008816:	2b01      	cmp	r3, #1
 8008818:	d001      	beq.n	800881e <osThreadNew+0x11a>
            hTask = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800881e:	693b      	ldr	r3, [r7, #16]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3728      	adds	r7, #40	; 0x28
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4a07      	ldr	r2, [pc, #28]	; (8008854 <vApplicationGetIdleTaskMemory+0x2c>)
 8008838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4a06      	ldr	r2, [pc, #24]	; (8008858 <vApplicationGetIdleTaskMemory+0x30>)
 800883e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2280      	movs	r2, #128	; 0x80
 8008844:	601a      	str	r2, [r3, #0]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20002308 	.word	0x20002308
 8008858:	20002364 	.word	0x20002364

0800885c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a07      	ldr	r2, [pc, #28]	; (8008888 <vApplicationGetTimerTaskMemory+0x2c>)
 800886c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4a06      	ldr	r2, [pc, #24]	; (800888c <vApplicationGetTimerTaskMemory+0x30>)
 8008872:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800887a:	601a      	str	r2, [r3, #0]
}
 800887c:	bf00      	nop
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	20002564 	.word	0x20002564
 800888c:	200025c0 	.word	0x200025c0

08008890 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f103 0208 	add.w	r2, r3, #8
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f04f 32ff 	mov.w	r2, #4294967295
 80088a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f103 0208 	add.w	r2, r3, #8
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f103 0208 	add.w	r2, r3, #8
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088ea:	b480      	push	{r7}
 80088ec:	b085      	sub	sp, #20
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d103      	bne.n	8008952 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e00c      	b.n	800896c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3308      	adds	r3, #8
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e002      	b.n	8008960 <vListInsert+0x2e>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	429a      	cmp	r2, r3
 800896a:	d2f6      	bcs.n	800895a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	601a      	str	r2, [r3, #0]
}
 8008998:	bf00      	nop
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6892      	ldr	r2, [r2, #8]
 80089ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6852      	ldr	r2, [r2, #4]
 80089c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d103      	bne.n	80089d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	1e5a      	subs	r2, r3, #1
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a22:	f002 f817 	bl	800aa54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a32:	fb01 f303 	mul.w	r3, r1, r3
 8008a36:	441a      	add	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a52:	3b01      	subs	r3, #1
 8008a54:	68f9      	ldr	r1, [r7, #12]
 8008a56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a58:	fb01 f303 	mul.w	r3, r1, r3
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	22ff      	movs	r2, #255	; 0xff
 8008a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d114      	bne.n	8008aa2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01a      	beq.n	8008ab6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3310      	adds	r3, #16
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 f8cf 	bl	8009c28 <xTaskRemoveFromEventList>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d012      	beq.n	8008ab6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a90:	4b0c      	ldr	r3, [pc, #48]	; (8008ac4 <xQueueGenericReset+0xcc>)
 8008a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	e009      	b.n	8008ab6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3310      	adds	r3, #16
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fef2 	bl	8008890 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3324      	adds	r3, #36	; 0x24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff feed 	bl	8008890 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ab6:	f001 fffd 	bl	800aab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008aba:	2301      	movs	r3, #1
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08e      	sub	sp, #56	; 0x38
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <xQueueGenericCreateStatic+0x52>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <xQueueGenericCreateStatic+0x56>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <xQueueGenericCreateStatic+0x58>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10a      	bne.n	8008b3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	623b      	str	r3, [r7, #32]
}
 8008b36:	bf00      	nop
 8008b38:	e7fe      	b.n	8008b38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <xQueueGenericCreateStatic+0x7e>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <xQueueGenericCreateStatic+0x82>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <xQueueGenericCreateStatic+0x84>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	61fb      	str	r3, [r7, #28]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b66:	2350      	movs	r3, #80	; 0x50
 8008b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b50      	cmp	r3, #80	; 0x50
 8008b6e:	d00a      	beq.n	8008b86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	61bb      	str	r3, [r7, #24]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00d      	beq.n	8008bae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f805 	bl	8008bb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3730      	adds	r7, #48	; 0x30
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d103      	bne.n	8008bd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e002      	b.n	8008bda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008be6:	2101      	movs	r1, #1
 8008be8:	69b8      	ldr	r0, [r7, #24]
 8008bea:	f7ff ff05 	bl	80089f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08e      	sub	sp, #56	; 0x38
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <xQueueGenericSend+0x32>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d103      	bne.n	8008c40 <xQueueGenericSend+0x40>
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <xQueueGenericSend+0x44>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <xQueueGenericSend+0x46>
 8008c44:	2300      	movs	r3, #0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <xQueueGenericSend+0x60>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c5c:	bf00      	nop
 8008c5e:	e7fe      	b.n	8008c5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d103      	bne.n	8008c6e <xQueueGenericSend+0x6e>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <xQueueGenericSend+0x72>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e000      	b.n	8008c74 <xQueueGenericSend+0x74>
 8008c72:	2300      	movs	r3, #0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10a      	bne.n	8008c8e <xQueueGenericSend+0x8e>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	623b      	str	r3, [r7, #32]
}
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c8e:	f001 f989 	bl	8009fa4 <xTaskGetSchedulerState>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <xQueueGenericSend+0x9e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <xQueueGenericSend+0xa2>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <xQueueGenericSend+0xa4>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <xQueueGenericSend+0xbe>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	61fb      	str	r3, [r7, #28]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cbe:	f001 fec9 	bl	800aa54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <xQueueGenericSend+0xd4>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d129      	bne.n	8008d28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cda:	f000 fa0b 	bl	80090f4 <prvCopyDataToQueue>
 8008cde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d010      	beq.n	8008d0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	3324      	adds	r3, #36	; 0x24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 ff9b 	bl	8009c28 <xTaskRemoveFromEventList>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d013      	beq.n	8008d20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cf8:	4b3f      	ldr	r3, [pc, #252]	; (8008df8 <xQueueGenericSend+0x1f8>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	e00a      	b.n	8008d20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d007      	beq.n	8008d20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d10:	4b39      	ldr	r3, [pc, #228]	; (8008df8 <xQueueGenericSend+0x1f8>)
 8008d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d20:	f001 fec8 	bl	800aab4 <vPortExitCritical>
				return pdPASS;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e063      	b.n	8008df0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d103      	bne.n	8008d36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d2e:	f001 fec1 	bl	800aab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e05c      	b.n	8008df0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 ffd5 	bl	8009cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d46:	2301      	movs	r3, #1
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d4a:	f001 feb3 	bl	800aab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d4e:	f000 fd47 	bl	80097e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d52:	f001 fe7f 	bl	800aa54 <vPortEnterCritical>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d103      	bne.n	8008d6c <xQueueGenericSend+0x16c>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d72:	b25b      	sxtb	r3, r3
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d103      	bne.n	8008d82 <xQueueGenericSend+0x182>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d82:	f001 fe97 	bl	800aab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d86:	1d3a      	adds	r2, r7, #4
 8008d88:	f107 0314 	add.w	r3, r7, #20
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 ffc4 	bl	8009d1c <xTaskCheckForTimeOut>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d124      	bne.n	8008de4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d9c:	f000 faa2 	bl	80092e4 <prvIsQueueFull>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d018      	beq.n	8008dd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	3310      	adds	r3, #16
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 feea 	bl	8009b88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008db6:	f000 fa2d 	bl	8009214 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dba:	f000 fd1f 	bl	80097fc <xTaskResumeAll>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f47f af7c 	bne.w	8008cbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <xQueueGenericSend+0x1f8>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	e772      	b.n	8008cbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dda:	f000 fa1b 	bl	8009214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dde:	f000 fd0d 	bl	80097fc <xTaskResumeAll>
 8008de2:	e76c      	b.n	8008cbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008de6:	f000 fa15 	bl	8009214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dea:	f000 fd07 	bl	80097fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3738      	adds	r7, #56	; 0x38
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b090      	sub	sp, #64	; 0x40
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d103      	bne.n	8008e38 <xQueueGenericSendFromISR+0x3c>
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <xQueueGenericSendFromISR+0x40>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <xQueueGenericSendFromISR+0x42>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d103      	bne.n	8008e66 <xQueueGenericSendFromISR+0x6a>
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d101      	bne.n	8008e6a <xQueueGenericSendFromISR+0x6e>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <xQueueGenericSendFromISR+0x70>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	623b      	str	r3, [r7, #32]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e86:	f001 fec7 	bl	800ac18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e8a:	f3ef 8211 	mrs	r2, BASEPRI
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	61fa      	str	r2, [r7, #28]
 8008ea0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d302      	bcc.n	8008eb8 <xQueueGenericSendFromISR+0xbc>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d12f      	bne.n	8008f18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ece:	f000 f911 	bl	80090f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ed2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d112      	bne.n	8008f02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d016      	beq.n	8008f12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	3324      	adds	r3, #36	; 0x24
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fe9d 	bl	8009c28 <xTaskRemoveFromEventList>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00e      	beq.n	8008f12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00b      	beq.n	8008f12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e007      	b.n	8008f12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f06:	3301      	adds	r3, #1
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	b25a      	sxtb	r2, r3
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f12:	2301      	movs	r3, #1
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008f16:	e001      	b.n	8008f1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3740      	adds	r7, #64	; 0x40
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08c      	sub	sp, #48	; 0x30
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <xQueueReceive+0x30>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	623b      	str	r3, [r7, #32]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <xQueueReceive+0x3e>
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <xQueueReceive+0x42>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <xQueueReceive+0x44>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <xQueueReceive+0x5e>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	61fb      	str	r3, [r7, #28]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f92:	f001 f807 	bl	8009fa4 <xTaskGetSchedulerState>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d102      	bne.n	8008fa2 <xQueueReceive+0x6e>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <xQueueReceive+0x72>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <xQueueReceive+0x74>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xQueueReceive+0x8e>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	61bb      	str	r3, [r7, #24]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fc2:	f001 fd47 	bl	800aa54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01f      	beq.n	8009012 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd6:	f000 f8f7 	bl	80091c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	1e5a      	subs	r2, r3, #1
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00f      	beq.n	800900a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	3310      	adds	r3, #16
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fe1a 	bl	8009c28 <xTaskRemoveFromEventList>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d007      	beq.n	800900a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ffa:	4b3d      	ldr	r3, [pc, #244]	; (80090f0 <xQueueReceive+0x1bc>)
 8008ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800900a:	f001 fd53 	bl	800aab4 <vPortExitCritical>
				return pdPASS;
 800900e:	2301      	movs	r3, #1
 8009010:	e069      	b.n	80090e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d103      	bne.n	8009020 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009018:	f001 fd4c 	bl	800aab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800901c:	2300      	movs	r3, #0
 800901e:	e062      	b.n	80090e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009026:	f107 0310 	add.w	r3, r7, #16
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fe60 	bl	8009cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009030:	2301      	movs	r3, #1
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009034:	f001 fd3e 	bl	800aab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009038:	f000 fbd2 	bl	80097e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800903c:	f001 fd0a 	bl	800aa54 <vPortEnterCritical>
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009046:	b25b      	sxtb	r3, r3
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d103      	bne.n	8009056 <xQueueReceive+0x122>
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800905c:	b25b      	sxtb	r3, r3
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d103      	bne.n	800906c <xQueueReceive+0x138>
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800906c:	f001 fd22 	bl	800aab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009070:	1d3a      	adds	r2, r7, #4
 8009072:	f107 0310 	add.w	r3, r7, #16
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fe4f 	bl	8009d1c <xTaskCheckForTimeOut>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d123      	bne.n	80090cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009086:	f000 f917 	bl	80092b8 <prvIsQueueEmpty>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d017      	beq.n	80090c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	3324      	adds	r3, #36	; 0x24
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fd75 	bl	8009b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800909e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a0:	f000 f8b8 	bl	8009214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090a4:	f000 fbaa 	bl	80097fc <xTaskResumeAll>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d189      	bne.n	8008fc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80090ae:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <xQueueReceive+0x1bc>)
 80090b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	e780      	b.n	8008fc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c2:	f000 f8a7 	bl	8009214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090c6:	f000 fb99 	bl	80097fc <xTaskResumeAll>
 80090ca:	e77a      	b.n	8008fc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ce:	f000 f8a1 	bl	8009214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090d2:	f000 fb93 	bl	80097fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d8:	f000 f8ee 	bl	80092b8 <prvIsQueueEmpty>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f43f af6f 	beq.w	8008fc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3730      	adds	r7, #48	; 0x30
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10d      	bne.n	800912e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d14d      	bne.n	80091b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	4618      	mov	r0, r3
 8009120:	f000 ff5e 	bl	8009fe0 <xTaskPriorityDisinherit>
 8009124:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	609a      	str	r2, [r3, #8]
 800912c:	e043      	b.n	80091b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d119      	bne.n	8009168 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6858      	ldr	r0, [r3, #4]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	461a      	mov	r2, r3
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	f001 ffb8 	bl	800b0b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	441a      	add	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	429a      	cmp	r2, r3
 800915c:	d32b      	bcc.n	80091b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
 8009166:	e026      	b.n	80091b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68d8      	ldr	r0, [r3, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009170:	461a      	mov	r2, r3
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	f001 ff9e 	bl	800b0b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009180:	425b      	negs	r3, r3
 8009182:	441a      	add	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	429a      	cmp	r2, r3
 8009192:	d207      	bcs.n	80091a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	425b      	negs	r3, r3
 800919e:	441a      	add	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d105      	bne.n	80091b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091be:	697b      	ldr	r3, [r7, #20]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d018      	beq.n	800920c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	441a      	add	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d303      	bcc.n	80091fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68d9      	ldr	r1, [r3, #12]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	461a      	mov	r2, r3
 8009206:	6838      	ldr	r0, [r7, #0]
 8009208:	f001 ff54 	bl	800b0b4 <memcpy>
	}
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800921c:	f001 fc1a 	bl	800aa54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009226:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009228:	e011      	b.n	800924e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d012      	beq.n	8009258 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	3324      	adds	r3, #36	; 0x24
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fcf6 	bl	8009c28 <xTaskRemoveFromEventList>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009242:	f000 fdcd 	bl	8009de0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	3b01      	subs	r3, #1
 800924a:	b2db      	uxtb	r3, r3
 800924c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800924e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dce9      	bgt.n	800922a <prvUnlockQueue+0x16>
 8009256:	e000      	b.n	800925a <prvUnlockQueue+0x46>
					break;
 8009258:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	22ff      	movs	r2, #255	; 0xff
 800925e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009262:	f001 fc27 	bl	800aab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009266:	f001 fbf5 	bl	800aa54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009270:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009272:	e011      	b.n	8009298 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d012      	beq.n	80092a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3310      	adds	r3, #16
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fcd1 	bl	8009c28 <xTaskRemoveFromEventList>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800928c:	f000 fda8 	bl	8009de0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	3b01      	subs	r3, #1
 8009294:	b2db      	uxtb	r3, r3
 8009296:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dce9      	bgt.n	8009274 <prvUnlockQueue+0x60>
 80092a0:	e000      	b.n	80092a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	22ff      	movs	r2, #255	; 0xff
 80092a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092ac:	f001 fc02 	bl	800aab4 <vPortExitCritical>
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092c0:	f001 fbc8 	bl	800aa54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	e001      	b.n	80092d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092d6:	f001 fbed 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 80092da:	68fb      	ldr	r3, [r7, #12]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092ec:	f001 fbb2 	bl	800aa54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d102      	bne.n	8009302 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	e001      	b.n	8009306 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009306:	f001 fbd5 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 800930a:	68fb      	ldr	r3, [r7, #12]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	e014      	b.n	800934e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009324:	4a0f      	ldr	r2, [pc, #60]	; (8009364 <vQueueAddToRegistry+0x50>)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10b      	bne.n	8009348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009330:	490c      	ldr	r1, [pc, #48]	; (8009364 <vQueueAddToRegistry+0x50>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800933a:	4a0a      	ldr	r2, [pc, #40]	; (8009364 <vQueueAddToRegistry+0x50>)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	4413      	add	r3, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009346:	e006      	b.n	8009356 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b07      	cmp	r3, #7
 8009352:	d9e7      	bls.n	8009324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009354:	bf00      	nop
 8009356:	bf00      	nop
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	200029c0 	.word	0x200029c0

08009368 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009378:	f001 fb6c 	bl	800aa54 <vPortEnterCritical>
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009382:	b25b      	sxtb	r3, r3
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d103      	bne.n	8009392 <vQueueWaitForMessageRestricted+0x2a>
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009398:	b25b      	sxtb	r3, r3
 800939a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939e:	d103      	bne.n	80093a8 <vQueueWaitForMessageRestricted+0x40>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093a8:	f001 fb84 	bl	800aab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	3324      	adds	r3, #36	; 0x24
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fc07 	bl	8009bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f7ff ff26 	bl	8009214 <prvUnlockQueue>
	}
 80093c8:	bf00      	nop
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08e      	sub	sp, #56	; 0x38
 80093d4:	af04      	add	r7, sp, #16
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	623b      	str	r3, [r7, #32]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <xTaskCreateStatic+0x46>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	61fb      	str	r3, [r7, #28]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009416:	235c      	movs	r3, #92	; 0x5c
 8009418:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b5c      	cmp	r3, #92	; 0x5c
 800941e:	d00a      	beq.n	8009436 <xTaskCreateStatic+0x66>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	61bb      	str	r3, [r7, #24]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009436:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	2b00      	cmp	r3, #0
 800943c:	d01e      	beq.n	800947c <xTaskCreateStatic+0xac>
 800943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009440:	2b00      	cmp	r3, #0
 8009442:	d01b      	beq.n	800947c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800944c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	2202      	movs	r2, #2
 8009452:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009456:	2300      	movs	r3, #0
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	9302      	str	r3, [sp, #8]
 800945e:	f107 0314 	add.w	r3, r7, #20
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 f850 	bl	8009514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009476:	f000 f8dd 	bl	8009634 <prvAddNewTaskToReadyList>
 800947a:	e001      	b.n	8009480 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009480:	697b      	ldr	r3, [r7, #20]
	}
 8009482:	4618      	mov	r0, r3
 8009484:	3728      	adds	r7, #40	; 0x28
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800948a:	b580      	push	{r7, lr}
 800948c:	b08c      	sub	sp, #48	; 0x30
 800948e:	af04      	add	r7, sp, #16
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	603b      	str	r3, [r7, #0]
 8009496:	4613      	mov	r3, r2
 8009498:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 fbfa 	bl	800ac98 <pvPortMalloc>
 80094a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00e      	beq.n	80094ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094ac:	205c      	movs	r0, #92	; 0x5c
 80094ae:	f001 fbf3 	bl	800ac98 <pvPortMalloc>
 80094b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	631a      	str	r2, [r3, #48]	; 0x30
 80094c0:	e005      	b.n	80094ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094c2:	6978      	ldr	r0, [r7, #20]
 80094c4:	f001 fcb4 	bl	800ae30 <vPortFree>
 80094c8:	e001      	b.n	80094ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d017      	beq.n	8009504 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094dc:	88fa      	ldrh	r2, [r7, #6]
 80094de:	2300      	movs	r3, #0
 80094e0:	9303      	str	r3, [sp, #12]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	9302      	str	r3, [sp, #8]
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f80e 	bl	8009514 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094f8:	69f8      	ldr	r0, [r7, #28]
 80094fa:	f000 f89b 	bl	8009634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094fe:	2301      	movs	r3, #1
 8009500:	61bb      	str	r3, [r7, #24]
 8009502:	e002      	b.n	800950a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009504:	f04f 33ff 	mov.w	r3, #4294967295
 8009508:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800950a:	69bb      	ldr	r3, [r7, #24]
	}
 800950c:	4618      	mov	r0, r3
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	461a      	mov	r2, r3
 800952c:	21a5      	movs	r1, #165	; 0xa5
 800952e:	f001 fdcf 	bl	800b0d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800953c:	3b01      	subs	r3, #1
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	f023 0307 	bic.w	r3, r3, #7
 800954a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	617b      	str	r3, [r7, #20]
}
 8009568:	bf00      	nop
 800956a:	e7fe      	b.n	800956a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d01f      	beq.n	80095b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009572:	2300      	movs	r3, #0
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	e012      	b.n	800959e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	7819      	ldrb	r1, [r3, #0]
 8009580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	4413      	add	r3, r2
 8009586:	3334      	adds	r3, #52	; 0x34
 8009588:	460a      	mov	r2, r1
 800958a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4413      	add	r3, r2
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d006      	beq.n	80095a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	3301      	adds	r3, #1
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	2b0f      	cmp	r3, #15
 80095a2:	d9e9      	bls.n	8009578 <prvInitialiseNewTask+0x64>
 80095a4:	e000      	b.n	80095a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80095a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095b0:	e003      	b.n	80095ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	2b37      	cmp	r3, #55	; 0x37
 80095be:	d901      	bls.n	80095c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095c0:	2337      	movs	r3, #55	; 0x37
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	2200      	movs	r2, #0
 80095d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	3304      	adds	r3, #4
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f978 	bl	80088d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	3318      	adds	r3, #24
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff f973 	bl	80088d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	2200      	movs	r2, #0
 8009604:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	68f9      	ldr	r1, [r7, #12]
 8009612:	69b8      	ldr	r0, [r7, #24]
 8009614:	f001 f8f4 	bl	800a800 <pxPortInitialiseStack>
 8009618:	4602      	mov	r2, r0
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800962a:	bf00      	nop
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800963c:	f001 fa0a 	bl	800aa54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009640:	4b2d      	ldr	r3, [pc, #180]	; (80096f8 <prvAddNewTaskToReadyList+0xc4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	4a2c      	ldr	r2, [pc, #176]	; (80096f8 <prvAddNewTaskToReadyList+0xc4>)
 8009648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800964a:	4b2c      	ldr	r3, [pc, #176]	; (80096fc <prvAddNewTaskToReadyList+0xc8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d109      	bne.n	8009666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009652:	4a2a      	ldr	r2, [pc, #168]	; (80096fc <prvAddNewTaskToReadyList+0xc8>)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009658:	4b27      	ldr	r3, [pc, #156]	; (80096f8 <prvAddNewTaskToReadyList+0xc4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d110      	bne.n	8009682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009660:	f000 fbe2 	bl	8009e28 <prvInitialiseTaskLists>
 8009664:	e00d      	b.n	8009682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009666:	4b26      	ldr	r3, [pc, #152]	; (8009700 <prvAddNewTaskToReadyList+0xcc>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d109      	bne.n	8009682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800966e:	4b23      	ldr	r3, [pc, #140]	; (80096fc <prvAddNewTaskToReadyList+0xc8>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	429a      	cmp	r2, r3
 800967a:	d802      	bhi.n	8009682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800967c:	4a1f      	ldr	r2, [pc, #124]	; (80096fc <prvAddNewTaskToReadyList+0xc8>)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009682:	4b20      	ldr	r3, [pc, #128]	; (8009704 <prvAddNewTaskToReadyList+0xd0>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	4a1e      	ldr	r2, [pc, #120]	; (8009704 <prvAddNewTaskToReadyList+0xd0>)
 800968a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800968c:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <prvAddNewTaskToReadyList+0xd0>)
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009698:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <prvAddNewTaskToReadyList+0xd4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d903      	bls.n	80096a8 <prvAddNewTaskToReadyList+0x74>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	4a18      	ldr	r2, [pc, #96]	; (8009708 <prvAddNewTaskToReadyList+0xd4>)
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4a15      	ldr	r2, [pc, #84]	; (800970c <prvAddNewTaskToReadyList+0xd8>)
 80096b6:	441a      	add	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7ff f913 	bl	80088ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096c4:	f001 f9f6 	bl	800aab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096c8:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <prvAddNewTaskToReadyList+0xcc>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00e      	beq.n	80096ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <prvAddNewTaskToReadyList+0xc8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	429a      	cmp	r2, r3
 80096dc:	d207      	bcs.n	80096ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096de:	4b0c      	ldr	r3, [pc, #48]	; (8009710 <prvAddNewTaskToReadyList+0xdc>)
 80096e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20002ed4 	.word	0x20002ed4
 80096fc:	20002a00 	.word	0x20002a00
 8009700:	20002ee0 	.word	0x20002ee0
 8009704:	20002ef0 	.word	0x20002ef0
 8009708:	20002edc 	.word	0x20002edc
 800970c:	20002a04 	.word	0x20002a04
 8009710:	e000ed04 	.word	0xe000ed04

08009714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800971a:	2300      	movs	r3, #0
 800971c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800971e:	2300      	movs	r3, #0
 8009720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009722:	463a      	mov	r2, r7
 8009724:	1d39      	adds	r1, r7, #4
 8009726:	f107 0308 	add.w	r3, r7, #8
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff f87c 	bl	8008828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	9202      	str	r2, [sp, #8]
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	2300      	movs	r3, #0
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	2300      	movs	r3, #0
 8009740:	460a      	mov	r2, r1
 8009742:	4921      	ldr	r1, [pc, #132]	; (80097c8 <vTaskStartScheduler+0xb4>)
 8009744:	4821      	ldr	r0, [pc, #132]	; (80097cc <vTaskStartScheduler+0xb8>)
 8009746:	f7ff fe43 	bl	80093d0 <xTaskCreateStatic>
 800974a:	4603      	mov	r3, r0
 800974c:	4a20      	ldr	r2, [pc, #128]	; (80097d0 <vTaskStartScheduler+0xbc>)
 800974e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009750:	4b1f      	ldr	r3, [pc, #124]	; (80097d0 <vTaskStartScheduler+0xbc>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009758:	2301      	movs	r3, #1
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e001      	b.n	8009762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800975e:	2300      	movs	r3, #0
 8009760:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d102      	bne.n	800976e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009768:	f000 fcfc 	bl	800a164 <xTimerCreateTimerTask>
 800976c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d116      	bne.n	80097a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	613b      	str	r3, [r7, #16]
}
 8009786:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009788:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <vTaskStartScheduler+0xc0>)
 800978a:	f04f 32ff 	mov.w	r2, #4294967295
 800978e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009790:	4b11      	ldr	r3, [pc, #68]	; (80097d8 <vTaskStartScheduler+0xc4>)
 8009792:	2201      	movs	r2, #1
 8009794:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009796:	4b11      	ldr	r3, [pc, #68]	; (80097dc <vTaskStartScheduler+0xc8>)
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800979c:	f001 f8b8 	bl	800a910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097a0:	e00e      	b.n	80097c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a8:	d10a      	bne.n	80097c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	60fb      	str	r3, [r7, #12]
}
 80097bc:	bf00      	nop
 80097be:	e7fe      	b.n	80097be <vTaskStartScheduler+0xaa>
}
 80097c0:	bf00      	nop
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	0800b154 	.word	0x0800b154
 80097cc:	08009df9 	.word	0x08009df9
 80097d0:	20002ef8 	.word	0x20002ef8
 80097d4:	20002ef4 	.word	0x20002ef4
 80097d8:	20002ee0 	.word	0x20002ee0
 80097dc:	20002ed8 	.word	0x20002ed8

080097e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097e0:	b480      	push	{r7}
 80097e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097e4:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <vTaskSuspendAll+0x18>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	4a03      	ldr	r2, [pc, #12]	; (80097f8 <vTaskSuspendAll+0x18>)
 80097ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097ee:	bf00      	nop
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	20002efc 	.word	0x20002efc

080097fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800980a:	4b42      	ldr	r3, [pc, #264]	; (8009914 <xTaskResumeAll+0x118>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <xTaskResumeAll+0x2c>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	603b      	str	r3, [r7, #0]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009828:	f001 f914 	bl	800aa54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800982c:	4b39      	ldr	r3, [pc, #228]	; (8009914 <xTaskResumeAll+0x118>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3b01      	subs	r3, #1
 8009832:	4a38      	ldr	r2, [pc, #224]	; (8009914 <xTaskResumeAll+0x118>)
 8009834:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009836:	4b37      	ldr	r3, [pc, #220]	; (8009914 <xTaskResumeAll+0x118>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d162      	bne.n	8009904 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800983e:	4b36      	ldr	r3, [pc, #216]	; (8009918 <xTaskResumeAll+0x11c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d05e      	beq.n	8009904 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009846:	e02f      	b.n	80098a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009848:	4b34      	ldr	r3, [pc, #208]	; (800991c <xTaskResumeAll+0x120>)
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3318      	adds	r3, #24
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff f8a5 	bl	80089a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3304      	adds	r3, #4
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff f8a0 	bl	80089a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009868:	4b2d      	ldr	r3, [pc, #180]	; (8009920 <xTaskResumeAll+0x124>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d903      	bls.n	8009878 <xTaskResumeAll+0x7c>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	4a2a      	ldr	r2, [pc, #168]	; (8009920 <xTaskResumeAll+0x124>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4a27      	ldr	r2, [pc, #156]	; (8009924 <xTaskResumeAll+0x128>)
 8009886:	441a      	add	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3304      	adds	r3, #4
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f7ff f82b 	bl	80088ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009898:	4b23      	ldr	r3, [pc, #140]	; (8009928 <xTaskResumeAll+0x12c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	429a      	cmp	r2, r3
 80098a0:	d302      	bcc.n	80098a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80098a2:	4b22      	ldr	r3, [pc, #136]	; (800992c <xTaskResumeAll+0x130>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098a8:	4b1c      	ldr	r3, [pc, #112]	; (800991c <xTaskResumeAll+0x120>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1cb      	bne.n	8009848 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098b6:	f000 fb55 	bl	8009f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098ba:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <xTaskResumeAll+0x134>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d010      	beq.n	80098e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098c6:	f000 f847 	bl	8009958 <xTaskIncrementTick>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098d0:	4b16      	ldr	r3, [pc, #88]	; (800992c <xTaskResumeAll+0x130>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3b01      	subs	r3, #1
 80098da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f1      	bne.n	80098c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80098e2:	4b13      	ldr	r3, [pc, #76]	; (8009930 <xTaskResumeAll+0x134>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098e8:	4b10      	ldr	r3, [pc, #64]	; (800992c <xTaskResumeAll+0x130>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098f4:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <xTaskResumeAll+0x138>)
 80098f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009904:	f001 f8d6 	bl	800aab4 <vPortExitCritical>

	return xAlreadyYielded;
 8009908:	68bb      	ldr	r3, [r7, #8]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20002efc 	.word	0x20002efc
 8009918:	20002ed4 	.word	0x20002ed4
 800991c:	20002e94 	.word	0x20002e94
 8009920:	20002edc 	.word	0x20002edc
 8009924:	20002a04 	.word	0x20002a04
 8009928:	20002a00 	.word	0x20002a00
 800992c:	20002ee8 	.word	0x20002ee8
 8009930:	20002ee4 	.word	0x20002ee4
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <xTaskGetTickCount+0x1c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009944:	687b      	ldr	r3, [r7, #4]
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	20002ed8 	.word	0x20002ed8

08009958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009962:	4b4f      	ldr	r3, [pc, #316]	; (8009aa0 <xTaskIncrementTick+0x148>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	f040 808f 	bne.w	8009a8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800996c:	4b4d      	ldr	r3, [pc, #308]	; (8009aa4 <xTaskIncrementTick+0x14c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3301      	adds	r3, #1
 8009972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009974:	4a4b      	ldr	r2, [pc, #300]	; (8009aa4 <xTaskIncrementTick+0x14c>)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d120      	bne.n	80099c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009980:	4b49      	ldr	r3, [pc, #292]	; (8009aa8 <xTaskIncrementTick+0x150>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	603b      	str	r3, [r7, #0]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <xTaskIncrementTick+0x46>
 80099a0:	4b41      	ldr	r3, [pc, #260]	; (8009aa8 <xTaskIncrementTick+0x150>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	4b41      	ldr	r3, [pc, #260]	; (8009aac <xTaskIncrementTick+0x154>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a3f      	ldr	r2, [pc, #252]	; (8009aa8 <xTaskIncrementTick+0x150>)
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	4a3f      	ldr	r2, [pc, #252]	; (8009aac <xTaskIncrementTick+0x154>)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	4b3e      	ldr	r3, [pc, #248]	; (8009ab0 <xTaskIncrementTick+0x158>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3301      	adds	r3, #1
 80099ba:	4a3d      	ldr	r2, [pc, #244]	; (8009ab0 <xTaskIncrementTick+0x158>)
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	f000 fad1 	bl	8009f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099c2:	4b3c      	ldr	r3, [pc, #240]	; (8009ab4 <xTaskIncrementTick+0x15c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d349      	bcc.n	8009a60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099cc:	4b36      	ldr	r3, [pc, #216]	; (8009aa8 <xTaskIncrementTick+0x150>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d104      	bne.n	80099e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d6:	4b37      	ldr	r3, [pc, #220]	; (8009ab4 <xTaskIncrementTick+0x15c>)
 80099d8:	f04f 32ff 	mov.w	r2, #4294967295
 80099dc:	601a      	str	r2, [r3, #0]
					break;
 80099de:	e03f      	b.n	8009a60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e0:	4b31      	ldr	r3, [pc, #196]	; (8009aa8 <xTaskIncrementTick+0x150>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d203      	bcs.n	8009a00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099f8:	4a2e      	ldr	r2, [pc, #184]	; (8009ab4 <xTaskIncrementTick+0x15c>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099fe:	e02f      	b.n	8009a60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe ffcd 	bl	80089a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d004      	beq.n	8009a1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	3318      	adds	r3, #24
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe ffc4 	bl	80089a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a20:	4b25      	ldr	r3, [pc, #148]	; (8009ab8 <xTaskIncrementTick+0x160>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d903      	bls.n	8009a30 <xTaskIncrementTick+0xd8>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	4a22      	ldr	r2, [pc, #136]	; (8009ab8 <xTaskIncrementTick+0x160>)
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4a1f      	ldr	r2, [pc, #124]	; (8009abc <xTaskIncrementTick+0x164>)
 8009a3e:	441a      	add	r2, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7fe ff4f 	bl	80088ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a50:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <xTaskIncrementTick+0x168>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d3b8      	bcc.n	80099cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a5e:	e7b5      	b.n	80099cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a60:	4b17      	ldr	r3, [pc, #92]	; (8009ac0 <xTaskIncrementTick+0x168>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a66:	4915      	ldr	r1, [pc, #84]	; (8009abc <xTaskIncrementTick+0x164>)
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d901      	bls.n	8009a7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a7c:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <xTaskIncrementTick+0x16c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d007      	beq.n	8009a94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	617b      	str	r3, [r7, #20]
 8009a88:	e004      	b.n	8009a94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <xTaskIncrementTick+0x170>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	4a0d      	ldr	r2, [pc, #52]	; (8009ac8 <xTaskIncrementTick+0x170>)
 8009a92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a94:	697b      	ldr	r3, [r7, #20]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20002efc 	.word	0x20002efc
 8009aa4:	20002ed8 	.word	0x20002ed8
 8009aa8:	20002e8c 	.word	0x20002e8c
 8009aac:	20002e90 	.word	0x20002e90
 8009ab0:	20002eec 	.word	0x20002eec
 8009ab4:	20002ef4 	.word	0x20002ef4
 8009ab8:	20002edc 	.word	0x20002edc
 8009abc:	20002a04 	.word	0x20002a04
 8009ac0:	20002a00 	.word	0x20002a00
 8009ac4:	20002ee8 	.word	0x20002ee8
 8009ac8:	20002ee4 	.word	0x20002ee4

08009acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ad2:	4b28      	ldr	r3, [pc, #160]	; (8009b74 <vTaskSwitchContext+0xa8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ada:	4b27      	ldr	r3, [pc, #156]	; (8009b78 <vTaskSwitchContext+0xac>)
 8009adc:	2201      	movs	r2, #1
 8009ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ae0:	e041      	b.n	8009b66 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009ae2:	4b25      	ldr	r3, [pc, #148]	; (8009b78 <vTaskSwitchContext+0xac>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae8:	4b24      	ldr	r3, [pc, #144]	; (8009b7c <vTaskSwitchContext+0xb0>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e010      	b.n	8009b12 <vTaskSwitchContext+0x46>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10a      	bne.n	8009b0c <vTaskSwitchContext+0x40>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	607b      	str	r3, [r7, #4]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <vTaskSwitchContext+0x3e>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	491b      	ldr	r1, [pc, #108]	; (8009b80 <vTaskSwitchContext+0xb4>)
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	440b      	add	r3, r1
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0e4      	beq.n	8009af0 <vTaskSwitchContext+0x24>
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4a13      	ldr	r2, [pc, #76]	; (8009b80 <vTaskSwitchContext+0xb4>)
 8009b32:	4413      	add	r3, r2
 8009b34:	60bb      	str	r3, [r7, #8]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	605a      	str	r2, [r3, #4]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	3308      	adds	r3, #8
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d104      	bne.n	8009b56 <vTaskSwitchContext+0x8a>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	605a      	str	r2, [r3, #4]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	4a09      	ldr	r2, [pc, #36]	; (8009b84 <vTaskSwitchContext+0xb8>)
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	4a06      	ldr	r2, [pc, #24]	; (8009b7c <vTaskSwitchContext+0xb0>)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6013      	str	r3, [r2, #0]
}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20002efc 	.word	0x20002efc
 8009b78:	20002ee8 	.word	0x20002ee8
 8009b7c:	20002edc 	.word	0x20002edc
 8009b80:	20002a04 	.word	0x20002a04
 8009b84:	20002a00 	.word	0x20002a00

08009b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	60fb      	str	r3, [r7, #12]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bae:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <vTaskPlaceOnEventList+0x44>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3318      	adds	r3, #24
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7fe febb 	bl	8008932 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	6838      	ldr	r0, [r7, #0]
 8009bc0:	f000 fa7c 	bl	800a0bc <prvAddCurrentTaskToDelayedList>
}
 8009bc4:	bf00      	nop
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20002a00 	.word	0x20002a00

08009bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	617b      	str	r3, [r7, #20]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bf8:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <vTaskPlaceOnEventListRestricted+0x54>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3318      	adds	r3, #24
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7fe fe72 	bl	80088ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	68b8      	ldr	r0, [r7, #8]
 8009c16:	f000 fa51 	bl	800a0bc <prvAddCurrentTaskToDelayedList>
	}
 8009c1a:	bf00      	nop
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20002a00 	.word	0x20002a00

08009c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10a      	bne.n	8009c54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	60fb      	str	r3, [r7, #12]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	3318      	adds	r3, #24
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fe fea3 	bl	80089a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c5e:	4b1e      	ldr	r3, [pc, #120]	; (8009cd8 <xTaskRemoveFromEventList+0xb0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d11d      	bne.n	8009ca2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fe9a 	bl	80089a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <xTaskRemoveFromEventList+0xb4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d903      	bls.n	8009c84 <xTaskRemoveFromEventList+0x5c>
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	4a16      	ldr	r2, [pc, #88]	; (8009cdc <xTaskRemoveFromEventList+0xb4>)
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4a13      	ldr	r2, [pc, #76]	; (8009ce0 <xTaskRemoveFromEventList+0xb8>)
 8009c92:	441a      	add	r2, r3
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3304      	adds	r3, #4
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f7fe fe25 	bl	80088ea <vListInsertEnd>
 8009ca0:	e005      	b.n	8009cae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	3318      	adds	r3, #24
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	480e      	ldr	r0, [pc, #56]	; (8009ce4 <xTaskRemoveFromEventList+0xbc>)
 8009caa:	f7fe fe1e 	bl	80088ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <xTaskRemoveFromEventList+0xc0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d905      	bls.n	8009cc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <xTaskRemoveFromEventList+0xc4>)
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	e001      	b.n	8009ccc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ccc:	697b      	ldr	r3, [r7, #20]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3718      	adds	r7, #24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20002efc 	.word	0x20002efc
 8009cdc:	20002edc 	.word	0x20002edc
 8009ce0:	20002a04 	.word	0x20002a04
 8009ce4:	20002e94 	.word	0x20002e94
 8009ce8:	20002a00 	.word	0x20002a00
 8009cec:	20002ee8 	.word	0x20002ee8

08009cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cf8:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <vTaskInternalSetTimeOutState+0x24>)
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d00:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <vTaskInternalSetTimeOutState+0x28>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	605a      	str	r2, [r3, #4]
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	20002eec 	.word	0x20002eec
 8009d18:	20002ed8 	.word	0x20002ed8

08009d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	613b      	str	r3, [r7, #16]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	60fb      	str	r3, [r7, #12]
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009d5e:	f000 fe79 	bl	800aa54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d62:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <xTaskCheckForTimeOut+0xbc>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7a:	d102      	bne.n	8009d82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	61fb      	str	r3, [r7, #28]
 8009d80:	e023      	b.n	8009dca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	4b15      	ldr	r3, [pc, #84]	; (8009ddc <xTaskCheckForTimeOut+0xc0>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d007      	beq.n	8009d9e <xTaskCheckForTimeOut+0x82>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d302      	bcc.n	8009d9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	61fb      	str	r3, [r7, #28]
 8009d9c:	e015      	b.n	8009dca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d20b      	bcs.n	8009dc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	1ad2      	subs	r2, r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ff9b 	bl	8009cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61fb      	str	r3, [r7, #28]
 8009dbe:	e004      	b.n	8009dca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009dca:	f000 fe73 	bl	800aab4 <vPortExitCritical>

	return xReturn;
 8009dce:	69fb      	ldr	r3, [r7, #28]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3720      	adds	r7, #32
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20002ed8 	.word	0x20002ed8
 8009ddc:	20002eec 	.word	0x20002eec

08009de0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009de0:	b480      	push	{r7}
 8009de2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009de4:	4b03      	ldr	r3, [pc, #12]	; (8009df4 <vTaskMissedYield+0x14>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	601a      	str	r2, [r3, #0]
}
 8009dea:	bf00      	nop
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	20002ee8 	.word	0x20002ee8

08009df8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e00:	f000 f852 	bl	8009ea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e04:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <prvIdleTask+0x28>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d9f9      	bls.n	8009e00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <prvIdleTask+0x2c>)
 8009e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e1c:	e7f0      	b.n	8009e00 <prvIdleTask+0x8>
 8009e1e:	bf00      	nop
 8009e20:	20002a04 	.word	0x20002a04
 8009e24:	e000ed04 	.word	0xe000ed04

08009e28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e2e:	2300      	movs	r3, #0
 8009e30:	607b      	str	r3, [r7, #4]
 8009e32:	e00c      	b.n	8009e4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4a12      	ldr	r2, [pc, #72]	; (8009e88 <prvInitialiseTaskLists+0x60>)
 8009e40:	4413      	add	r3, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fd24 	bl	8008890 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	607b      	str	r3, [r7, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b37      	cmp	r3, #55	; 0x37
 8009e52:	d9ef      	bls.n	8009e34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e54:	480d      	ldr	r0, [pc, #52]	; (8009e8c <prvInitialiseTaskLists+0x64>)
 8009e56:	f7fe fd1b 	bl	8008890 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e5a:	480d      	ldr	r0, [pc, #52]	; (8009e90 <prvInitialiseTaskLists+0x68>)
 8009e5c:	f7fe fd18 	bl	8008890 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e60:	480c      	ldr	r0, [pc, #48]	; (8009e94 <prvInitialiseTaskLists+0x6c>)
 8009e62:	f7fe fd15 	bl	8008890 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e66:	480c      	ldr	r0, [pc, #48]	; (8009e98 <prvInitialiseTaskLists+0x70>)
 8009e68:	f7fe fd12 	bl	8008890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e6c:	480b      	ldr	r0, [pc, #44]	; (8009e9c <prvInitialiseTaskLists+0x74>)
 8009e6e:	f7fe fd0f 	bl	8008890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e72:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <prvInitialiseTaskLists+0x78>)
 8009e74:	4a05      	ldr	r2, [pc, #20]	; (8009e8c <prvInitialiseTaskLists+0x64>)
 8009e76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <prvInitialiseTaskLists+0x7c>)
 8009e7a:	4a05      	ldr	r2, [pc, #20]	; (8009e90 <prvInitialiseTaskLists+0x68>)
 8009e7c:	601a      	str	r2, [r3, #0]
}
 8009e7e:	bf00      	nop
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20002a04 	.word	0x20002a04
 8009e8c:	20002e64 	.word	0x20002e64
 8009e90:	20002e78 	.word	0x20002e78
 8009e94:	20002e94 	.word	0x20002e94
 8009e98:	20002ea8 	.word	0x20002ea8
 8009e9c:	20002ec0 	.word	0x20002ec0
 8009ea0:	20002e8c 	.word	0x20002e8c
 8009ea4:	20002e90 	.word	0x20002e90

08009ea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eae:	e019      	b.n	8009ee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009eb0:	f000 fdd0 	bl	800aa54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eb4:	4b10      	ldr	r3, [pc, #64]	; (8009ef8 <prvCheckTasksWaitingTermination+0x50>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fd6f 	bl	80089a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <prvCheckTasksWaitingTermination+0x54>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	4a0b      	ldr	r2, [pc, #44]	; (8009efc <prvCheckTasksWaitingTermination+0x54>)
 8009ece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <prvCheckTasksWaitingTermination+0x58>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	4a0a      	ldr	r2, [pc, #40]	; (8009f00 <prvCheckTasksWaitingTermination+0x58>)
 8009ed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009eda:	f000 fdeb 	bl	800aab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f810 	bl	8009f04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ee4:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <prvCheckTasksWaitingTermination+0x58>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e1      	bne.n	8009eb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009eec:	bf00      	nop
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20002ea8 	.word	0x20002ea8
 8009efc:	20002ed4 	.word	0x20002ed4
 8009f00:	20002ebc 	.word	0x20002ebc

08009f04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d108      	bne.n	8009f28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 ff88 	bl	800ae30 <vPortFree>
				vPortFree( pxTCB );
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 ff85 	bl	800ae30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f26:	e018      	b.n	8009f5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d103      	bne.n	8009f3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 ff7c 	bl	800ae30 <vPortFree>
	}
 8009f38:	e00f      	b.n	8009f5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d00a      	beq.n	8009f5a <prvDeleteTCB+0x56>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	60fb      	str	r3, [r7, #12]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <prvDeleteTCB+0x54>
	}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6a:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d104      	bne.n	8009f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f74:	4b0a      	ldr	r3, [pc, #40]	; (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f7c:	e008      	b.n	8009f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f8e:	6013      	str	r3, [r2, #0]
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	20002e8c 	.word	0x20002e8c
 8009fa0:	20002ef4 	.word	0x20002ef4

08009fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <xTaskGetSchedulerState+0x34>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d102      	bne.n	8009fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	607b      	str	r3, [r7, #4]
 8009fb6:	e008      	b.n	8009fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb8:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <xTaskGetSchedulerState+0x38>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d102      	bne.n	8009fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	e001      	b.n	8009fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fca:	687b      	ldr	r3, [r7, #4]
	}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20002ee0 	.word	0x20002ee0
 8009fdc:	20002efc 	.word	0x20002efc

08009fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d056      	beq.n	800a0a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ff6:	4b2e      	ldr	r3, [pc, #184]	; (800a0b0 <xTaskPriorityDisinherit+0xd0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d00a      	beq.n	800a016 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	60fb      	str	r3, [r7, #12]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	60bb      	str	r3, [r7, #8]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a038:	1e5a      	subs	r2, r3, #1
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a046:	429a      	cmp	r2, r3
 800a048:	d02c      	beq.n	800a0a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d128      	bne.n	800a0a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	3304      	adds	r3, #4
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe fca4 	bl	80089a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a074:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <xTaskPriorityDisinherit+0xd4>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d903      	bls.n	800a084 <xTaskPriorityDisinherit+0xa4>
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a080:	4a0c      	ldr	r2, [pc, #48]	; (800a0b4 <xTaskPriorityDisinherit+0xd4>)
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4a09      	ldr	r2, [pc, #36]	; (800a0b8 <xTaskPriorityDisinherit+0xd8>)
 800a092:	441a      	add	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	3304      	adds	r3, #4
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f7fe fc25 	bl	80088ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0a4:	697b      	ldr	r3, [r7, #20]
	}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20002a00 	.word	0x20002a00
 800a0b4:	20002edc 	.word	0x20002edc
 800a0b8:	20002a04 	.word	0x20002a04

0800a0bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0c6:	4b21      	ldr	r3, [pc, #132]	; (800a14c <prvAddCurrentTaskToDelayedList+0x90>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0cc:	4b20      	ldr	r3, [pc, #128]	; (800a150 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe fc66 	bl	80089a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0de:	d10a      	bne.n	800a0f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0e6:	4b1a      	ldr	r3, [pc, #104]	; (800a150 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4819      	ldr	r0, [pc, #100]	; (800a154 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0f0:	f7fe fbfb 	bl	80088ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0f4:	e026      	b.n	800a144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0fe:	4b14      	ldr	r3, [pc, #80]	; (800a150 <prvAddCurrentTaskToDelayedList+0x94>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d209      	bcs.n	800a122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a10e:	4b12      	ldr	r3, [pc, #72]	; (800a158 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b0f      	ldr	r3, [pc, #60]	; (800a150 <prvAddCurrentTaskToDelayedList+0x94>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3304      	adds	r3, #4
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f7fe fc09 	bl	8008932 <vListInsert>
}
 800a120:	e010      	b.n	800a144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a122:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	4b0a      	ldr	r3, [pc, #40]	; (800a150 <prvAddCurrentTaskToDelayedList+0x94>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4619      	mov	r1, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	f7fe fbff 	bl	8008932 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a134:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d202      	bcs.n	800a144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a13e:	4a08      	ldr	r2, [pc, #32]	; (800a160 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	6013      	str	r3, [r2, #0]
}
 800a144:	bf00      	nop
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20002ed8 	.word	0x20002ed8
 800a150:	20002a00 	.word	0x20002a00
 800a154:	20002ec0 	.word	0x20002ec0
 800a158:	20002e90 	.word	0x20002e90
 800a15c:	20002e8c 	.word	0x20002e8c
 800a160:	20002ef4 	.word	0x20002ef4

0800a164 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08a      	sub	sp, #40	; 0x28
 800a168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a16e:	f000 fb07 	bl	800a780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a172:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <xTimerCreateTimerTask+0x80>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d021      	beq.n	800a1be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a182:	1d3a      	adds	r2, r7, #4
 800a184:	f107 0108 	add.w	r1, r7, #8
 800a188:	f107 030c 	add.w	r3, r7, #12
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fb65 	bl	800885c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	9202      	str	r2, [sp, #8]
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	2302      	movs	r3, #2
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	460a      	mov	r2, r1
 800a1a4:	4910      	ldr	r1, [pc, #64]	; (800a1e8 <xTimerCreateTimerTask+0x84>)
 800a1a6:	4811      	ldr	r0, [pc, #68]	; (800a1ec <xTimerCreateTimerTask+0x88>)
 800a1a8:	f7ff f912 	bl	80093d0 <xTaskCreateStatic>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	4a10      	ldr	r2, [pc, #64]	; (800a1f0 <xTimerCreateTimerTask+0x8c>)
 800a1b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1b2:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <xTimerCreateTimerTask+0x8c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	613b      	str	r3, [r7, #16]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a1da:	697b      	ldr	r3, [r7, #20]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20002f30 	.word	0x20002f30
 800a1e8:	0800b15c 	.word	0x0800b15c
 800a1ec:	0800a329 	.word	0x0800a329
 800a1f0:	20002f34 	.word	0x20002f34

0800a1f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	; 0x28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a202:	2300      	movs	r3, #0
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	623b      	str	r3, [r7, #32]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a222:	4b1a      	ldr	r3, [pc, #104]	; (800a28c <xTimerGenericCommand+0x98>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d02a      	beq.n	800a280 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b05      	cmp	r3, #5
 800a23a:	dc18      	bgt.n	800a26e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a23c:	f7ff feb2 	bl	8009fa4 <xTaskGetSchedulerState>
 800a240:	4603      	mov	r3, r0
 800a242:	2b02      	cmp	r3, #2
 800a244:	d109      	bne.n	800a25a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a246:	4b11      	ldr	r3, [pc, #68]	; (800a28c <xTimerGenericCommand+0x98>)
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	f107 0110 	add.w	r1, r7, #16
 800a24e:	2300      	movs	r3, #0
 800a250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a252:	f7fe fcd5 	bl	8008c00 <xQueueGenericSend>
 800a256:	6278      	str	r0, [r7, #36]	; 0x24
 800a258:	e012      	b.n	800a280 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a25a:	4b0c      	ldr	r3, [pc, #48]	; (800a28c <xTimerGenericCommand+0x98>)
 800a25c:	6818      	ldr	r0, [r3, #0]
 800a25e:	f107 0110 	add.w	r1, r7, #16
 800a262:	2300      	movs	r3, #0
 800a264:	2200      	movs	r2, #0
 800a266:	f7fe fccb 	bl	8008c00 <xQueueGenericSend>
 800a26a:	6278      	str	r0, [r7, #36]	; 0x24
 800a26c:	e008      	b.n	800a280 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a26e:	4b07      	ldr	r3, [pc, #28]	; (800a28c <xTimerGenericCommand+0x98>)
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	f107 0110 	add.w	r1, r7, #16
 800a276:	2300      	movs	r3, #0
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	f7fe fdbf 	bl	8008dfc <xQueueGenericSendFromISR>
 800a27e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a282:	4618      	mov	r0, r3
 800a284:	3728      	adds	r7, #40	; 0x28
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20002f30 	.word	0x20002f30

0800a290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b088      	sub	sp, #32
 800a294:	af02      	add	r7, sp, #8
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a29a:	4b22      	ldr	r3, [pc, #136]	; (800a324 <prvProcessExpiredTimer+0x94>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe fb7b 	bl	80089a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d022      	beq.n	800a302 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	699a      	ldr	r2, [r3, #24]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	18d1      	adds	r1, r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	6978      	ldr	r0, [r7, #20]
 800a2ca:	f000 f8d1 	bl	800a470 <prvInsertTimerInActiveList>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d01f      	beq.n	800a314 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6978      	ldr	r0, [r7, #20]
 800a2e0:	f7ff ff88 	bl	800a1f4 <xTimerGenericCommand>
 800a2e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d113      	bne.n	800a314 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	60fb      	str	r3, [r7, #12]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a308:	f023 0301 	bic.w	r3, r3, #1
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	6978      	ldr	r0, [r7, #20]
 800a31a:	4798      	blx	r3
}
 800a31c:	bf00      	nop
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20002f28 	.word	0x20002f28

0800a328 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a330:	f107 0308 	add.w	r3, r7, #8
 800a334:	4618      	mov	r0, r3
 800a336:	f000 f857 	bl	800a3e8 <prvGetNextExpireTime>
 800a33a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f803 	bl	800a34c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a346:	f000 f8d5 	bl	800a4f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a34a:	e7f1      	b.n	800a330 <prvTimerTask+0x8>

0800a34c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a356:	f7ff fa43 	bl	80097e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 f866 	bl	800a430 <prvSampleTimeNow>
 800a364:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d130      	bne.n	800a3ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10a      	bne.n	800a388 <prvProcessTimerOrBlockTask+0x3c>
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	429a      	cmp	r2, r3
 800a378:	d806      	bhi.n	800a388 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a37a:	f7ff fa3f 	bl	80097fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a37e:	68f9      	ldr	r1, [r7, #12]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff ff85 	bl	800a290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a386:	e024      	b.n	800a3d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d008      	beq.n	800a3a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a38e:	4b13      	ldr	r3, [pc, #76]	; (800a3dc <prvProcessTimerOrBlockTask+0x90>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <prvProcessTimerOrBlockTask+0x50>
 800a398:	2301      	movs	r3, #1
 800a39a:	e000      	b.n	800a39e <prvProcessTimerOrBlockTask+0x52>
 800a39c:	2300      	movs	r3, #0
 800a39e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3a0:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <prvProcessTimerOrBlockTask+0x94>)
 800a3a2:	6818      	ldr	r0, [r3, #0]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	f7fe ffdb 	bl	8009368 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3b2:	f7ff fa23 	bl	80097fc <xTaskResumeAll>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3bc:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <prvProcessTimerOrBlockTask+0x98>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
}
 800a3cc:	e001      	b.n	800a3d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3ce:	f7ff fa15 	bl	80097fc <xTaskResumeAll>
}
 800a3d2:	bf00      	nop
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20002f2c 	.word	0x20002f2c
 800a3e0:	20002f30 	.word	0x20002f30
 800a3e4:	e000ed04 	.word	0xe000ed04

0800a3e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3f0:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <prvGetNextExpireTime+0x44>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <prvGetNextExpireTime+0x16>
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	e000      	b.n	800a400 <prvGetNextExpireTime+0x18>
 800a3fe:	2200      	movs	r2, #0
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d105      	bne.n	800a418 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a40c:	4b07      	ldr	r3, [pc, #28]	; (800a42c <prvGetNextExpireTime+0x44>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	e001      	b.n	800a41c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a41c:	68fb      	ldr	r3, [r7, #12]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	20002f28 	.word	0x20002f28

0800a430 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a438:	f7ff fa7e 	bl	8009938 <xTaskGetTickCount>
 800a43c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a43e:	4b0b      	ldr	r3, [pc, #44]	; (800a46c <prvSampleTimeNow+0x3c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	429a      	cmp	r2, r3
 800a446:	d205      	bcs.n	800a454 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a448:	f000 f936 	bl	800a6b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	e002      	b.n	800a45a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a45a:	4a04      	ldr	r2, [pc, #16]	; (800a46c <prvSampleTimeNow+0x3c>)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a460:	68fb      	ldr	r3, [r7, #12]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20002f38 	.word	0x20002f38

0800a470 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d812      	bhi.n	800a4bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d302      	bcc.n	800a4aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e01b      	b.n	800a4e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4aa:	4b10      	ldr	r3, [pc, #64]	; (800a4ec <prvInsertTimerInActiveList+0x7c>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f7fe fa3c 	bl	8008932 <vListInsert>
 800a4ba:	e012      	b.n	800a4e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d206      	bcs.n	800a4d2 <prvInsertTimerInActiveList+0x62>
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d302      	bcc.n	800a4d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	e007      	b.n	800a4e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <prvInsertTimerInActiveList+0x80>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4610      	mov	r0, r2
 800a4de:	f7fe fa28 	bl	8008932 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4e2:	697b      	ldr	r3, [r7, #20]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20002f2c 	.word	0x20002f2c
 800a4f0:	20002f28 	.word	0x20002f28

0800a4f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08e      	sub	sp, #56	; 0x38
 800a4f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4fa:	e0ca      	b.n	800a692 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	da18      	bge.n	800a534 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a502:	1d3b      	adds	r3, r7, #4
 800a504:	3304      	adds	r3, #4
 800a506:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	61fb      	str	r3, [r7, #28]
}
 800a520:	bf00      	nop
 800a522:	e7fe      	b.n	800a522 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a52a:	6850      	ldr	r0, [r2, #4]
 800a52c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a52e:	6892      	ldr	r2, [r2, #8]
 800a530:	4611      	mov	r1, r2
 800a532:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f2c0 80aa 	blt.w	800a690 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	3304      	adds	r3, #4
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fa29 	bl	80089a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a552:	463b      	mov	r3, r7
 800a554:	4618      	mov	r0, r3
 800a556:	f7ff ff6b 	bl	800a430 <prvSampleTimeNow>
 800a55a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b09      	cmp	r3, #9
 800a560:	f200 8097 	bhi.w	800a692 <prvProcessReceivedCommands+0x19e>
 800a564:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <prvProcessReceivedCommands+0x78>)
 800a566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56a:	bf00      	nop
 800a56c:	0800a595 	.word	0x0800a595
 800a570:	0800a595 	.word	0x0800a595
 800a574:	0800a595 	.word	0x0800a595
 800a578:	0800a609 	.word	0x0800a609
 800a57c:	0800a61d 	.word	0x0800a61d
 800a580:	0800a667 	.word	0x0800a667
 800a584:	0800a595 	.word	0x0800a595
 800a588:	0800a595 	.word	0x0800a595
 800a58c:	0800a609 	.word	0x0800a609
 800a590:	0800a61d 	.word	0x0800a61d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a59a:	f043 0301 	orr.w	r3, r3, #1
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	18d1      	adds	r1, r2, r3
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b4:	f7ff ff5c 	bl	800a470 <prvInsertTimerInActiveList>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d069      	beq.n	800a692 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d05e      	beq.n	800a692 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	441a      	add	r2, r3
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e6:	f7ff fe05 	bl	800a1f4 <xTimerGenericCommand>
 800a5ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d14f      	bne.n	800a692 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	61bb      	str	r3, [r7, #24]
}
 800a604:	bf00      	nop
 800a606:	e7fe      	b.n	800a606 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a60e:	f023 0301 	bic.w	r3, r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a61a:	e03a      	b.n	800a692 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a622:	f043 0301 	orr.w	r3, r3, #1
 800a626:	b2da      	uxtb	r2, r3
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	617b      	str	r3, [r7, #20]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	699a      	ldr	r2, [r3, #24]
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	18d1      	adds	r1, r2, r3
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a660:	f7ff ff06 	bl	800a470 <prvInsertTimerInActiveList>
					break;
 800a664:	e015      	b.n	800a692 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a66c:	f003 0302 	and.w	r3, r3, #2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d103      	bne.n	800a67c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a676:	f000 fbdb 	bl	800ae30 <vPortFree>
 800a67a:	e00a      	b.n	800a692 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a682:	f023 0301 	bic.w	r3, r3, #1
 800a686:	b2da      	uxtb	r2, r3
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a68e:	e000      	b.n	800a692 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a692:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <prvProcessReceivedCommands+0x1c0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	1d39      	adds	r1, r7, #4
 800a698:	2200      	movs	r2, #0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe fc4a 	bl	8008f34 <xQueueReceive>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f47f af2a 	bne.w	800a4fc <prvProcessReceivedCommands+0x8>
	}
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	3730      	adds	r7, #48	; 0x30
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20002f30 	.word	0x20002f30

0800a6b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6be:	e048      	b.n	800a752 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6c0:	4b2d      	ldr	r3, [pc, #180]	; (800a778 <prvSwitchTimerLists+0xc0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ca:	4b2b      	ldr	r3, [pc, #172]	; (800a778 <prvSwitchTimerLists+0xc0>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fe f963 	bl	80089a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d02e      	beq.n	800a752 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	429a      	cmp	r2, r3
 800a704:	d90e      	bls.n	800a724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a712:	4b19      	ldr	r3, [pc, #100]	; (800a778 <prvSwitchTimerLists+0xc0>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3304      	adds	r3, #4
 800a71a:	4619      	mov	r1, r3
 800a71c:	4610      	mov	r0, r2
 800a71e:	f7fe f908 	bl	8008932 <vListInsert>
 800a722:	e016      	b.n	800a752 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a724:	2300      	movs	r3, #0
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	2300      	movs	r3, #0
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	2100      	movs	r1, #0
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f7ff fd60 	bl	800a1f4 <xTimerGenericCommand>
 800a734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	603b      	str	r3, [r7, #0]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a752:	4b09      	ldr	r3, [pc, #36]	; (800a778 <prvSwitchTimerLists+0xc0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1b1      	bne.n	800a6c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a75c:	4b06      	ldr	r3, [pc, #24]	; (800a778 <prvSwitchTimerLists+0xc0>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a762:	4b06      	ldr	r3, [pc, #24]	; (800a77c <prvSwitchTimerLists+0xc4>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a04      	ldr	r2, [pc, #16]	; (800a778 <prvSwitchTimerLists+0xc0>)
 800a768:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a76a:	4a04      	ldr	r2, [pc, #16]	; (800a77c <prvSwitchTimerLists+0xc4>)
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	6013      	str	r3, [r2, #0]
}
 800a770:	bf00      	nop
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20002f28 	.word	0x20002f28
 800a77c:	20002f2c 	.word	0x20002f2c

0800a780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a786:	f000 f965 	bl	800aa54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a78a:	4b15      	ldr	r3, [pc, #84]	; (800a7e0 <prvCheckForValidListAndQueue+0x60>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d120      	bne.n	800a7d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a792:	4814      	ldr	r0, [pc, #80]	; (800a7e4 <prvCheckForValidListAndQueue+0x64>)
 800a794:	f7fe f87c 	bl	8008890 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a798:	4813      	ldr	r0, [pc, #76]	; (800a7e8 <prvCheckForValidListAndQueue+0x68>)
 800a79a:	f7fe f879 	bl	8008890 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a79e:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <prvCheckForValidListAndQueue+0x6c>)
 800a7a0:	4a10      	ldr	r2, [pc, #64]	; (800a7e4 <prvCheckForValidListAndQueue+0x64>)
 800a7a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7a4:	4b12      	ldr	r3, [pc, #72]	; (800a7f0 <prvCheckForValidListAndQueue+0x70>)
 800a7a6:	4a10      	ldr	r2, [pc, #64]	; (800a7e8 <prvCheckForValidListAndQueue+0x68>)
 800a7a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	4b11      	ldr	r3, [pc, #68]	; (800a7f4 <prvCheckForValidListAndQueue+0x74>)
 800a7b0:	4a11      	ldr	r2, [pc, #68]	; (800a7f8 <prvCheckForValidListAndQueue+0x78>)
 800a7b2:	2110      	movs	r1, #16
 800a7b4:	200a      	movs	r0, #10
 800a7b6:	f7fe f987 	bl	8008ac8 <xQueueGenericCreateStatic>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4a08      	ldr	r2, [pc, #32]	; (800a7e0 <prvCheckForValidListAndQueue+0x60>)
 800a7be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <prvCheckForValidListAndQueue+0x60>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d005      	beq.n	800a7d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <prvCheckForValidListAndQueue+0x60>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	490b      	ldr	r1, [pc, #44]	; (800a7fc <prvCheckForValidListAndQueue+0x7c>)
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fda0 	bl	8009314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7d4:	f000 f96e 	bl	800aab4 <vPortExitCritical>
}
 800a7d8:	bf00      	nop
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20002f30 	.word	0x20002f30
 800a7e4:	20002f00 	.word	0x20002f00
 800a7e8:	20002f14 	.word	0x20002f14
 800a7ec:	20002f28 	.word	0x20002f28
 800a7f0:	20002f2c 	.word	0x20002f2c
 800a7f4:	20002fdc 	.word	0x20002fdc
 800a7f8:	20002f3c 	.word	0x20002f3c
 800a7fc:	0800b164 	.word	0x0800b164

0800a800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3b04      	subs	r3, #4
 800a810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3b04      	subs	r3, #4
 800a81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f023 0201 	bic.w	r2, r3, #1
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3b04      	subs	r3, #4
 800a82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a830:	4a0c      	ldr	r2, [pc, #48]	; (800a864 <pxPortInitialiseStack+0x64>)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3b14      	subs	r3, #20
 800a83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	3b04      	subs	r3, #4
 800a846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f06f 0202 	mvn.w	r2, #2
 800a84e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3b20      	subs	r3, #32
 800a854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a856:	68fb      	ldr	r3, [r7, #12]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	0800a869 	.word	0x0800a869

0800a868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a872:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <prvTaskExitError+0x54>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87a:	d00a      	beq.n	800a892 <prvTaskExitError+0x2a>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	60fb      	str	r3, [r7, #12]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <prvTaskExitError+0x28>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60bb      	str	r3, [r7, #8]
}
 800a8a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8a6:	bf00      	nop
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0fc      	beq.n	800a8a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8ae:	bf00      	nop
 800a8b0:	bf00      	nop
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	2000000c 	.word	0x2000000c

0800a8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8c0:	4b07      	ldr	r3, [pc, #28]	; (800a8e0 <pxCurrentTCBConst2>)
 800a8c2:	6819      	ldr	r1, [r3, #0]
 800a8c4:	6808      	ldr	r0, [r1, #0]
 800a8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	f380 8809 	msr	PSP, r0
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f04f 0000 	mov.w	r0, #0
 800a8d6:	f380 8811 	msr	BASEPRI, r0
 800a8da:	4770      	bx	lr
 800a8dc:	f3af 8000 	nop.w

0800a8e0 <pxCurrentTCBConst2>:
 800a8e0:	20002a00 	.word	0x20002a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop

0800a8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8e8:	4808      	ldr	r0, [pc, #32]	; (800a90c <prvPortStartFirstTask+0x24>)
 800a8ea:	6800      	ldr	r0, [r0, #0]
 800a8ec:	6800      	ldr	r0, [r0, #0]
 800a8ee:	f380 8808 	msr	MSP, r0
 800a8f2:	f04f 0000 	mov.w	r0, #0
 800a8f6:	f380 8814 	msr	CONTROL, r0
 800a8fa:	b662      	cpsie	i
 800a8fc:	b661      	cpsie	f
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	df00      	svc	0
 800a908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a90a:	bf00      	nop
 800a90c:	e000ed08 	.word	0xe000ed08

0800a910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a916:	4b46      	ldr	r3, [pc, #280]	; (800aa30 <xPortStartScheduler+0x120>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a46      	ldr	r2, [pc, #280]	; (800aa34 <xPortStartScheduler+0x124>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d10a      	bne.n	800a936 <xPortStartScheduler+0x26>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	613b      	str	r3, [r7, #16]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a936:	4b3e      	ldr	r3, [pc, #248]	; (800aa30 <xPortStartScheduler+0x120>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a3f      	ldr	r2, [pc, #252]	; (800aa38 <xPortStartScheduler+0x128>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d10a      	bne.n	800a956 <xPortStartScheduler+0x46>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	60fb      	str	r3, [r7, #12]
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a956:	4b39      	ldr	r3, [pc, #228]	; (800aa3c <xPortStartScheduler+0x12c>)
 800a958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	22ff      	movs	r2, #255	; 0xff
 800a966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	4b31      	ldr	r3, [pc, #196]	; (800aa40 <xPortStartScheduler+0x130>)
 800a97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a97e:	4b31      	ldr	r3, [pc, #196]	; (800aa44 <xPortStartScheduler+0x134>)
 800a980:	2207      	movs	r2, #7
 800a982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a984:	e009      	b.n	800a99a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a986:	4b2f      	ldr	r3, [pc, #188]	; (800aa44 <xPortStartScheduler+0x134>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	4a2d      	ldr	r2, [pc, #180]	; (800aa44 <xPortStartScheduler+0x134>)
 800a98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b80      	cmp	r3, #128	; 0x80
 800a9a4:	d0ef      	beq.n	800a986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9a6:	4b27      	ldr	r3, [pc, #156]	; (800aa44 <xPortStartScheduler+0x134>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f1c3 0307 	rsb	r3, r3, #7
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d00a      	beq.n	800a9c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	60bb      	str	r3, [r7, #8]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9c8:	4b1e      	ldr	r3, [pc, #120]	; (800aa44 <xPortStartScheduler+0x134>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	021b      	lsls	r3, r3, #8
 800a9ce:	4a1d      	ldr	r2, [pc, #116]	; (800aa44 <xPortStartScheduler+0x134>)
 800a9d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9d2:	4b1c      	ldr	r3, [pc, #112]	; (800aa44 <xPortStartScheduler+0x134>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9da:	4a1a      	ldr	r2, [pc, #104]	; (800aa44 <xPortStartScheduler+0x134>)
 800a9dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9e6:	4b18      	ldr	r3, [pc, #96]	; (800aa48 <xPortStartScheduler+0x138>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a17      	ldr	r2, [pc, #92]	; (800aa48 <xPortStartScheduler+0x138>)
 800a9ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9f2:	4b15      	ldr	r3, [pc, #84]	; (800aa48 <xPortStartScheduler+0x138>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a14      	ldr	r2, [pc, #80]	; (800aa48 <xPortStartScheduler+0x138>)
 800a9f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9fe:	f000 f8dd 	bl	800abbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa02:	4b12      	ldr	r3, [pc, #72]	; (800aa4c <xPortStartScheduler+0x13c>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa08:	f000 f8fc 	bl	800ac04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa0c:	4b10      	ldr	r3, [pc, #64]	; (800aa50 <xPortStartScheduler+0x140>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a0f      	ldr	r2, [pc, #60]	; (800aa50 <xPortStartScheduler+0x140>)
 800aa12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa18:	f7ff ff66 	bl	800a8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa1c:	f7ff f856 	bl	8009acc <vTaskSwitchContext>
	prvTaskExitError();
 800aa20:	f7ff ff22 	bl	800a868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	e000ed00 	.word	0xe000ed00
 800aa34:	410fc271 	.word	0x410fc271
 800aa38:	410fc270 	.word	0x410fc270
 800aa3c:	e000e400 	.word	0xe000e400
 800aa40:	2000302c 	.word	0x2000302c
 800aa44:	20003030 	.word	0x20003030
 800aa48:	e000ed20 	.word	0xe000ed20
 800aa4c:	2000000c 	.word	0x2000000c
 800aa50:	e000ef34 	.word	0xe000ef34

0800aa54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	607b      	str	r3, [r7, #4]
}
 800aa6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa6e:	4b0f      	ldr	r3, [pc, #60]	; (800aaac <vPortEnterCritical+0x58>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	4a0d      	ldr	r2, [pc, #52]	; (800aaac <vPortEnterCritical+0x58>)
 800aa76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa78:	4b0c      	ldr	r3, [pc, #48]	; (800aaac <vPortEnterCritical+0x58>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d10f      	bne.n	800aaa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa80:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <vPortEnterCritical+0x5c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	603b      	str	r3, [r7, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <vPortEnterCritical+0x4a>
	}
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	2000000c 	.word	0x2000000c
 800aab0:	e000ed04 	.word	0xe000ed04

0800aab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaba:	4b12      	ldr	r3, [pc, #72]	; (800ab04 <vPortExitCritical+0x50>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10a      	bne.n	800aad8 <vPortExitCritical+0x24>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	607b      	str	r3, [r7, #4]
}
 800aad4:	bf00      	nop
 800aad6:	e7fe      	b.n	800aad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aad8:	4b0a      	ldr	r3, [pc, #40]	; (800ab04 <vPortExitCritical+0x50>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3b01      	subs	r3, #1
 800aade:	4a09      	ldr	r2, [pc, #36]	; (800ab04 <vPortExitCritical+0x50>)
 800aae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aae2:	4b08      	ldr	r3, [pc, #32]	; (800ab04 <vPortExitCritical+0x50>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d105      	bne.n	800aaf6 <vPortExitCritical+0x42>
 800aaea:	2300      	movs	r3, #0
 800aaec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	f383 8811 	msr	BASEPRI, r3
}
 800aaf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	2000000c 	.word	0x2000000c
	...

0800ab10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab10:	f3ef 8009 	mrs	r0, PSP
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <pxCurrentTCBConst>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f01e 0f10 	tst.w	lr, #16
 800ab20:	bf08      	it	eq
 800ab22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab34:	f380 8811 	msr	BASEPRI, r0
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f7fe ffc4 	bl	8009acc <vTaskSwitchContext>
 800ab44:	f04f 0000 	mov.w	r0, #0
 800ab48:	f380 8811 	msr	BASEPRI, r0
 800ab4c:	bc09      	pop	{r0, r3}
 800ab4e:	6819      	ldr	r1, [r3, #0]
 800ab50:	6808      	ldr	r0, [r1, #0]
 800ab52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab56:	f01e 0f10 	tst.w	lr, #16
 800ab5a:	bf08      	it	eq
 800ab5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab60:	f380 8809 	msr	PSP, r0
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	f3af 8000 	nop.w

0800ab70 <pxCurrentTCBConst>:
 800ab70:	20002a00 	.word	0x20002a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop

0800ab78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
}
 800ab90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab92:	f7fe fee1 	bl	8009958 <xTaskIncrementTick>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <xPortSysTickHandler+0x40>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	2300      	movs	r3, #0
 800aba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	f383 8811 	msr	BASEPRI, r3
}
 800abae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <vPortSetupTimerInterrupt+0x34>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abc6:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <vPortSetupTimerInterrupt+0x38>)
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <vPortSetupTimerInterrupt+0x3c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a0a      	ldr	r2, [pc, #40]	; (800abfc <vPortSetupTimerInterrupt+0x40>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	099b      	lsrs	r3, r3, #6
 800abd8:	4a09      	ldr	r2, [pc, #36]	; (800ac00 <vPortSetupTimerInterrupt+0x44>)
 800abda:	3b01      	subs	r3, #1
 800abdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abde:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <vPortSetupTimerInterrupt+0x34>)
 800abe0:	2207      	movs	r2, #7
 800abe2:	601a      	str	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	e000e010 	.word	0xe000e010
 800abf4:	e000e018 	.word	0xe000e018
 800abf8:	20000000 	.word	0x20000000
 800abfc:	10624dd3 	.word	0x10624dd3
 800ac00:	e000e014 	.word	0xe000e014

0800ac04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac14 <vPortEnableVFP+0x10>
 800ac08:	6801      	ldr	r1, [r0, #0]
 800ac0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac0e:	6001      	str	r1, [r0, #0]
 800ac10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac12:	bf00      	nop
 800ac14:	e000ed88 	.word	0xe000ed88

0800ac18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac1e:	f3ef 8305 	mrs	r3, IPSR
 800ac22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b0f      	cmp	r3, #15
 800ac28:	d914      	bls.n	800ac54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac2a:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <vPortValidateInterruptPriority+0x70>)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac34:	4b15      	ldr	r3, [pc, #84]	; (800ac8c <vPortValidateInterruptPriority+0x74>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	7afa      	ldrb	r2, [r7, #11]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d20a      	bcs.n	800ac54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	607b      	str	r3, [r7, #4]
}
 800ac50:	bf00      	nop
 800ac52:	e7fe      	b.n	800ac52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac54:	4b0e      	ldr	r3, [pc, #56]	; (800ac90 <vPortValidateInterruptPriority+0x78>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac5c:	4b0d      	ldr	r3, [pc, #52]	; (800ac94 <vPortValidateInterruptPriority+0x7c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d90a      	bls.n	800ac7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	603b      	str	r3, [r7, #0]
}
 800ac76:	bf00      	nop
 800ac78:	e7fe      	b.n	800ac78 <vPortValidateInterruptPriority+0x60>
	}
 800ac7a:	bf00      	nop
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	e000e3f0 	.word	0xe000e3f0
 800ac8c:	2000302c 	.word	0x2000302c
 800ac90:	e000ed0c 	.word	0xe000ed0c
 800ac94:	20003030 	.word	0x20003030

0800ac98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	; 0x28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aca0:	2300      	movs	r3, #0
 800aca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aca4:	f7fe fd9c 	bl	80097e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aca8:	4b5b      	ldr	r3, [pc, #364]	; (800ae18 <pvPortMalloc+0x180>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acb0:	f000 f920 	bl	800aef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acb4:	4b59      	ldr	r3, [pc, #356]	; (800ae1c <pvPortMalloc+0x184>)
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4013      	ands	r3, r2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 8093 	bne.w	800ade8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d01d      	beq.n	800ad04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800acc8:	2208      	movs	r2, #8
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d014      	beq.n	800ad04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f023 0307 	bic.w	r3, r3, #7
 800ace0:	3308      	adds	r3, #8
 800ace2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <pvPortMalloc+0x6c>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	617b      	str	r3, [r7, #20]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d06e      	beq.n	800ade8 <pvPortMalloc+0x150>
 800ad0a:	4b45      	ldr	r3, [pc, #276]	; (800ae20 <pvPortMalloc+0x188>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d869      	bhi.n	800ade8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad14:	4b43      	ldr	r3, [pc, #268]	; (800ae24 <pvPortMalloc+0x18c>)
 800ad16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad18:	4b42      	ldr	r3, [pc, #264]	; (800ae24 <pvPortMalloc+0x18c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad1e:	e004      	b.n	800ad2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d903      	bls.n	800ad3c <pvPortMalloc+0xa4>
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1f1      	bne.n	800ad20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad3c:	4b36      	ldr	r3, [pc, #216]	; (800ae18 <pvPortMalloc+0x180>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d050      	beq.n	800ade8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2208      	movs	r2, #8
 800ad4c:	4413      	add	r3, r2
 800ad4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	1ad2      	subs	r2, r2, r3
 800ad60:	2308      	movs	r3, #8
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d91f      	bls.n	800ada8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	f003 0307 	and.w	r3, r3, #7
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <pvPortMalloc+0xf8>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	613b      	str	r3, [r7, #16]
}
 800ad8c:	bf00      	nop
 800ad8e:	e7fe      	b.n	800ad8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	1ad2      	subs	r2, r2, r3
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ada2:	69b8      	ldr	r0, [r7, #24]
 800ada4:	f000 f908 	bl	800afb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ada8:	4b1d      	ldr	r3, [pc, #116]	; (800ae20 <pvPortMalloc+0x188>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	4a1b      	ldr	r2, [pc, #108]	; (800ae20 <pvPortMalloc+0x188>)
 800adb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adb6:	4b1a      	ldr	r3, [pc, #104]	; (800ae20 <pvPortMalloc+0x188>)
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <pvPortMalloc+0x190>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d203      	bcs.n	800adca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800adc2:	4b17      	ldr	r3, [pc, #92]	; (800ae20 <pvPortMalloc+0x188>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a18      	ldr	r2, [pc, #96]	; (800ae28 <pvPortMalloc+0x190>)
 800adc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <pvPortMalloc+0x184>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	431a      	orrs	r2, r3
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	2200      	movs	r2, #0
 800addc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800adde:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <pvPortMalloc+0x194>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	4a11      	ldr	r2, [pc, #68]	; (800ae2c <pvPortMalloc+0x194>)
 800ade6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ade8:	f7fe fd08 	bl	80097fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	f003 0307 	and.w	r3, r3, #7
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <pvPortMalloc+0x174>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	60fb      	str	r3, [r7, #12]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <pvPortMalloc+0x172>
	return pvReturn;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3728      	adds	r7, #40	; 0x28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20003bf4 	.word	0x20003bf4
 800ae1c:	20003c08 	.word	0x20003c08
 800ae20:	20003bf8 	.word	0x20003bf8
 800ae24:	20003bec 	.word	0x20003bec
 800ae28:	20003bfc 	.word	0x20003bfc
 800ae2c:	20003c00 	.word	0x20003c00

0800ae30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d04d      	beq.n	800aede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae42:	2308      	movs	r3, #8
 800ae44:	425b      	negs	r3, r3
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4413      	add	r3, r2
 800ae4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	685a      	ldr	r2, [r3, #4]
 800ae54:	4b24      	ldr	r3, [pc, #144]	; (800aee8 <vPortFree+0xb8>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10a      	bne.n	800ae74 <vPortFree+0x44>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	60fb      	str	r3, [r7, #12]
}
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00a      	beq.n	800ae92 <vPortFree+0x62>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	60bb      	str	r3, [r7, #8]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <vPortFree+0xb8>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01e      	beq.n	800aede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d11a      	bne.n	800aede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	4b0e      	ldr	r3, [pc, #56]	; (800aee8 <vPortFree+0xb8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	43db      	mvns	r3, r3
 800aeb2:	401a      	ands	r2, r3
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aeb8:	f7fe fc92 	bl	80097e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <vPortFree+0xbc>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4413      	add	r3, r2
 800aec6:	4a09      	ldr	r2, [pc, #36]	; (800aeec <vPortFree+0xbc>)
 800aec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aeca:	6938      	ldr	r0, [r7, #16]
 800aecc:	f000 f874 	bl	800afb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <vPortFree+0xc0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3301      	adds	r3, #1
 800aed6:	4a06      	ldr	r2, [pc, #24]	; (800aef0 <vPortFree+0xc0>)
 800aed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aeda:	f7fe fc8f 	bl	80097fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aede:	bf00      	nop
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20003c08 	.word	0x20003c08
 800aeec:	20003bf8 	.word	0x20003bf8
 800aef0:	20003c04 	.word	0x20003c04

0800aef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aefa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800aefe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af00:	4b27      	ldr	r3, [pc, #156]	; (800afa0 <prvHeapInit+0xac>)
 800af02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00c      	beq.n	800af28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3307      	adds	r3, #7
 800af12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f023 0307 	bic.w	r3, r3, #7
 800af1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	4a1f      	ldr	r2, [pc, #124]	; (800afa0 <prvHeapInit+0xac>)
 800af24:	4413      	add	r3, r2
 800af26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af2c:	4a1d      	ldr	r2, [pc, #116]	; (800afa4 <prvHeapInit+0xb0>)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af32:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <prvHeapInit+0xb0>)
 800af34:	2200      	movs	r2, #0
 800af36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	4413      	add	r3, r2
 800af3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af40:	2208      	movs	r2, #8
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0307 	bic.w	r3, r3, #7
 800af4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4a15      	ldr	r2, [pc, #84]	; (800afa8 <prvHeapInit+0xb4>)
 800af54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af56:	4b14      	ldr	r3, [pc, #80]	; (800afa8 <prvHeapInit+0xb4>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2200      	movs	r2, #0
 800af5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af5e:	4b12      	ldr	r3, [pc, #72]	; (800afa8 <prvHeapInit+0xb4>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	1ad2      	subs	r2, r2, r3
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af74:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <prvHeapInit+0xb4>)
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	4a0a      	ldr	r2, [pc, #40]	; (800afac <prvHeapInit+0xb8>)
 800af82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	4a09      	ldr	r2, [pc, #36]	; (800afb0 <prvHeapInit+0xbc>)
 800af8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af8c:	4b09      	ldr	r3, [pc, #36]	; (800afb4 <prvHeapInit+0xc0>)
 800af8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af92:	601a      	str	r2, [r3, #0]
}
 800af94:	bf00      	nop
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	20003034 	.word	0x20003034
 800afa4:	20003bec 	.word	0x20003bec
 800afa8:	20003bf4 	.word	0x20003bf4
 800afac:	20003bfc 	.word	0x20003bfc
 800afb0:	20003bf8 	.word	0x20003bf8
 800afb4:	20003c08 	.word	0x20003c08

0800afb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afc0:	4b28      	ldr	r3, [pc, #160]	; (800b064 <prvInsertBlockIntoFreeList+0xac>)
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	e002      	b.n	800afcc <prvInsertBlockIntoFreeList+0x14>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d8f7      	bhi.n	800afc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	4413      	add	r3, r2
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d108      	bne.n	800affa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	441a      	add	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	441a      	add	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d118      	bne.n	800b040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	4b15      	ldr	r3, [pc, #84]	; (800b068 <prvInsertBlockIntoFreeList+0xb0>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d00d      	beq.n	800b036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	441a      	add	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	e008      	b.n	800b048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b036:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <prvInsertBlockIntoFreeList+0xb0>)
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	e003      	b.n	800b048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d002      	beq.n	800b056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20003bec 	.word	0x20003bec
 800b068:	20003bf4 	.word	0x20003bf4

0800b06c <__libc_init_array>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	4d0d      	ldr	r5, [pc, #52]	; (800b0a4 <__libc_init_array+0x38>)
 800b070:	4c0d      	ldr	r4, [pc, #52]	; (800b0a8 <__libc_init_array+0x3c>)
 800b072:	1b64      	subs	r4, r4, r5
 800b074:	10a4      	asrs	r4, r4, #2
 800b076:	2600      	movs	r6, #0
 800b078:	42a6      	cmp	r6, r4
 800b07a:	d109      	bne.n	800b090 <__libc_init_array+0x24>
 800b07c:	4d0b      	ldr	r5, [pc, #44]	; (800b0ac <__libc_init_array+0x40>)
 800b07e:	4c0c      	ldr	r4, [pc, #48]	; (800b0b0 <__libc_init_array+0x44>)
 800b080:	f000 f82e 	bl	800b0e0 <_init>
 800b084:	1b64      	subs	r4, r4, r5
 800b086:	10a4      	asrs	r4, r4, #2
 800b088:	2600      	movs	r6, #0
 800b08a:	42a6      	cmp	r6, r4
 800b08c:	d105      	bne.n	800b09a <__libc_init_array+0x2e>
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	f855 3b04 	ldr.w	r3, [r5], #4
 800b094:	4798      	blx	r3
 800b096:	3601      	adds	r6, #1
 800b098:	e7ee      	b.n	800b078 <__libc_init_array+0xc>
 800b09a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b09e:	4798      	blx	r3
 800b0a0:	3601      	adds	r6, #1
 800b0a2:	e7f2      	b.n	800b08a <__libc_init_array+0x1e>
 800b0a4:	0800b26c 	.word	0x0800b26c
 800b0a8:	0800b26c 	.word	0x0800b26c
 800b0ac:	0800b26c 	.word	0x0800b26c
 800b0b0:	0800b270 	.word	0x0800b270

0800b0b4 <memcpy>:
 800b0b4:	440a      	add	r2, r1
 800b0b6:	4291      	cmp	r1, r2
 800b0b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0bc:	d100      	bne.n	800b0c0 <memcpy+0xc>
 800b0be:	4770      	bx	lr
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ca:	4291      	cmp	r1, r2
 800b0cc:	d1f9      	bne.n	800b0c2 <memcpy+0xe>
 800b0ce:	bd10      	pop	{r4, pc}

0800b0d0 <memset>:
 800b0d0:	4402      	add	r2, r0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d100      	bne.n	800b0da <memset+0xa>
 800b0d8:	4770      	bx	lr
 800b0da:	f803 1b01 	strb.w	r1, [r3], #1
 800b0de:	e7f9      	b.n	800b0d4 <memset+0x4>

0800b0e0 <_init>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	bf00      	nop
 800b0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e6:	bc08      	pop	{r3}
 800b0e8:	469e      	mov	lr, r3
 800b0ea:	4770      	bx	lr

0800b0ec <_fini>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr
